# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pygamma', [dirname(__file__)])
        except ImportError:
            import _pygamma
            return _pygamma
        if fp is not None:
            try:
                _mod = imp.load_module('_pygamma', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pygamma = swig_import_helper()
    del swig_import_helper
else:
    import _pygamma
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pygamma.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pygamma.SwigPyIterator_value(self)
    def incr(self, n = 1): return _pygamma.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _pygamma.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pygamma.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pygamma.SwigPyIterator_equal(self, *args)
    def copy(self): return _pygamma.SwigPyIterator_copy(self)
    def next(self): return _pygamma.SwigPyIterator_next(self)
    def __next__(self): return _pygamma.SwigPyIterator___next__(self)
    def previous(self): return _pygamma.SwigPyIterator_previous(self)
    def advance(self, *args): return _pygamma.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pygamma.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pygamma.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pygamma.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pygamma.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pygamma.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pygamma.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ParameterSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterSet, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pygamma.new_ParameterSet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_ParameterSet
    __del__ = lambda self : None;
ParameterSet_swigregister = _pygamma.ParameterSet_swigregister
ParameterSet_swigregister(ParameterSet)
cvar = _pygamma.cvar
GamSParInit = cvar.GamSParInit
GamIntVecInit = cvar.GamIntVecInit

class SinglePar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SinglePar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SinglePar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_SinglePar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_SinglePar
    __del__ = lambda self : None;
    def SPerror(self, *args): return _pygamma.SinglePar_SPerror(self, *args)
    def SPfatality(self, *args): return _pygamma.SinglePar_SPfatality(self, *args)
    def setCoord(self, *args): return _pygamma.SinglePar_setCoord(self, *args)
    def data(self, *args): return _pygamma.SinglePar_data(self, *args)
    def type(self, *args): return _pygamma.SinglePar_type(self, *args)
    def name(self, *args): return _pygamma.SinglePar_name(self, *args)
    def state(self, *args): return _pygamma.SinglePar_state(self, *args)
    def GetNS(self, *args): return _pygamma.SinglePar_GetNS(self, *args)
    def parse(self, *args): return _pygamma.SinglePar_parse(self, *args)
    def printStrings(self): return _pygamma.SinglePar_printStrings(self)
    def __eq__(self, *args): return _pygamma.SinglePar___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.SinglePar___ne__(self, *args)
    def __lt__(self, *args): return _pygamma.SinglePar___lt__(self, *args)
    def __gt__(self, *args): return _pygamma.SinglePar___gt__(self, *args)
SinglePar_swigregister = _pygamma.SinglePar_swigregister
SinglePar_swigregister(SinglePar)

class Isotope(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Isotope, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Isotope, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_Isotope(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_Isotope
    __del__ = lambda self : None;
    def qn(self): return _pygamma.Isotope_qn(self)
    def HS(self): return _pygamma.Isotope_HS(self)
    def momentum(self): return _pygamma.Isotope_momentum(self)
    def symbol(self): return _pygamma.Isotope_symbol(self)
    def name(self): return _pygamma.Isotope_name(self)
    def element(self): return _pygamma.Isotope_element(self)
    def number(self): return _pygamma.Isotope_number(self)
    def mass(self): return _pygamma.Isotope_mass(self)
    def weight(self): return _pygamma.Isotope_weight(self)
    def gamma(self): return _pygamma.Isotope_gamma(self)
    def receptivity(self): return _pygamma.Isotope_receptivity(self)
    def relative_frequency(self): return _pygamma.Isotope_relative_frequency(self)
    def electron(self): return _pygamma.Isotope_electron(self)
    def read(self, *args): return _pygamma.Isotope_read(self, *args)
    def printStrings(self, hdr = True): return _pygamma.Isotope_printStrings(self, hdr)
    def seek(self, *args): return _pygamma.Isotope_seek(self, *args)
    def exists(self, *args): return _pygamma.Isotope_exists(self, *args)
    __swig_getmethods__["known"] = lambda x: _pygamma.Isotope_known
    if _newclass:known = staticmethod(_pygamma.Isotope_known)
    __swig_getmethods__["size"] = lambda x: _pygamma.Isotope_size
    if _newclass:size = staticmethod(_pygamma.Isotope_size)
    __swig_getmethods__["PrintListStrings"] = lambda x: _pygamma.Isotope_PrintListStrings
    if _newclass:PrintListStrings = staticmethod(_pygamma.Isotope_PrintListStrings)
    __swig_getmethods__["AddIsotope"] = lambda x: _pygamma.Isotope_AddIsotope
    if _newclass:AddIsotope = staticmethod(_pygamma.Isotope_AddIsotope)
    def __eq__(self, *args): return _pygamma.Isotope___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.Isotope___ne__(self, *args)
    def __lt__(self, *args): return _pygamma.Isotope___lt__(self, *args)
    def __gt__(self, *args): return _pygamma.Isotope___gt__(self, *args)
    def nepair(self, *args): return _pygamma.Isotope_nepair(self, *args)
    def enpair(self, *args): return _pygamma.Isotope_enpair(self, *args)
    def eepair(self, *args): return _pygamma.Isotope_eepair(self, *args)
    def nnpair(self, *args): return _pygamma.Isotope_nnpair(self, *args)
Isotope_swigregister = _pygamma.Isotope_swigregister
Isotope_swigregister(Isotope)

def Isotope_known(*args):
  return _pygamma.Isotope_known(*args)
Isotope_known = _pygamma.Isotope_known

def Isotope_size():
  return _pygamma.Isotope_size()
Isotope_size = _pygamma.Isotope_size

def Isotope_PrintListStrings():
  return _pygamma.Isotope_PrintListStrings()
Isotope_PrintListStrings = _pygamma.Isotope_PrintListStrings

def Isotope_AddIsotope(*args):
  return _pygamma.Isotope_AddIsotope(*args)
Isotope_AddIsotope = _pygamma.Isotope_AddIsotope


def enable_blockdiag():
  return _pygamma.enable_blockdiag()
enable_blockdiag = _pygamma.enable_blockdiag

def disable_blockdiag():
  return _pygamma.disable_blockdiag()
disable_blockdiag = _pygamma.disable_blockdiag
class matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_matrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_matrix
    __del__ = lambda self : None;
    def __call__(self, *args): return _pygamma.matrix___call__(self, *args)
    def elem(self, *args): return _pygamma.matrix_elem(self, *args)
    def get(self, *args): return _pygamma.matrix_get(self, *args)
    def getRe(self, *args): return _pygamma.matrix_getRe(self, *args)
    def getIm(self, *args): return _pygamma.matrix_getIm(self, *args)
    def put(self, *args): return _pygamma.matrix_put(self, *args)
    def put_h(self, *args): return _pygamma.matrix_put_h(self, *args)
    def get_block(self, *args): return _pygamma.matrix_get_block(self, *args)
    def put_block(self, *args): return _pygamma.matrix_put_block(self, *args)
    def stored_hermitian(self): return _pygamma.matrix_stored_hermitian(self)
    def check_hermitian(self, *args): return _pygamma.matrix_check_hermitian(self, *args)
    def set_hermitian(self, *args): return _pygamma.matrix_set_hermitian(self, *args)
    def test_hermitian(self, *args): return _pygamma.matrix_test_hermitian(self, *args)
    def stored_type(self): return _pygamma.matrix_stored_type(self)
    def test_type(self, *args): return _pygamma.matrix_test_type(self, *args)
    def set_type(self, *args): return _pygamma.matrix_set_type(self, *args)
    def check_type(self, *args): return _pygamma.matrix_check_type(self, *args)
    def mxtype(self): return _pygamma.matrix_mxtype(self)
    def cols(self): return _pygamma.matrix_cols(self)
    def rows(self): return _pygamma.matrix_rows(self)
    def refs(self): return _pygamma.matrix_refs(self)
    def pts(self): return _pygamma.matrix_pts(self)
    def is_symmetric(self, *args): return _pygamma.matrix_is_symmetric(self, *args)
    def is_hermitian(self, *args): return _pygamma.matrix_is_hermitian(self, *args)
    def is_unitary(self, *args): return _pygamma.matrix_is_unitary(self, *args)
    def is_real(self, *args): return _pygamma.matrix_is_real(self, *args)
    def is_imaginary(self, *args): return _pygamma.matrix_is_imaginary(self, *args)
    def is_complex(self, *args): return _pygamma.matrix_is_complex(self, *args)
    def is_zero(self, *args): return _pygamma.matrix_is_zero(self, *args)
    def is_diagonal(self, *args): return _pygamma.matrix_is_diagonal(self, *args)
    def is_square(self): return _pygamma.matrix_is_square(self)
    def __add__(self, *args): return _pygamma.matrix___add__(self, *args)
    def __sub__(self, *args): return _pygamma.matrix___sub__(self, *args)
    def __mul__(self, *args): return _pygamma.matrix___mul__(self, *args)
    def __div__(self, *args): return _pygamma.matrix___div__(self, *args)
    def __iadd__(self, *args): return _pygamma.matrix___iadd__(self, *args)
    def __isub__(self, *args): return _pygamma.matrix___isub__(self, *args)
    def __imul__(self, *args): return _pygamma.matrix___imul__(self, *args)
    def __idiv__(self, *args): return _pygamma.matrix___idiv__(self, *args)
    def __neg__(self): return _pygamma.matrix___neg__(self)
    def Re(self): return _pygamma.matrix_Re(self)
    def Im(self): return _pygamma.matrix_Im(self)
    def conj(self): return _pygamma.matrix_conj(self)
    def transpose(self): return _pygamma.matrix_transpose(self)
    def adjoint(self): return _pygamma.matrix_adjoint(self)
    def exp(self): return _pygamma.matrix_exp(self)
    def swaprows(self, *args): return _pygamma.matrix_swaprows(self, *args)
    def swapcols(self, *args): return _pygamma.matrix_swapcols(self, *args)
    def permute(self, *args): return _pygamma.matrix_permute(self, *args)
    def maxRe(self): return _pygamma.matrix_maxRe(self)
    def maxIm(self): return _pygamma.matrix_maxIm(self)
    def maxZ(self): return _pygamma.matrix_maxZ(self)
    def minRe(self): return _pygamma.matrix_minRe(self)
    def minIm(self): return _pygamma.matrix_minIm(self)
    def minZ(self): return _pygamma.matrix_minZ(self)
    def trace(self, *args): return _pygamma.matrix_trace(self, *args)
    def det(self): return _pygamma.matrix_det(self)
    def FFT(self): return _pygamma.matrix_FFT(self)
    def IFFT(self): return _pygamma.matrix_IFFT(self)
    __swig_getmethods__["Header"] = lambda x: _pygamma.matrix_Header
    if _newclass:Header = staticmethod(_pygamma.matrix_Header)
    __swig_getmethods__["PrintRI"] = lambda x: _pygamma.matrix_PrintRI
    if _newclass:PrintRI = staticmethod(_pygamma.matrix_PrintRI)
    __swig_getmethods__["PrintAll"] = lambda x: _pygamma.matrix_PrintAll
    if _newclass:PrintAll = staticmethod(_pygamma.matrix_PrintAll)
    __swig_getmethods__["PictDim"] = lambda x: _pygamma.matrix_PictDim
    if _newclass:PictDim = staticmethod(_pygamma.matrix_PictDim)
    __swig_getmethods__["PrintVal"] = lambda x: _pygamma.matrix_PrintVal
    if _newclass:PrintVal = staticmethod(_pygamma.matrix_PrintVal)
    __swig_getmethods__["PrintCols"] = lambda x: _pygamma.matrix_PrintCols
    if _newclass:PrintCols = staticmethod(_pygamma.matrix_PrintCols)
    __swig_getmethods__["PrintRows"] = lambda x: _pygamma.matrix_PrintRows
    if _newclass:PrintRows = staticmethod(_pygamma.matrix_PrintRows)
    def ask(self, *args): return _pygamma.matrix_ask(self, *args)
    def resize(self, *args): return _pygamma.matrix_resize(self, *args)
    def diagonal_form(self): return _pygamma.matrix_diagonal_form(self)
    def same_reference_as(self, *args): return _pygamma.matrix_same_reference_as(self, *args)
    def status(self, full = 0): return _pygamma.matrix_status(self, full)
    def BlockDiag(self, *args): return _pygamma.matrix_BlockDiag(self, *args)
    def SymTriDiag(self, *args): return _pygamma.matrix_SymTriDiag(self, *args)
    def HermTriDiag(self, *args): return _pygamma.matrix_HermTriDiag(self, *args)
    def SymDiag(self, *args): return _pygamma.matrix_SymDiag(self, *args)
    def Diagonalize(self, *args): return _pygamma.matrix_Diagonalize(self, *args)
    def TestEigenSystem(self, pf = 1): return _pygamma.matrix_TestEigenSystem(self, pf)
    def TestTransform(self, *args): return _pygamma.matrix_TestTransform(self, *args)
    def ColumnNorms(self): return _pygamma.matrix_ColumnNorms(self)
    def TestIdentity(self, *args): return _pygamma.matrix_TestIdentity(self, *args)
    def TestUnitary(self, *args): return _pygamma.matrix_TestUnitary(self, *args)
    def TestUTransform(self, *args): return _pygamma.matrix_TestUTransform(self, *args)
    def __eq__(self, *args): return _pygamma.matrix___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.matrix___ne__(self, *args)
    def __lt__(self, *args): return _pygamma.matrix___lt__(self, *args)
    def __gt__(self, *args): return _pygamma.matrix___gt__(self, *args)
matrix_swigregister = _pygamma.matrix_swigregister
matrix_swigregister(matrix)

def matrix_Header(*args):
  return _pygamma.matrix_Header(*args)
matrix_Header = _pygamma.matrix_Header

def matrix_PrintRI(*args):
  return _pygamma.matrix_PrintRI(*args)
matrix_PrintRI = _pygamma.matrix_PrintRI

def matrix_PrintAll(*args):
  return _pygamma.matrix_PrintAll(*args)
matrix_PrintAll = _pygamma.matrix_PrintAll

def matrix_PictDim(*args):
  return _pygamma.matrix_PictDim(*args)
matrix_PictDim = _pygamma.matrix_PictDim

def matrix_PrintVal(*args):
  return _pygamma.matrix_PrintVal(*args)
matrix_PrintVal = _pygamma.matrix_PrintVal

def matrix_PrintCols(*args):
  return _pygamma.matrix_PrintCols(*args)
matrix_PrintCols = _pygamma.matrix_PrintCols

def matrix_PrintRows(*args):
  return _pygamma.matrix_PrintRows(*args)
matrix_PrintRows = _pygamma.matrix_PrintRows

class row_vector(matrix):
    __swig_setmethods__ = {}
    for _s in [matrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, row_vector, name, value)
    __swig_getmethods__ = {}
    for _s in [matrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, row_vector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_row_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_row_vector
    __del__ = lambda self : None;
    def __call__(self, *args): return _pygamma.row_vector___call__(self, *args)
    def get(self, *args): return _pygamma.row_vector_get(self, *args)
    def getRe(self, *args): return _pygamma.row_vector_getRe(self, *args)
    def getIm(self, *args): return _pygamma.row_vector_getIm(self, *args)
    def put(self, *args): return _pygamma.row_vector_put(self, *args)
    def elements(self): return _pygamma.row_vector_elements(self)
    def size(self): return _pygamma.row_vector_size(self)
    def __add__(self, *args): return _pygamma.row_vector___add__(self, *args)
    def __sub__(self, *args): return _pygamma.row_vector___sub__(self, *args)
    def __mul__(self, *args): return _pygamma.row_vector___mul__(self, *args)
    def __iadd__(self, *args): return _pygamma.row_vector___iadd__(self, *args)
    def __isub__(self, *args): return _pygamma.row_vector___isub__(self, *args)
    def __imul__(self, *args): return _pygamma.row_vector___imul__(self, *args)
    def __idiv__(self, *args): return _pygamma.row_vector___idiv__(self, *args)
    def differential(self): return _pygamma.row_vector_differential(self)
    def norm(self): return _pygamma.row_vector_norm(self)
    def maxRe(self): return _pygamma.row_vector_maxRe(self)
    def maxIm(self): return _pygamma.row_vector_maxIm(self)
    def maxZ(self): return _pygamma.row_vector_maxZ(self)
    def minRe(self): return _pygamma.row_vector_minRe(self)
    def minIm(self): return _pygamma.row_vector_minIm(self)
    def minZ(self): return _pygamma.row_vector_minZ(self)
    def max(self, type = 0): return _pygamma.row_vector_max(self, type)
    def min(self, type = 0): return _pygamma.row_vector_min(self, type)
    def flip(self): return _pygamma.row_vector_flip(self)
    def sum(self, *args): return _pygamma.row_vector_sum(self, *args)
    def zero(self): return _pygamma.row_vector_zero(self)
    def sort(self, type = 0): return _pygamma.row_vector_sort(self, type)
    def product(self, *args): return _pygamma.row_vector_product(self, *args)
    def scalar_product(self, *args): return _pygamma.row_vector_scalar_product(self, *args)
    def hdrString(self): return _pygamma.row_vector_hdrString(self)
    SMIS = _pygamma.row_vector_SMIS
    SIEMENS = _pygamma.row_vector_SIEMENS
    SIEMENS_NOHDR = _pygamma.row_vector_SIEMENS_NOHDR
    PLAIN_ASCII = _pygamma.row_vector_PLAIN_ASCII
    ASCII_MT_DEG = _pygamma.row_vector_ASCII_MT_DEG
    SVS = _pygamma.row_vector_SVS
    __swig_getmethods__["read_pulse"] = lambda x: _pygamma.row_vector_read_pulse
    if _newclass:read_pulse = staticmethod(_pygamma.row_vector_read_pulse)
    def ask(self): return _pygamma.row_vector_ask(self)
row_vector_swigregister = _pygamma.row_vector_swigregister
row_vector_swigregister(row_vector)

def row_vector_read_pulse(*args):
  return _pygamma.row_vector_read_pulse(*args)
row_vector_read_pulse = _pygamma.row_vector_read_pulse

class col_vector(matrix):
    __swig_setmethods__ = {}
    for _s in [matrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, col_vector, name, value)
    __swig_getmethods__ = {}
    for _s in [matrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, col_vector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_col_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_col_vector
    __del__ = lambda self : None;
    def __call__(self, *args): return _pygamma.col_vector___call__(self, *args)
    def get(self, *args): return _pygamma.col_vector_get(self, *args)
    def getRe(self, *args): return _pygamma.col_vector_getRe(self, *args)
    def getIm(self, *args): return _pygamma.col_vector_getIm(self, *args)
    def put(self, *args): return _pygamma.col_vector_put(self, *args)
    def elements(self): return _pygamma.col_vector_elements(self)
    def size(self): return _pygamma.col_vector_size(self)
    def __add__(self, *args): return _pygamma.col_vector___add__(self, *args)
    def __sub__(self, *args): return _pygamma.col_vector___sub__(self, *args)
    def __mul__(self, *args): return _pygamma.col_vector___mul__(self, *args)
    def __iadd__(self, *args): return _pygamma.col_vector___iadd__(self, *args)
    def __isub__(self, *args): return _pygamma.col_vector___isub__(self, *args)
    def __imul__(self, *args): return _pygamma.col_vector___imul__(self, *args)
    def __idiv__(self, *args): return _pygamma.col_vector___idiv__(self, *args)
    def adjoint(self): return _pygamma.col_vector_adjoint(self)
    def transpose(self): return _pygamma.col_vector_transpose(self)
    def trace(self): return _pygamma.col_vector_trace(self)
    def differential(self): return _pygamma.col_vector_differential(self)
    def norm(self): return _pygamma.col_vector_norm(self)
    def maxRe(self): return _pygamma.col_vector_maxRe(self)
    def maxIm(self): return _pygamma.col_vector_maxIm(self)
    def maxZ(self): return _pygamma.col_vector_maxZ(self)
    def minRe(self): return _pygamma.col_vector_minRe(self)
    def minIm(self): return _pygamma.col_vector_minIm(self)
    def minZ(self): return _pygamma.col_vector_minZ(self)
    def max(self, type = 0): return _pygamma.col_vector_max(self, type)
    def min(self, type = 0): return _pygamma.col_vector_min(self, type)
    def flip(self): return _pygamma.col_vector_flip(self)
    def sum(self, *args): return _pygamma.col_vector_sum(self, *args)
    def zero(self): return _pygamma.col_vector_zero(self)
    def sort(self, type = 0): return _pygamma.col_vector_sort(self, type)
    def product(self, *args): return _pygamma.col_vector_product(self, *args)
    def scalar_product(self, *args): return _pygamma.col_vector_scalar_product(self, *args)
    def hdrString(self): return _pygamma.col_vector_hdrString(self)
    def ask(self): return _pygamma.col_vector_ask(self)
col_vector_swigregister = _pygamma.col_vector_swigregister
col_vector_swigregister(col_vector)

class complex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, complex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, complex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_complex(*args)
        try: self.this.append(this)
        except: self.this = this
    def Relem(self): return _pygamma.complex_Relem(self)
    def Ielem(self): return _pygamma.complex_Ielem(self)
    def Rec(self): return _pygamma.complex_Rec(self)
    def Imc(self): return _pygamma.complex_Imc(self)
    def __add__(self, *args): return _pygamma.complex___add__(self, *args)
    def __iadd__(self, *args): return _pygamma.complex___iadd__(self, *args)
    def __sub__(self, *args): return _pygamma.complex___sub__(self, *args)
    def __isub__(self, *args): return _pygamma.complex___isub__(self, *args)
    def __mul__(self, *args): return _pygamma.complex___mul__(self, *args)
    def __imul__(self, *args): return _pygamma.complex___imul__(self, *args)
    def __div__(self, *args): return _pygamma.complex___div__(self, *args)
    def __idiv__(self, *args): return _pygamma.complex___idiv__(self, *args)
    def conj(self): return _pygamma.complex_conj(self)
    def conj_times(self, *args): return _pygamma.complex_conj_times(self, *args)
    def Zexp(self): return _pygamma.complex_Zexp(self)
    def Zsin(self): return _pygamma.complex_Zsin(self)
    def Zcos(self): return _pygamma.complex_Zcos(self)
    def Ztan(self): return _pygamma.complex_Ztan(self)
    def Zasin(self): return _pygamma.complex_Zasin(self)
    def Zacos(self): return _pygamma.complex_Zacos(self)
    def Zatan(self): return _pygamma.complex_Zatan(self)
    def Zsinh(self): return _pygamma.complex_Zsinh(self)
    def Zcosh(self): return _pygamma.complex_Zcosh(self)
    def Ztanh(self): return _pygamma.complex_Ztanh(self)
    def Zasinh(self): return _pygamma.complex_Zasinh(self)
    def Zacosh(self): return _pygamma.complex_Zacosh(self)
    def Zatanh(self): return _pygamma.complex_Zatanh(self)
    __swig_getmethods__["Reiphi"] = lambda x: _pygamma.complex_Reiphi
    if _newclass:Reiphi = staticmethod(_pygamma.complex_Reiphi)
    __swig_getmethods__["delim"] = lambda x: _pygamma.complex_delim
    if _newclass:delim = staticmethod(_pygamma.complex_delim)
    __swig_getmethods__["scinot"] = lambda x: _pygamma.complex_scinot
    if _newclass:scinot = staticmethod(_pygamma.complex_scinot)
    __swig_getmethods__["digits"] = lambda x: _pygamma.complex_digits
    if _newclass:digits = staticmethod(_pygamma.complex_digits)
    __swig_getmethods__["dadp"] = lambda x: _pygamma.complex_dadp
    if _newclass:dadp = staticmethod(_pygamma.complex_dadp)
    __swig_getmethods__["dlength"] = lambda x: _pygamma.complex_dlength
    if _newclass:dlength = staticmethod(_pygamma.complex_dlength)
    __swig_getmethods__["dformat"] = lambda x: _pygamma.complex_dformat
    if _newclass:dformat = staticmethod(_pygamma.complex_dformat)
    __swig_getmethods__["zlength"] = lambda x: _pygamma.complex_zlength
    if _newclass:zlength = staticmethod(_pygamma.complex_zlength)
    __swig_getmethods__["normphase"] = lambda x: _pygamma.complex_normphase
    if _newclass:normphase = staticmethod(_pygamma.complex_normphase)
    __swig_getmethods__["complex_getf"] = lambda x: _pygamma.complex_complex_getf
    if _newclass:complex_getf = staticmethod(_pygamma.complex_complex_getf)
    def printString(self): return _pygamma.complex_printString(self)
    def write(self, *args): return _pygamma.complex_write(self, *args)
    def read(self, *args): return _pygamma.complex_read(self, *args)
    def __eq__(self, *args): return _pygamma.complex___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.complex___ne__(self, *args)
    def __lt__(self, *args): return _pygamma.complex___lt__(self, *args)
    def __gt__(self, *args): return _pygamma.complex___gt__(self, *args)
    __swig_destroy__ = _pygamma.delete_complex
    __del__ = lambda self : None;
complex_swigregister = _pygamma.complex_swigregister
complex_swigregister(complex)

def Swap(*args):
  return _pygamma.Swap(*args)
Swap = _pygamma.Swap

def complex_Reiphi(*args):
  return _pygamma.complex_Reiphi(*args)
complex_Reiphi = _pygamma.complex_Reiphi

def complex_delim(*args):
  return _pygamma.complex_delim(*args)
complex_delim = _pygamma.complex_delim

def complex_scinot(*args):
  return _pygamma.complex_scinot(*args)
complex_scinot = _pygamma.complex_scinot

def complex_digits(*args):
  return _pygamma.complex_digits(*args)
complex_digits = _pygamma.complex_digits

def complex_dadp(*args):
  return _pygamma.complex_dadp(*args)
complex_dadp = _pygamma.complex_dadp

def complex_dlength():
  return _pygamma.complex_dlength()
complex_dlength = _pygamma.complex_dlength

def complex_dformat():
  return _pygamma.complex_dformat()
complex_dformat = _pygamma.complex_dformat

def complex_zlength():
  return _pygamma.complex_zlength()
complex_zlength = _pygamma.complex_zlength

def complex_normphase():
  return _pygamma.complex_normphase()
complex_normphase = _pygamma.complex_normphase

def complex_complex_getf(*args):
  return _pygamma.complex_complex_getf(*args)
complex_complex_getf = _pygamma.complex_complex_getf

class spin_sys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_sys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spin_sys, name)
    __repr__ = _swig_repr
    def check_spin(self, *args): return _pygamma.spin_sys_check_spin(self, *args)
    def check_spins(self, *args): return _pygamma.spin_sys_check_spins(self, *args)
    def __init__(self, *args): 
        this = _pygamma.new_spin_sys(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_spin_sys
    __del__ = lambda self : None;
    def spins(self): return _pygamma.spin_sys_spins(self)
    def spinpairs(self): return _pygamma.spin_sys_spinpairs(self)
    def HS(self, *args): return _pygamma.spin_sys_HS(self, *args)
    def isotope(self, *args): return _pygamma.spin_sys_isotope(self, *args)
    def weight(self, *args): return _pygamma.spin_sys_weight(self, *args)
    def symbol(self, *args): return _pygamma.spin_sys_symbol(self, *args)
    def qn(self, *args): return _pygamma.spin_sys_qn(self, *args)
    def element(self, *args): return _pygamma.spin_sys_element(self, *args)
    def momentum(self, *args): return _pygamma.spin_sys_momentum(self, *args)
    def gamma(self, *args): return _pygamma.spin_sys_gamma(self, *args)
    def HSvect(self): return _pygamma.spin_sys_HSvect(self)
    def qState(self, *args): return _pygamma.spin_sys_qState(self, *args)
    def qnState(self, *args): return _pygamma.spin_sys_qnState(self, *args)
    def qnStates(self): return _pygamma.spin_sys_qnStates(self)
    def qnDist(self): return _pygamma.spin_sys_qnDist(self)
    def CoherDist(self): return _pygamma.spin_sys_CoherDist(self)
    def homonuclear(self): return _pygamma.spin_sys_homonuclear(self)
    def heteronuclear(self): return _pygamma.spin_sys_heteronuclear(self)
    def electron(self, *args): return _pygamma.spin_sys_electron(self, *args)
    def nucleon(self, *args): return _pygamma.spin_sys_nucleon(self, *args)
    def spinhalf(self): return _pygamma.spin_sys_spinhalf(self)
    def electrons(self): return _pygamma.spin_sys_electrons(self)
    def nucleons(self): return _pygamma.spin_sys_nucleons(self)
    def nepair(self, *args): return _pygamma.spin_sys_nepair(self, *args)
    def enpair(self, *args): return _pygamma.spin_sys_enpair(self, *args)
    def eepair(self, *args): return _pygamma.spin_sys_eepair(self, *args)
    def nnpair(self, *args): return _pygamma.spin_sys_nnpair(self, *args)
    def pairidx(self, *args): return _pygamma.spin_sys_pairidx(self, *args)
    def isotopes(self, *args): return _pygamma.spin_sys_isotopes(self, *args)
    def SetFlag(self, *args): return _pygamma.spin_sys_SetFlag(self, *args)
    def SetFlags(self, *args): return _pygamma.spin_sys_SetFlags(self, *args)
    def GetFlag(self, *args): return _pygamma.spin_sys_GetFlag(self, *args)
    def name(self, *args): return _pygamma.spin_sys_name(self, *args)
    def warnings(self, *args): return _pygamma.spin_sys_warnings(self, *args)
    def IsoDefault(self, *args): return _pygamma.spin_sys_IsoDefault(self, *args)
    def PSetAdd(self, *args): return _pygamma.spin_sys_PSetAdd(self, *args)
    def getSpins(self, *args): return _pygamma.spin_sys_getSpins(self, *args)
    def setName(self, *args): return _pygamma.spin_sys_setName(self, *args)
    def setIs(self, *args): return _pygamma.spin_sys_setIs(self, *args)
    def ask_read(self, *args): return _pygamma.spin_sys_ask_read(self, *args)
    def get_basis(self): return _pygamma.spin_sys_get_basis(self)
    def printstrings(self): return _pygamma.spin_sys_printstrings(self)
    def SYSStrings(self, w1 = 10, w2 = 5, w3 = 1): return _pygamma.spin_sys_SYSStrings(self, w1, w2, w3)
    def SIStrings(self, colwd = 10): return _pygamma.spin_sys_SIStrings(self, colwd)
    def SYMStrings(self, colwd = 10): return _pygamma.spin_sys_SYMStrings(self, colwd)
    def SAMStrings(self, colwd = 10): return _pygamma.spin_sys_SAMStrings(self, colwd)
spin_sys_swigregister = _pygamma.spin_sys_swigregister
spin_sys_swigregister(spin_sys)
complex0 = cvar.complex0
complex1 = cvar.complex1
complexi = cvar.complexi

class spin_system(spin_sys):
    __swig_setmethods__ = {}
    for _s in [spin_sys]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_system, name, value)
    __swig_getmethods__ = {}
    for _s in [spin_sys]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, spin_system, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_spin_system(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_spin_system
    __del__ = lambda self : None;
    def shifts(self, shift = 0): return _pygamma.spin_system_shifts(self, shift)
    def shift(self, *args): return _pygamma.spin_system_shift(self, *args)
    def maxShift(self, *args): return _pygamma.spin_system_maxShift(self, *args)
    def minShift(self, *args): return _pygamma.spin_system_minShift(self, *args)
    def medianShift(self): return _pygamma.spin_system_medianShift(self)
    def lab_shift(self, *args): return _pygamma.spin_system_lab_shift(self, *args)
    def offsetShifts(self, *args): return _pygamma.spin_system_offsetShifts(self, *args)
    def PPM(self, *args): return _pygamma.spin_system_PPM(self, *args)
    def gfactor(self, *args): return _pygamma.spin_system_gfactor(self, *args)
    def eshift(self, *args): return _pygamma.spin_system_eshift(self, *args)
    def lab_eshift(self, *args): return _pygamma.spin_system_lab_eshift(self, *args)
    def efield(self, *args): return _pygamma.spin_system_efield(self, *args)
    def efield_lab(self, *args): return _pygamma.spin_system_efield_lab(self, *args)
    def Js(self, Jval = 0): return _pygamma.spin_system_Js(self, Jval)
    def J(self, *args): return _pygamma.spin_system_J(self, *args)
    def As(self, Aval = 0): return _pygamma.spin_system_As(self, Aval)
    def A(self, *args): return _pygamma.spin_system_A(self, *args)
    def AHz(self, *args): return _pygamma.spin_system_AHz(self, *args)
    def Omega(self, *args): return _pygamma.spin_system_Omega(self, *args)
    def Bo(self): return _pygamma.spin_system_Bo(self)
    def OmegaAdjust(self, *args): return _pygamma.spin_system_OmegaAdjust(self, *args)
    def FieldAdjust(self, *args): return _pygamma.spin_system_FieldAdjust(self, *args)
    def spectrometer_frequency(self, *args): return _pygamma.spin_system_spectrometer_frequency(self, *args)
    def spflags(self, *args): return _pygamma.spin_system_spflags(self, *args)
    def spflag(self, *args): return _pygamma.spin_system_spflag(self, *args)
    def center(self, spin = 0): return _pygamma.spin_system_center(self, spin)
    def Nyquist(self, *args): return _pygamma.spin_system_Nyquist(self, *args)
    def PSetAdd(self, *args): return _pygamma.spin_system_PSetAdd(self, *args)
    def setJs(self, *args): return _pygamma.spin_system_setJs(self, *args)
    def setAs(self, *args): return _pygamma.spin_system_setAs(self, *args)
    def setShifts(self, *args): return _pygamma.spin_system_setShifts(self, *args)
    def setGs(self, *args): return _pygamma.spin_system_setGs(self, *args)
    def write(self, *args): return _pygamma.spin_system_write(self, *args)
    def read(self, *args): return _pygamma.spin_system_read(self, *args)
    def ask_read(self, *args): return _pygamma.spin_system_ask_read(self, *args)
    def SYSStrings(self, w1 = 10, w2 = 12, w3 = 1): return _pygamma.spin_system_SYSStrings(self, w1, w2, w3)
    def VStrings(self, colwd = 12, digs = 2): return _pygamma.spin_system_VStrings(self, colwd, digs)
    def PPMStrings(self, colwd = 12, digs = 2): return _pygamma.spin_system_PPMStrings(self, colwd, digs)
    def GFStrings(self, colwd = 12, digs = 2): return _pygamma.spin_system_GFStrings(self, colwd, digs)
    def BeStrings(self, colwd = 12, digs = 2): return _pygamma.spin_system_BeStrings(self, colwd, digs)
    def JStrings(self, colwd = 12, digs = 2): return _pygamma.spin_system_JStrings(self, colwd, digs)
    def AStrings(self, colwd = 12, digs = 2): return _pygamma.spin_system_AStrings(self, colwd, digs)
    def OmStrings(self, colwd = 12, digs = 2): return _pygamma.spin_system_OmStrings(self, colwd, digs)
spin_system_swigregister = _pygamma.spin_system_swigregister
spin_system_swigregister(spin_system)

class gen_op(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gen_op, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gen_op, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_gen_op(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_gen_op
    __del__ = lambda self : None;
    def __add__(self, *args): return _pygamma.gen_op___add__(self, *args)
    def __sub__(self, *args): return _pygamma.gen_op___sub__(self, *args)
    def __neg__(self): return _pygamma.gen_op___neg__(self)
    def __mul__(self, *args): return _pygamma.gen_op___mul__(self, *args)
    def __iand__(self, *args): return _pygamma.gen_op___iand__(self, *args)
    def __iadd__(self, *args): return _pygamma.gen_op___iadd__(self, *args)
    def __isub__(self, *args): return _pygamma.gen_op___isub__(self, *args)
    def __imul__(self, *args): return _pygamma.gen_op___imul__(self, *args)
    def __idiv__(self, *args): return _pygamma.gen_op___idiv__(self, *args)
    def det(self): return _pygamma.gen_op_det(self)
    def trace(self, *args): return _pygamma.gen_op_trace(self, *args)
    def proj(self, *args): return _pygamma.gen_op_proj(self, *args)
    def dim(self): return _pygamma.gen_op_dim(self)
    def HS(self): return _pygamma.gen_op_HS(self)
    def LS(self): return _pygamma.gen_op_LS(self)
    def dim_LS(self): return _pygamma.gen_op_dim_LS(self)
    def exp(self, *args): return _pygamma.gen_op_exp(self, *args)
    def Pow(self, *args): return _pygamma.gen_op_Pow(self, *args)
    def sim_trans(self, *args): return _pygamma.gen_op_sim_trans(self, *args)
    def sim_trans_ip(self, *args): return _pygamma.gen_op_sim_trans_ip(self, *args)
    def eigvals(self, *args): return _pygamma.gen_op_eigvals(self, *args)
    def get_bs(self): return _pygamma.gen_op_get_bs(self)
    def get_basis(self): return _pygamma.gen_op_get_basis(self)
    def put_bs(self, *args): return _pygamma.gen_op_put_bs(self, *args)
    def put_basis(self, *args): return _pygamma.gen_op_put_basis(self, *args)
    def __call__(self, *args): return _pygamma.gen_op___call__(self, *args)
    def get(self, *args): return _pygamma.gen_op_get(self, *args)
    def put(self, *args): return _pygamma.gen_op_put(self, *args)
    def name(self, *args): return _pygamma.gen_op_name(self, *args)
    def bsname(self, *args): return _pygamma.gen_op_bsname(self, *args)
    def exists(self): return _pygamma.gen_op_exists(self)
    def superket(self): return _pygamma.gen_op_superket(self)
    def desuperket(self, *args): return _pygamma.gen_op_desuperket(self, *args)
    def project_sub(self, *args): return _pygamma.gen_op_project_sub(self, *args)
    def test_EBR(self): return _pygamma.gen_op_test_EBR(self)
    def test_DBR(self): return _pygamma.gen_op_test_DBR(self)
    def in_EBR(self): return _pygamma.gen_op_in_EBR(self)
    def in_DBR(self): return _pygamma.gen_op_in_DBR(self)
    def set_DBR(self): return _pygamma.gen_op_set_DBR(self)
    def set_EBR(self): return _pygamma.gen_op_set_EBR(self)
    def Op_base(self, *args): return _pygamma.gen_op_Op_base(self, *args)
    def status(self, pf = 0): return _pygamma.gen_op_status(self, pf)
    def setOnlyWBR(self): return _pygamma.gen_op_setOnlyWBR(self)
    def Op_priority(self, *args): return _pygamma.gen_op_Op_priority(self, *args)
    def SetLimits(self, *args): return _pygamma.gen_op_SetLimits(self, *args)
    def OpCheck(self, *args): return _pygamma.gen_op_OpCheck(self, *args)
    def LimCheck(self, *args): return _pygamma.gen_op_LimCheck(self, *args)
    def write(self, *args): return _pygamma.gen_op_write(self, *args)
    def read(self, *args): return _pygamma.gen_op_read(self, *args)
    def TestEigenSystem(self, pf = 0): return _pygamma.gen_op_TestEigenSystem(self, pf)
    def is_symmetric(self, *args): return _pygamma.gen_op_is_symmetric(self, *args)
    def is_hermitian(self, *args): return _pygamma.gen_op_is_hermitian(self, *args)
    def is_unitary(self, *args): return _pygamma.gen_op_is_unitary(self, *args)
    def is_real(self, *args): return _pygamma.gen_op_is_real(self, *args)
    def is_imaginary(self, *args): return _pygamma.gen_op_is_imaginary(self, *args)
    def is_complex(self, *args): return _pygamma.gen_op_is_complex(self, *args)
    def is_zero(self, *args): return _pygamma.gen_op_is_zero(self, *args)
    def is_diagonal(self, *args): return _pygamma.gen_op_is_diagonal(self, *args)
    def is_square(self): return _pygamma.gen_op_is_square(self)
    def __eq__(self, *args): return _pygamma.gen_op___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.gen_op___ne__(self, *args)
    def __lt__(self, *args): return _pygamma.gen_op___lt__(self, *args)
    def __gt__(self, *args): return _pygamma.gen_op___gt__(self, *args)
gen_op_swigregister = _pygamma.gen_op_swigregister
gen_op_swigregister(gen_op)


def I_gen_op(*args):
  return _pygamma.I_gen_op(*args)
I_gen_op = _pygamma.I_gen_op

def Hcs(*args):
  return _pygamma.Hcs(*args)
Hcs = _pygamma.Hcs

def Hcs_lab(*args):
  return _pygamma.Hcs_lab(*args)
Hcs_lab = _pygamma.Hcs_lab

def HJw(*args):
  return _pygamma.HJw(*args)
HJw = _pygamma.HJw

def HJ(*args):
  return _pygamma.HJ(*args)
HJ = _pygamma.HJ

def HJwh(*args):
  return _pygamma.HJwh(*args)
HJwh = _pygamma.HJwh

def HJd(*args):
  return _pygamma.HJd(*args)
HJd = _pygamma.HJd

def Ho(*args):
  return _pygamma.Ho(*args)
Ho = _pygamma.Ho

def How(*args):
  return _pygamma.How(*args)
How = _pygamma.How

def Ho_lab(*args):
  return _pygamma.Ho_lab(*args)
Ho_lab = _pygamma.Ho_lab

def Hg(*args):
  return _pygamma.Hg(*args)
Hg = _pygamma.Hg

def Hg_lab(*args):
  return _pygamma.Hg_lab(*args)
Hg_lab = _pygamma.Hg_lab

def HAw(*args):
  return _pygamma.HAw(*args)
HAw = _pygamma.HAw

def HQsec(*args):
  return _pygamma.HQsec(*args)
HQsec = _pygamma.HQsec

def SOpCmpfatal(*args):
  return _pygamma.SOpCmpfatal(*args)
SOpCmpfatal = _pygamma.SOpCmpfatal

def Iu(*args):
  return _pygamma.Iu(*args)
Iu = _pygamma.Iu

def Ie(*args):
  return _pygamma.Ie(*args)
Ie = _pygamma.Ie

def Iz(*args):
  return _pygamma.Iz(*args)
Iz = _pygamma.Iz

def Ix(*args):
  return _pygamma.Ix(*args)
Ix = _pygamma.Ix

def Iy(*args):
  return _pygamma.Iy(*args)
Iy = _pygamma.Iy

def Ip(*args):
  return _pygamma.Ip(*args)
Ip = _pygamma.Ip

def Im(*args):
  return _pygamma.Im(*args)
Im = _pygamma.Im

def Ia(*args):
  return _pygamma.Ia(*args)
Ia = _pygamma.Ia

def Ib(*args):
  return _pygamma.Ib(*args)
Ib = _pygamma.Ib

def Ipol(*args):
  return _pygamma.Ipol(*args)
Ipol = _pygamma.Ipol

def Fe_sp(*args):
  return _pygamma.Fe_sp(*args)
Fe_sp = _pygamma.Fe_sp

def Fx_sp(*args):
  return _pygamma.Fx_sp(*args)
Fx_sp = _pygamma.Fx_sp

def Fy_sp(*args):
  return _pygamma.Fy_sp(*args)
Fy_sp = _pygamma.Fy_sp

def Fz_sp(*args):
  return _pygamma.Fz_sp(*args)
Fz_sp = _pygamma.Fz_sp

def Fp_sp(*args):
  return _pygamma.Fp_sp(*args)
Fp_sp = _pygamma.Fp_sp

def Fm_sp(*args):
  return _pygamma.Fm_sp(*args)
Fm_sp = _pygamma.Fm_sp

def Fa_sp(*args):
  return _pygamma.Fa_sp(*args)
Fa_sp = _pygamma.Fa_sp

def Fb_sp(*args):
  return _pygamma.Fb_sp(*args)
Fb_sp = _pygamma.Fb_sp

def Fpol_sp(*args):
  return _pygamma.Fpol_sp(*args)
Fpol_sp = _pygamma.Fpol_sp

def Faxis_sp(*args):
  return _pygamma.Faxis_sp(*args)
Faxis_sp = _pygamma.Faxis_sp

def Fpol_gen(*args):
  return _pygamma.Fpol_gen(*args)
Fpol_gen = _pygamma.Fpol_gen

def Ipdt(*args):
  return _pygamma.Ipdt(*args)
Ipdt = _pygamma.Ipdt

def Fpdt(*args):
  return _pygamma.Fpdt(*args)
Fpdt = _pygamma.Fpdt

def zero_mqc(*args):
  return _pygamma.zero_mqc(*args)
zero_mqc = _pygamma.zero_mqc

def st_Op(*args):
  return _pygamma.st_Op(*args)
st_Op = _pygamma.st_Op

def sqt_v(*args):
  return _pygamma.sqt_v(*args)
sqt_v = _pygamma.sqt_v

def sort_super_op_basis(*args):
  return _pygamma.sort_super_op_basis(*args)
sort_super_op_basis = _pygamma.sort_super_op_basis

def sort_LOp_basis(*args):
  return _pygamma.sort_LOp_basis(*args)
sort_LOp_basis = _pygamma.sort_LOp_basis

def sort_Op_basis(*args):
  return _pygamma.sort_Op_basis(*args)
sort_Op_basis = _pygamma.sort_Op_basis

def mqt_v(*args):
  return _pygamma.mqt_v(*args)
mqt_v = _pygamma.mqt_v

def wavefunction(*args):
  return _pygamma.wavefunction(*args)
wavefunction = _pygamma.wavefunction

def wavefunctions(*args):
  return _pygamma.wavefunctions(*args)
wavefunctions = _pygamma.wavefunctions

def vecmax(*args):
  return _pygamma.vecmax(*args)
vecmax = _pygamma.vecmax

def integral(*args):
  return _pygamma.integral(*args)
integral = _pygamma.integral

def lwhh(*args):
  return _pygamma.lwhh(*args)
lwhh = _pygamma.lwhh

def query_file1D(*args):
  return _pygamma.query_file1D(*args)
query_file1D = _pygamma.query_file1D

def Ixpuls_sp(*args):
  return _pygamma.Ixpuls_sp(*args)
Ixpuls_sp = _pygamma.Ixpuls_sp

def Iypuls_sp(*args):
  return _pygamma.Iypuls_sp(*args)
Iypuls_sp = _pygamma.Iypuls_sp

def Ixypuls_sp(*args):
  return _pygamma.Ixypuls_sp(*args)
Ixypuls_sp = _pygamma.Ixypuls_sp

def Ixpuls_sp_U(*args):
  return _pygamma.Ixpuls_sp_U(*args)
Ixpuls_sp_U = _pygamma.Ixpuls_sp_U

def Iypuls_sp_U(*args):
  return _pygamma.Iypuls_sp_U(*args)
Iypuls_sp_U = _pygamma.Iypuls_sp_U

def Ixypuls_U_sp(*args):
  return _pygamma.Ixypuls_U_sp(*args)
Ixypuls_U_sp = _pygamma.Ixypuls_U_sp
class basis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, basis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, basis, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_basis(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_basis
    __del__ = lambda self : None;
    def size(self): return _pygamma.basis_size(self)
    def dim(self): return _pygamma.basis_dim(self)
    def name(self, *args): return _pygamma.basis_name(self, *args)
    def dim_LS(self): return _pygamma.basis_dim_LS(self)
    def sub_N(self): return _pygamma.basis_sub_N(self)
    def sub_dim(self, *args): return _pygamma.basis_sub_dim(self, *args)
    def sub_anchor(self, *args): return _pygamma.basis_sub_anchor(self, *args)
    def sub_anchor_LS(self, *args): return _pygamma.basis_sub_anchor_LS(self, *args)
    def which_sub_LS(self, *args): return _pygamma.basis_which_sub_LS(self, *args)
    def __eq__(self, *args): return _pygamma.basis___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.basis___ne__(self, *args)
    def isDefaultBasis(self): return _pygamma.basis_isDefaultBasis(self)
    def refs(self): return _pygamma.basis_refs(self)
    def check(self, *args): return _pygamma.basis_check(self, *args)
    def write(self, *args): return _pygamma.basis_write(self, *args)
    def read(self, *args): return _pygamma.basis_read(self, *args)
    def TestBasis(self, pf = 0): return _pygamma.basis_TestBasis(self, pf)
basis_swigregister = _pygamma.basis_swigregister
basis_swigregister(basis)

def Hz(*args):
  return _pygamma.Hz(*args)
Hz = _pygamma.Hz

def H1(*args):
  return _pygamma.H1(*args)
H1 = _pygamma.H1

def Heff(*args):
  return _pygamma.Heff(*args)
Heff = _pygamma.Heff

def SOpCmperror(*args):
  return _pygamma.SOpCmperror(*args)
SOpCmperror = _pygamma.SOpCmperror

def Fpol(*args):
  return _pygamma.Fpol(*args)
Fpol = _pygamma.Fpol

def Fe(*args):
  return _pygamma.Fe(*args)
Fe = _pygamma.Fe

def Fx(*args):
  return _pygamma.Fx(*args)
Fx = _pygamma.Fx

def Fy(*args):
  return _pygamma.Fy(*args)
Fy = _pygamma.Fy

def Fz(*args):
  return _pygamma.Fz(*args)
Fz = _pygamma.Fz

def Fp(*args):
  return _pygamma.Fp(*args)
Fp = _pygamma.Fp

def Fm(*args):
  return _pygamma.Fm(*args)
Fm = _pygamma.Fm

def Fa(*args):
  return _pygamma.Fa(*args)
Fa = _pygamma.Fa

def Fb(*args):
  return _pygamma.Fb(*args)
Fb = _pygamma.Fb

def Faxis(*args):
  return _pygamma.Faxis(*args)
Faxis = _pygamma.Faxis

def Fpol_gen_new(*args):
  return _pygamma.Fpol_gen_new(*args)
Fpol_gen_new = _pygamma.Fpol_gen_new

def sigma_eq(*args):
  return _pygamma.sigma_eq(*args)
sigma_eq = _pygamma.sigma_eq

def query_isotope(*args):
  return _pygamma.query_isotope(*args)
query_isotope = _pygamma.query_isotope

def query_offset(*args):
  return _pygamma.query_offset(*args)
query_offset = _pygamma.query_offset

def Ixpuls(*args):
  return _pygamma.Ixpuls(*args)
Ixpuls = _pygamma.Ixpuls

def Iypuls(*args):
  return _pygamma.Iypuls(*args)
Iypuls = _pygamma.Iypuls

def Ixypuls(*args):
  return _pygamma.Ixypuls(*args)
Ixypuls = _pygamma.Ixypuls

def Ixpuls_U(*args):
  return _pygamma.Ixpuls_U(*args)
Ixpuls_U = _pygamma.Ixpuls_U

def Iypuls_U(*args):
  return _pygamma.Iypuls_U(*args)
Iypuls_U = _pygamma.Iypuls_U

def Ixypuls_U(*args):
  return _pygamma.Ixypuls_U(*args)
Ixypuls_U = _pygamma.Ixypuls_U


def prop(*args):
  return _pygamma.prop(*args)
prop = _pygamma.prop

def prop_ip(*args):
  return _pygamma.prop_ip(*args)
prop_ip = _pygamma.prop_ip
class HSprop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HSprop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HSprop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_HSprop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_HSprop
    __del__ = lambda self : None;
    def time(self): return _pygamma.HSprop_time(self)
    def length(self): return _pygamma.HSprop_length(self)
    def dim(self): return _pygamma.HSprop_dim(self)
    def Bs(self): return _pygamma.HSprop_Bs(self)
    def HS(self): return _pygamma.HSprop_HS(self)
    def LS(self): return _pygamma.HSprop_LS(self)
    def Op(self): return _pygamma.HSprop_Op(self)
    def H(self): return _pygamma.HSprop_H(self)
    def SetEBR(self): return _pygamma.HSprop_SetEBR(self)
    def SetBasis(self, *args): return _pygamma.HSprop_SetBasis(self, *args)
    def evolve(self, *args): return _pygamma.HSprop_evolve(self, *args)
    def __mul__(self, *args): return _pygamma.HSprop___mul__(self, *args)
    def __imul__(self, *args): return _pygamma.HSprop___imul__(self, *args)
    def __iand__(self, *args): return _pygamma.HSprop___iand__(self, *args)
    def sim_trans(self, *args): return _pygamma.HSprop_sim_trans(self, *args)
    def sim_trans_ip(self, *args): return _pygamma.HSprop_sim_trans_ip(self, *args)
    def Pow(self, *args): return _pygamma.HSprop_Pow(self, *args)
    def __eq__(self, *args): return _pygamma.HSprop___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.HSprop___ne__(self, *args)
    def __lt__(self, *args): return _pygamma.HSprop___lt__(self, *args)
    def __gt__(self, *args): return _pygamma.HSprop___gt__(self, *args)
HSprop_swigregister = _pygamma.HSprop_swigregister
HSprop_swigregister(HSprop)

def evolve(*args):
  return _pygamma.evolve(*args)
evolve = _pygamma.evolve

def evolve_ip(*args):
  return _pygamma.evolve_ip(*args)
evolve_ip = _pygamma.evolve_ip

class spin_op(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_op, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spin_op, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_spin_op(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_spin_op
    __del__ = lambda self : None;
    def __neg__(self): return _pygamma.spin_op___neg__(self)
    def __add__(self, *args): return _pygamma.spin_op___add__(self, *args)
    def __iadd__(self, *args): return _pygamma.spin_op___iadd__(self, *args)
    def __isub__(self, *args): return _pygamma.spin_op___isub__(self, *args)
    def __imul__(self, *args): return _pygamma.spin_op___imul__(self, *args)
    def __idiv__(self, *args): return _pygamma.spin_op___idiv__(self, *args)
    def exp(self): return _pygamma.spin_op_exp(self)
    def adjoint(self): return _pygamma.spin_op_adjoint(self)
    def trace(self): return _pygamma.spin_op_trace(self)
    def spins(self): return _pygamma.spin_op_spins(self)
    def refs(self, *args): return _pygamma.spin_op_refs(self, *args)
    def HS(self): return _pygamma.spin_op_HS(self)
    def status(self, full = 1): return _pygamma.spin_op_status(self, full)
    def FaxisStruct(self, *args): return _pygamma.spin_op_FaxisStruct(self, *args)
spin_op_swigregister = _pygamma.spin_op_swigregister
spin_op_swigregister(spin_op)


def PulSfatality(*args):
  return _pygamma.PulSfatality(*args)
PulSfatality = _pygamma.PulSfatality

def Spul_axis(*args):
  return _pygamma.Spul_axis(*args)
Spul_axis = _pygamma.Spul_axis

def Spul_U_axis(*args):
  return _pygamma.Spul_U_axis(*args)
Spul_U_axis = _pygamma.Spul_U_axis

def left(*args):
  return _pygamma.left(*args)
left = _pygamma.left

def right(*args):
  return _pygamma.right(*args)
right = _pygamma.right

def Hsuper(*args):
  return _pygamma.Hsuper(*args)
Hsuper = _pygamma.Hsuper

def U_transform(*args):
  return _pygamma.U_transform(*args)
U_transform = _pygamma.U_transform

def commutator(*args):
  return _pygamma.commutator(*args)
commutator = _pygamma.commutator
class super_op(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, super_op, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, super_op, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_super_op(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_super_op
    __del__ = lambda self : None;
    def __add__(self, *args): return _pygamma.super_op___add__(self, *args)
    def __iadd__(self, *args): return _pygamma.super_op___iadd__(self, *args)
    def __sub__(self, *args): return _pygamma.super_op___sub__(self, *args)
    def __isub__(self, *args): return _pygamma.super_op___isub__(self, *args)
    def __mul__(self, *args): return _pygamma.super_op___mul__(self, *args)
    def __iand__(self, *args): return _pygamma.super_op___iand__(self, *args)
    def __imul__(self, *args): return _pygamma.super_op___imul__(self, *args)
    def __idiv__(self, *args): return _pygamma.super_op___idiv__(self, *args)
    def exp(self, *args): return _pygamma.super_op_exp(self, *args)
    def set_EBR(self): return _pygamma.super_op_set_EBR(self)
    def set_HBR(self): return _pygamma.super_op_set_HBR(self)
    def set_DBR(self): return _pygamma.super_op_set_DBR(self)
    def LOp_Hbase(self, *args): return _pygamma.super_op_LOp_Hbase(self, *args)
    def LOp_base(self, *args): return _pygamma.super_op_LOp_base(self, *args)
    def SetHSBaseOf(self, *args): return _pygamma.super_op_SetHSBaseOf(self, *args)
    def HS(self): return _pygamma.super_op_HS(self)
    def size(self): return _pygamma.super_op_size(self)
    def dim(self): return _pygamma.super_op_dim(self)
    def LS(self): return _pygamma.super_op_LS(self)
    def eigenvalues(self, nc = 4, ri = 0): return _pygamma.super_op_eigenvalues(self, nc, ri)
    def Bs(self): return _pygamma.super_op_Bs(self)
    def get_basis(self): return _pygamma.super_op_get_basis(self)
    def put_basis(self, *args): return _pygamma.super_op_put_basis(self, *args)
    def LBs(self): return _pygamma.super_op_LBs(self)
    def get_Lbasis(self): return _pygamma.super_op_get_Lbasis(self)
    def put_Lbasis(self, *args): return _pygamma.super_op_put_Lbasis(self, *args)
    def __call__(self, *args): return _pygamma.super_op___call__(self, *args)
    def put(self, *args): return _pygamma.super_op_put(self, *args)
    def get(self, *args): return _pygamma.super_op_get(self, *args)
    def checkLOp(self, *args): return _pygamma.super_op_checkLOp(self, *args)
    def status(self): return _pygamma.super_op_status(self)
    def __eq__(self, *args): return _pygamma.super_op___eq__(self, *args)
    def below(self, *args): return _pygamma.super_op_below(self, *args)
    def write(self, *args): return _pygamma.super_op_write(self, *args)
    def read(self, *args): return _pygamma.super_op_read(self, *args)
super_op_swigregister = _pygamma.super_op_swigregister
super_op_swigregister(super_op)

def PulSerror(*args):
  return _pygamma.PulSerror(*args)
PulSerror = _pygamma.PulSerror

def Sxpuls(*args):
  return _pygamma.Sxpuls(*args)
Sxpuls = _pygamma.Sxpuls

def SxpulsB(*args):
  return _pygamma.SxpulsB(*args)
SxpulsB = _pygamma.SxpulsB

def Sypuls(*args):
  return _pygamma.Sypuls(*args)
Sypuls = _pygamma.Sypuls

def SypulsB(*args):
  return _pygamma.SypulsB(*args)
SypulsB = _pygamma.SypulsB

def Sxpuls_U(*args):
  return _pygamma.Sxpuls_U(*args)
Sxpuls_U = _pygamma.Sxpuls_U

def SxpulsB_U(*args):
  return _pygamma.SxpulsB_U(*args)
SxpulsB_U = _pygamma.SxpulsB_U

def Sypuls_U(*args):
  return _pygamma.Sypuls_U(*args)
Sypuls_U = _pygamma.Sypuls_U

def SypulsB_U(*args):
  return _pygamma.SypulsB_U(*args)
SypulsB_U = _pygamma.SypulsB_U

def Sxypuls(*args):
  return _pygamma.Sxypuls(*args)
Sxypuls = _pygamma.Sxypuls

def SxypulsB(*args):
  return _pygamma.SxypulsB(*args)
SxypulsB = _pygamma.SxypulsB

def Sxypuls_U(*args):
  return _pygamma.Sxypuls_U(*args)
Sxypuls_U = _pygamma.Sxypuls_U

def SxypulsB_U(*args):
  return _pygamma.SxypulsB_U(*args)
SxypulsB_U = _pygamma.SxypulsB_U

def Spul_plane(*args):
  return _pygamma.Spul_plane(*args)
Spul_plane = _pygamma.Spul_plane

def Spul_U_plane(*args):
  return _pygamma.Spul_U_plane(*args)
Spul_U_plane = _pygamma.Spul_U_plane

def d_commutator(*args):
  return _pygamma.d_commutator(*args)
d_commutator = _pygamma.d_commutator

class sys_dynamic(spin_system):
    __swig_setmethods__ = {}
    for _s in [spin_system]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sys_dynamic, name, value)
    __swig_getmethods__ = {}
    for _s in [spin_system]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sys_dynamic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_sys_dynamic(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_sys_dynamic
    __del__ = lambda self : None;
    def shifts(self, shift = 0): return _pygamma.sys_dynamic_shifts(self, shift)
    def shift(self, *args): return _pygamma.sys_dynamic_shift(self, *args)
    def offsetShifts(self, *args): return _pygamma.sys_dynamic_offsetShifts(self, *args)
    def PPM(self, *args): return _pygamma.sys_dynamic_PPM(self, *args)
    def delz(self, *args): return _pygamma.sys_dynamic_delz(self, *args)
    def Ceta(self, *args): return _pygamma.sys_dynamic_Ceta(self, *args)
    def TC(self, *args): return _pygamma.sys_dynamic_TC(self, *args)
    def xiC_vector(self): return _pygamma.sys_dynamic_xiC_vector(self)
    def xiC(self, *args): return _pygamma.sys_dynamic_xiC(self, *args)
    def CSA(self): return _pygamma.sys_dynamic_CSA(self)
    def coords(self, *args): return _pygamma.sys_dynamic_coords(self, *args)
    def Coord(self): return _pygamma.sys_dynamic_Coord(self)
    def DCC(self, *args): return _pygamma.sys_dynamic_DCC(self, *args)
    def Ddelz(self, *args): return _pygamma.sys_dynamic_Ddelz(self, *args)
    def Deta(self, *args): return _pygamma.sys_dynamic_Deta(self, *args)
    def AD(self, *args): return _pygamma.sys_dynamic_AD(self, *args)
    def dipoles(self): return _pygamma.sys_dynamic_dipoles(self)
    def dipole(self, *args): return _pygamma.sys_dynamic_dipole(self, *args)
    def xiD_matrix(self): return _pygamma.sys_dynamic_xiD_matrix(self)
    def Dip(self): return _pygamma.sys_dynamic_Dip(self)
    def QCC(self, *args): return _pygamma.sys_dynamic_QCC(self, *args)
    def Qdelz(self, *args): return _pygamma.sys_dynamic_Qdelz(self, *args)
    def Qeta(self, *args): return _pygamma.sys_dynamic_Qeta(self, *args)
    def TQ(self, *args): return _pygamma.sys_dynamic_TQ(self, *args)
    def xiQ_vector(self): return _pygamma.sys_dynamic_xiQ_vector(self)
    def xiQ(self, *args): return _pygamma.sys_dynamic_xiQ(self, *args)
    def Quad(self): return _pygamma.sys_dynamic_Quad(self)
    def TR(self, *args): return _pygamma.sys_dynamic_TR(self, *args)
    def tauR(self): return _pygamma.sys_dynamic_tauR(self)
    def xiR_vector(self): return _pygamma.sys_dynamic_xiR_vector(self)
    def xiR(self, *args): return _pygamma.sys_dynamic_xiR(self, *args)
    def setCoords(self, *args): return _pygamma.sys_dynamic_setCoords(self, *args)
    def setDip(self): return _pygamma.sys_dynamic_setDip(self)
    def SetCSA(self, *args): return _pygamma.sys_dynamic_SetCSA(self, *args)
    def setQuad(self, *args): return _pygamma.sys_dynamic_setQuad(self, *args)
    def setRand(self, *args): return _pygamma.sys_dynamic_setRand(self, *args)
    def setTaus(self, *args): return _pygamma.sys_dynamic_setTaus(self, *args)
    def setKs(self, *args): return _pygamma.sys_dynamic_setKs(self, *args)
    def write(self, *args): return _pygamma.sys_dynamic_write(self, *args)
    def read(self, *args): return _pygamma.sys_dynamic_read(self, *args)
    def ask_read(self, *args): return _pygamma.sys_dynamic_ask_read(self, *args)
    def taus(self): return _pygamma.sys_dynamic_taus(self)
    def taux(self, *args): return _pygamma.sys_dynamic_taux(self, *args)
    def tauy(self, *args): return _pygamma.sys_dynamic_tauy(self, *args)
    def tauz(self, *args): return _pygamma.sys_dynamic_tauz(self, *args)
    def Kex_zero(self): return _pygamma.sys_dynamic_Kex_zero(self)
    def Kex(self, *args): return _pygamma.sys_dynamic_Kex(self, *args)
    def MExProcs(self): return _pygamma.sys_dynamic_MExProcs(self)
    def PtStrings(self, w1 = 10, w2 = 12, digs = 2): return _pygamma.sys_dynamic_PtStrings(self, w1, w2, digs)
    def AQStrings(self, w1 = 10, w2 = 12, digs = 2): return _pygamma.sys_dynamic_AQStrings(self, w1, w2, digs)
sys_dynamic_swigregister = _pygamma.sys_dynamic_swigregister
sys_dynamic_swigregister(sys_dynamic)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pygamma.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pygamma.StringVector___nonzero__(self)
    def __bool__(self): return _pygamma.StringVector___bool__(self)
    def __len__(self): return _pygamma.StringVector___len__(self)
    def pop(self): return _pygamma.StringVector_pop(self)
    def __getslice__(self, *args): return _pygamma.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pygamma.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pygamma.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pygamma.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pygamma.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pygamma.StringVector___setitem__(self, *args)
    def append(self, *args): return _pygamma.StringVector_append(self, *args)
    def empty(self): return _pygamma.StringVector_empty(self)
    def size(self): return _pygamma.StringVector_size(self)
    def clear(self): return _pygamma.StringVector_clear(self)
    def swap(self, *args): return _pygamma.StringVector_swap(self, *args)
    def get_allocator(self): return _pygamma.StringVector_get_allocator(self)
    def begin(self): return _pygamma.StringVector_begin(self)
    def end(self): return _pygamma.StringVector_end(self)
    def rbegin(self): return _pygamma.StringVector_rbegin(self)
    def rend(self): return _pygamma.StringVector_rend(self)
    def pop_back(self): return _pygamma.StringVector_pop_back(self)
    def erase(self, *args): return _pygamma.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pygamma.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pygamma.StringVector_push_back(self, *args)
    def front(self): return _pygamma.StringVector_front(self)
    def back(self): return _pygamma.StringVector_back(self)
    def assign(self, *args): return _pygamma.StringVector_assign(self, *args)
    def resize(self, *args): return _pygamma.StringVector_resize(self, *args)
    def insert(self, *args): return _pygamma.StringVector_insert(self, *args)
    def reserve(self, *args): return _pygamma.StringVector_reserve(self, *args)
    def capacity(self): return _pygamma.StringVector_capacity(self)
    __swig_destroy__ = _pygamma.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _pygamma.StringVector_swigregister
StringVector_swigregister(StringVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pygamma.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pygamma.IntVector___nonzero__(self)
    def __bool__(self): return _pygamma.IntVector___bool__(self)
    def __len__(self): return _pygamma.IntVector___len__(self)
    def pop(self): return _pygamma.IntVector_pop(self)
    def __getslice__(self, *args): return _pygamma.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pygamma.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pygamma.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pygamma.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pygamma.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pygamma.IntVector___setitem__(self, *args)
    def append(self, *args): return _pygamma.IntVector_append(self, *args)
    def empty(self): return _pygamma.IntVector_empty(self)
    def size(self): return _pygamma.IntVector_size(self)
    def clear(self): return _pygamma.IntVector_clear(self)
    def swap(self, *args): return _pygamma.IntVector_swap(self, *args)
    def get_allocator(self): return _pygamma.IntVector_get_allocator(self)
    def begin(self): return _pygamma.IntVector_begin(self)
    def end(self): return _pygamma.IntVector_end(self)
    def rbegin(self): return _pygamma.IntVector_rbegin(self)
    def rend(self): return _pygamma.IntVector_rend(self)
    def pop_back(self): return _pygamma.IntVector_pop_back(self)
    def erase(self, *args): return _pygamma.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pygamma.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pygamma.IntVector_push_back(self, *args)
    def front(self): return _pygamma.IntVector_front(self)
    def back(self): return _pygamma.IntVector_back(self)
    def assign(self, *args): return _pygamma.IntVector_assign(self, *args)
    def resize(self, *args): return _pygamma.IntVector_resize(self, *args)
    def insert(self, *args): return _pygamma.IntVector_insert(self, *args)
    def reserve(self, *args): return _pygamma.IntVector_reserve(self, *args)
    def capacity(self): return _pygamma.IntVector_capacity(self)
    __swig_destroy__ = _pygamma.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _pygamma.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pygamma.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pygamma.DoubleVector___nonzero__(self)
    def __bool__(self): return _pygamma.DoubleVector___bool__(self)
    def __len__(self): return _pygamma.DoubleVector___len__(self)
    def pop(self): return _pygamma.DoubleVector_pop(self)
    def __getslice__(self, *args): return _pygamma.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pygamma.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pygamma.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pygamma.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pygamma.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pygamma.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _pygamma.DoubleVector_append(self, *args)
    def empty(self): return _pygamma.DoubleVector_empty(self)
    def size(self): return _pygamma.DoubleVector_size(self)
    def clear(self): return _pygamma.DoubleVector_clear(self)
    def swap(self, *args): return _pygamma.DoubleVector_swap(self, *args)
    def get_allocator(self): return _pygamma.DoubleVector_get_allocator(self)
    def begin(self): return _pygamma.DoubleVector_begin(self)
    def end(self): return _pygamma.DoubleVector_end(self)
    def rbegin(self): return _pygamma.DoubleVector_rbegin(self)
    def rend(self): return _pygamma.DoubleVector_rend(self)
    def pop_back(self): return _pygamma.DoubleVector_pop_back(self)
    def erase(self, *args): return _pygamma.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pygamma.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pygamma.DoubleVector_push_back(self, *args)
    def front(self): return _pygamma.DoubleVector_front(self)
    def back(self): return _pygamma.DoubleVector_back(self)
    def assign(self, *args): return _pygamma.DoubleVector_assign(self, *args)
    def resize(self, *args): return _pygamma.DoubleVector_resize(self, *args)
    def insert(self, *args): return _pygamma.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _pygamma.DoubleVector_reserve(self, *args)
    def capacity(self): return _pygamma.DoubleVector_capacity(self)
    __swig_destroy__ = _pygamma.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _pygamma.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class TTable1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TTable1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TTable1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_TTable1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_TTable1D
    __del__ = lambda self : None;
    def center(self, wa = True): return _pygamma.TTable1D_center(self, wa)
    def offset(self, *args): return _pygamma.TTable1D_offset(self, *args)
    def FRscale(self, *args): return _pygamma.TTable1D_FRscale(self, *args)
    def BC(self, *args): return _pygamma.TTable1D_BC(self, *args)
    def Iscale(self, *args): return _pygamma.TTable1D_Iscale(self, *args)
    def Iremove(self, *args): return _pygamma.TTable1D_Iremove(self, *args)
    def broaden(self, *args): return _pygamma.TTable1D_broaden(self, *args)
    def resolution(self, *args): return _pygamma.TTable1D_resolution(self, *args)
    def T(self, *args): return _pygamma.TTable1D_T(self, *args)
    def Ts(self, *args): return _pygamma.TTable1D_Ts(self, *args)
    def TCutoffs(self, *args): return _pygamma.TTable1D_TCutoffs(self, *args)
    def F(self, *args): return _pygamma.TTable1D_F(self, *args)
    def Fs(self, *args): return _pygamma.TTable1D_Fs(self, *args)
    def FD(self, *args): return _pygamma.TTable1D_FD(self, *args)
    def pcorrect(self, *args): return _pygamma.TTable1D_pcorrect(self, *args)
    def R2(self, *args): return _pygamma.TTable1D_R2(self, *args)
    def Fr(self, *args): return _pygamma.TTable1D_Fr(self, *args)
    def I(self, *args): return _pygamma.TTable1D_I(self, *args)
    def Tr(self, *args): return _pygamma.TTable1D_Tr(self, *args)
    def LineWidths(self): return _pygamma.TTable1D_LineWidths(self)
    def Intensities(self): return _pygamma.TTable1D_Intensities(self)
    def Phases(self): return _pygamma.TTable1D_Phases(self)
    def size(self): return _pygamma.TTable1D_size(self)
    def FRmax(self): return _pygamma.TTable1D_FRmax(self)
    def FRmin(self): return _pygamma.TTable1D_FRmin(self)
    def Tdmin(self): return _pygamma.TTable1D_Tdmin(self)
    def LWmax(self): return _pygamma.TTable1D_LWmax(self)
    def LWmin(self): return _pygamma.TTable1D_LWmin(self)
    def Imax(self): return _pygamma.TTable1D_Imax(self)
    def Noisemax(self): return _pygamma.TTable1D_Noisemax(self)
    def Sort(self, *args): return _pygamma.TTable1D_Sort(self, *args)
    def readPSet(self, *args): return _pygamma.TTable1D_readPSet(self, *args)
    def setType(self, *args): return _pygamma.TTable1D_setType(self, *args)
    def setSort(self, *args): return _pygamma.TTable1D_setSort(self, *args)
    def setConv(self, *args): return _pygamma.TTable1D_setConv(self, *args)
    def setIcut(self, *args): return _pygamma.TTable1D_setIcut(self, *args)
    def setInorm(self, inorm = 0.0): return _pygamma.TTable1D_setInorm(self, inorm)
    def setSN(self, *args): return _pygamma.TTable1D_setSN(self, *args)
    def setHprint(self, *args): return _pygamma.TTable1D_setHprint(self, *args)
    def setRprint(self, *args): return _pygamma.TTable1D_setRprint(self, *args)
    def setLWprint(self, *args): return _pygamma.TTable1D_setLWprint(self, *args)
    def setT2print(self, *args): return _pygamma.TTable1D_setT2print(self, *args)
    def setPHprint(self, *args): return _pygamma.TTable1D_setPHprint(self, *args)
    def setFreqRev(self): return _pygamma.TTable1D_setFreqRev(self)
    def getType(self): return _pygamma.TTable1D_getType(self)
    def getSort(self): return _pygamma.TTable1D_getSort(self)
    def getConv(self): return _pygamma.TTable1D_getConv(self)
    def getIcut(self): return _pygamma.TTable1D_getIcut(self)
    def getInorm(self): return _pygamma.TTable1D_getInorm(self)
    def getSN(self): return _pygamma.TTable1D_getSN(self)
    def getHprint(self): return _pygamma.TTable1D_getHprint(self)
    def getRprint(self): return _pygamma.TTable1D_getRprint(self)
    def getLWprint(self): return _pygamma.TTable1D_getLWprint(self)
    def getT2print(self): return _pygamma.TTable1D_getT2print(self)
    def getPHprint(self): return _pygamma.TTable1D_getPHprint(self)
    def getFreqRev(self): return _pygamma.TTable1D_getFreqRev(self)
    def printStrings(self): return _pygamma.TTable1D_printStrings(self)
    def write(self, *args): return _pygamma.TTable1D_write(self, *args)
    def dbwrite_old(self, *args): return _pygamma.TTable1D_dbwrite_old(self, *args)
    def dbwrite(self, *args): return _pygamma.TTable1D_dbwrite(self, *args)
    def calc_spectra(self, *args): return _pygamma.TTable1D_calc_spectra(self, *args)
    def read(self, *args): return _pygamma.TTable1D_read(self, *args)
TTable1D_swigregister = _pygamma.TTable1D_swigregister
TTable1D_swigregister(TTable1D)

class acquire1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, acquire1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, acquire1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_acquire1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_acquire1D
    __del__ = lambda self : None;
    def L(self): return _pygamma.acquire1D_L(self)
    def D(self): return _pygamma.acquire1D_D(self)
    def TTable(self): return _pygamma.acquire1D_TTable(self)
    def Detector(self, *args): return _pygamma.acquire1D_Detector(self, *args)
    def T(self, *args): return _pygamma.acquire1D_T(self, *args)
    def F(self, *args): return _pygamma.acquire1D_F(self, *args)
    def FD(self, *args): return _pygamma.acquire1D_FD(self, *args)
    def table(self, *args): return _pygamma.acquire1D_table(self, *args)
    def offset(self, *args): return _pygamma.acquire1D_offset(self, *args)
    def FRscale(self, *args): return _pygamma.acquire1D_FRscale(self, *args)
    def Iscale(self, *args): return _pygamma.acquire1D_Iscale(self, *args)
    def broaden(self, *args): return _pygamma.acquire1D_broaden(self, *args)
    def resolution(self, *args): return _pygamma.acquire1D_resolution(self, *args)
    def pcorrect(self, *args): return _pygamma.acquire1D_pcorrect(self, *args)
    def Wmax(self): return _pygamma.acquire1D_Wmax(self)
    def LWmax(self): return _pygamma.acquire1D_LWmax(self)
    def setSort(self, *args): return _pygamma.acquire1D_setSort(self, *args)
    def setConv(self, *args): return _pygamma.acquire1D_setConv(self, *args)
    def ls(self): return _pygamma.acquire1D_ls(self)
    def size(self): return _pygamma.acquire1D_size(self)
    def full_size(self): return _pygamma.acquire1D_full_size(self)
    def transitions(self): return _pygamma.acquire1D_transitions(self)
    def write(self, *args): return _pygamma.acquire1D_write(self, *args)
    def read(self, *args): return _pygamma.acquire1D_read(self, *args)
acquire1D_swigregister = _pygamma.acquire1D_swigregister
acquire1D_swigregister(acquire1D)

class PulWaveform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulWaveform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PulWaveform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_PulWaveform(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_PulWaveform
    __del__ = lambda self : None;
    def name(self): return _pygamma.PulWaveform_name(self)
    def values(self): return _pygamma.PulWaveform_values(self)
    def lengths(self): return _pygamma.PulWaveform_lengths(self)
    def strength(self, *args): return _pygamma.PulWaveform_strength(self, *args)
    def phase(self, *args): return _pygamma.PulWaveform_phase(self, *args)
    def length(self, *args): return _pygamma.PulWaveform_length(self, *args)
    def value(self, *args): return _pygamma.PulWaveform_value(self, *args)
    def maxlength(self): return _pygamma.PulWaveform_maxlength(self)
    def minlength(self, cutoff = 1.e-13): return _pygamma.PulWaveform_minlength(self, cutoff)
    def maxgamB1(self): return _pygamma.PulWaveform_maxgamB1(self)
    def mingamB1(self): return _pygamma.PulWaveform_mingamB1(self)
    def gamB1const(self): return _pygamma.PulWaveform_gamB1const(self)
    def phaseconst(self): return _pygamma.PulWaveform_phaseconst(self)
    def timeconst(self): return _pygamma.PulWaveform_timeconst(self)
    def steps(self, *args): return _pygamma.PulWaveform_steps(self, *args)
    def fullsteps(self, *args): return _pygamma.PulWaveform_fullsteps(self, *args)
    def WFs(self, *args): return _pygamma.PulWaveform_WFs(self, *args)
    def fullWFs(self, *args): return _pygamma.PulWaveform_fullWFs(self, *args)
    def sumlength(self, *args): return _pygamma.PulWaveform_sumlength(self, *args)
    def scalegB1(self, *args): return _pygamma.PulWaveform_scalegB1(self, *args)
    def getIdeal(self, *args): return _pygamma.PulWaveform_getIdeal(self, *args)
    def IvsT(self, split = 0, ends = 0, N = 1): return _pygamma.PulWaveform_IvsT(self, split, ends, N)
    def PvsT(self, spl = 0, ends = 0, N = 1, p = 0): return _pygamma.PulWaveform_PvsT(self, spl, ends, N, p)
    def GP(self, type = 0, split = 0, ends = 0, N = 1): return _pygamma.PulWaveform_GP(self, type, split, ends, N)
    def FM(self, type = 0, split = 0, ends = 0, N = 1): return _pygamma.PulWaveform_FM(self, type, split, ends, N)
PulWaveform_swigregister = _pygamma.PulWaveform_swigregister
PulWaveform_swigregister(PulWaveform)

def Kex(*args):
  return _pygamma.Kex(*args)
Kex = _pygamma.Kex

class PulComposite(PulWaveform):
    __swig_setmethods__ = {}
    for _s in [PulWaveform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulComposite, name, value)
    __swig_getmethods__ = {}
    for _s in [PulWaveform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PulComposite, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_PulComposite(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_PulComposite
    __del__ = lambda self : None;
    def GetH(self, *args): return _pygamma.PulComposite_GetH(self, *args)
    def L0(self, *args): return _pygamma.PulComposite_L0(self, *args)
    def GetL0(self, *args): return _pygamma.PulComposite_GetL0(self, *args)
    def Leff(self, *args): return _pygamma.PulComposite_Leff(self, *args)
    def GetLeff(self, *args): return _pygamma.PulComposite_GetLeff(self, *args)
    def GetU(self, *args): return _pygamma.PulComposite_GetU(self, *args)
    def GetUsum(self, *args): return _pygamma.PulComposite_GetUsum(self, *args)
    def GetUmult(self, *args): return _pygamma.PulComposite_GetUmult(self, *args)
    def channel(self): return _pygamma.PulComposite_channel(self)
    def FZ(self): return _pygamma.PulComposite_FZ(self)
    def ROp(self): return _pygamma.PulComposite_ROp(self)
    def Precision(self): return _pygamma.PulComposite_Precision(self)
    def scalegB1(self, *args): return _pygamma.PulComposite_scalegB1(self, *args)
    def setRelax(self, *args): return _pygamma.PulComposite_setRelax(self, *args)
    def FIDheader(self, *args): return _pygamma.PulComposite_FIDheader(self, *args)
    def FIDpoint(self, *args): return _pygamma.PulComposite_FIDpoint(self, *args)
    def FIDvalue(self, *args): return _pygamma.PulComposite_FIDvalue(self, *args)
    def FIDtell(self, *args): return _pygamma.PulComposite_FIDtell(self, *args)
    def FIDsync(self, *args): return _pygamma.PulComposite_FIDsync(self, *args)
    def FIDtest(self, *args): return _pygamma.PulComposite_FIDtest(self, *args)
    def FIDsynchWF(self, *args): return _pygamma.PulComposite_FIDsynchWF(self, *args)
    def FIDsynchST(self, *args): return _pygamma.PulComposite_FIDsynchST(self, *args)
    def FIDsynchFR(self, *args): return _pygamma.PulComposite_FIDsynchFR(self, *args)
    def FID(self, *args): return _pygamma.PulComposite_FID(self, *args)
    def FIDRsynchWF(self, *args): return _pygamma.PulComposite_FIDRsynchWF(self, *args)
    def FIDRsynchST(self, *args): return _pygamma.PulComposite_FIDRsynchST(self, *args)
    def FIDRsynchFR(self, *args): return _pygamma.PulComposite_FIDRsynchFR(self, *args)
    def FIDR(self, *args): return _pygamma.PulComposite_FIDR(self, *args)
PulComposite_swigregister = _pygamma.PulComposite_swigregister
PulComposite_swigregister(PulComposite)



