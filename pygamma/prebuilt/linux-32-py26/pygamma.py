# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _pygamma
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pygamma.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _pygamma.PySwigIterator_value(*args)
    def incr(*args): return _pygamma.PySwigIterator_incr(*args)
    def decr(*args): return _pygamma.PySwigIterator_decr(*args)
    def distance(*args): return _pygamma.PySwigIterator_distance(*args)
    def equal(*args): return _pygamma.PySwigIterator_equal(*args)
    def copy(*args): return _pygamma.PySwigIterator_copy(*args)
    def next(*args): return _pygamma.PySwigIterator_next(*args)
    def previous(*args): return _pygamma.PySwigIterator_previous(*args)
    def advance(*args): return _pygamma.PySwigIterator_advance(*args)
    def __eq__(*args): return _pygamma.PySwigIterator___eq__(*args)
    def __ne__(*args): return _pygamma.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _pygamma.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _pygamma.PySwigIterator___isub__(*args)
    def __add__(*args): return _pygamma.PySwigIterator___add__(*args)
    def __sub__(*args): return _pygamma.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _pygamma.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class ParameterSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_ParameterSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_ParameterSet
    __del__ = lambda self : None;
ParameterSet_swigregister = _pygamma.ParameterSet_swigregister
ParameterSet_swigregister(ParameterSet)
cvar = _pygamma.cvar
GamSParInit = cvar.GamSParInit
GamIntVecInit = cvar.GamIntVecInit

class SinglePar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SinglePar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SinglePar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_SinglePar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_SinglePar
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.SinglePar___assign__(*args)
    def SPerror(*args): return _pygamma.SinglePar_SPerror(*args)
    def SPfatality(*args): return _pygamma.SinglePar_SPfatality(*args)
    def setCoord(*args): return _pygamma.SinglePar_setCoord(*args)
    def data(*args): return _pygamma.SinglePar_data(*args)
    def type(*args): return _pygamma.SinglePar_type(*args)
    def name(*args): return _pygamma.SinglePar_name(*args)
    def state(*args): return _pygamma.SinglePar_state(*args)
    def GetNS(*args): return _pygamma.SinglePar_GetNS(*args)
    def parse(*args): return _pygamma.SinglePar_parse(*args)
    def printStrings(*args): return _pygamma.SinglePar_printStrings(*args)
    def __eq__(*args): return _pygamma.SinglePar___eq__(*args)
    def __ne__(*args): return _pygamma.SinglePar___ne__(*args)
    def __lt__(*args): return _pygamma.SinglePar___lt__(*args)
    def __gt__(*args): return _pygamma.SinglePar___gt__(*args)
SinglePar_swigregister = _pygamma.SinglePar_swigregister
SinglePar_swigregister(SinglePar)

class Isotope(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Isotope, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Isotope, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_Isotope(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_Isotope
    __del__ = lambda self : None;
    def qn(*args): return _pygamma.Isotope_qn(*args)
    def HS(*args): return _pygamma.Isotope_HS(*args)
    def momentum(*args): return _pygamma.Isotope_momentum(*args)
    def symbol(*args): return _pygamma.Isotope_symbol(*args)
    def name(*args): return _pygamma.Isotope_name(*args)
    def element(*args): return _pygamma.Isotope_element(*args)
    def number(*args): return _pygamma.Isotope_number(*args)
    def mass(*args): return _pygamma.Isotope_mass(*args)
    def weight(*args): return _pygamma.Isotope_weight(*args)
    def gamma(*args): return _pygamma.Isotope_gamma(*args)
    def receptivity(*args): return _pygamma.Isotope_receptivity(*args)
    def relative_frequency(*args): return _pygamma.Isotope_relative_frequency(*args)
    def electron(*args): return _pygamma.Isotope_electron(*args)
    def read(*args): return _pygamma.Isotope_read(*args)
    def printStrings(*args): return _pygamma.Isotope_printStrings(*args)
    def seek(*args): return _pygamma.Isotope_seek(*args)
    def exists(*args): return _pygamma.Isotope_exists(*args)
    __swig_getmethods__["known"] = lambda x: _pygamma.Isotope_known
    if _newclass:known = staticmethod(_pygamma.Isotope_known)
    __swig_getmethods__["size"] = lambda x: _pygamma.Isotope_size
    if _newclass:size = staticmethod(_pygamma.Isotope_size)
    __swig_getmethods__["PrintListStrings"] = lambda x: _pygamma.Isotope_PrintListStrings
    if _newclass:PrintListStrings = staticmethod(_pygamma.Isotope_PrintListStrings)
    __swig_getmethods__["AddIsotope"] = lambda x: _pygamma.Isotope_AddIsotope
    if _newclass:AddIsotope = staticmethod(_pygamma.Isotope_AddIsotope)
    def __eq__(*args): return _pygamma.Isotope___eq__(*args)
    def __ne__(*args): return _pygamma.Isotope___ne__(*args)
    def __lt__(*args): return _pygamma.Isotope___lt__(*args)
    def __gt__(*args): return _pygamma.Isotope___gt__(*args)
    def nepair(*args): return _pygamma.Isotope_nepair(*args)
    def enpair(*args): return _pygamma.Isotope_enpair(*args)
    def eepair(*args): return _pygamma.Isotope_eepair(*args)
    def nnpair(*args): return _pygamma.Isotope_nnpair(*args)
Isotope_swigregister = _pygamma.Isotope_swigregister
Isotope_swigregister(Isotope)
Isotope_known = _pygamma.Isotope_known
Isotope_size = _pygamma.Isotope_size
Isotope_PrintListStrings = _pygamma.Isotope_PrintListStrings
Isotope_AddIsotope = _pygamma.Isotope_AddIsotope

PI = _pygamma.PI
PI2 = _pygamma.PI2
GAMMAfatal = _pygamma.GAMMAfatal
class IsotopeData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotopeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IsotopeData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_IsotopeData(*args)
        try: self.this.append(this)
        except: self.this = this
    def __assign__(*args): return _pygamma.IsotopeData___assign__(*args)
    __swig_destroy__ = _pygamma.delete_IsotopeData
    __del__ = lambda self : None;
    def qn(*args): return _pygamma.IsotopeData_qn(*args)
    def HS(*args): return _pygamma.IsotopeData_HS(*args)
    def momentum(*args): return _pygamma.IsotopeData_momentum(*args)
    def symbol(*args): return _pygamma.IsotopeData_symbol(*args)
    def name(*args): return _pygamma.IsotopeData_name(*args)
    def element(*args): return _pygamma.IsotopeData_element(*args)
    def number(*args): return _pygamma.IsotopeData_number(*args)
    def mass(*args): return _pygamma.IsotopeData_mass(*args)
    def weight(*args): return _pygamma.IsotopeData_weight(*args)
    def recept(*args): return _pygamma.IsotopeData_recept(*args)
    def electron(*args): return _pygamma.IsotopeData_electron(*args)
    def rel_freq(*args): return _pygamma.IsotopeData_rel_freq(*args)
    def printStrings(*args): return _pygamma.IsotopeData_printStrings(*args)
IsotopeData_swigregister = _pygamma.IsotopeData_swigregister
IsotopeData_swigregister(IsotopeData)
PIx2 = cvar.PIx2
DEG2RAD = cvar.DEG2RAD
RAD2DEG = cvar.RAD2DEG
HZ2RAD = cvar.HZ2RAD
RAD2HZ = cvar.RAD2HZ
HZ2GAUSS = cvar.HZ2GAUSS
GAUSS2HZ = cvar.GAUSS2HZ
GHZ2GAUSS = cvar.GHZ2GAUSS
GAUSS2GHZ = cvar.GAUSS2GHZ
MU_E = cvar.MU_E
BOHRMAG = cvar.BOHRMAG
GFREE = cvar.GFREE
GAMMAe = cvar.GAMMAe
GAMMA1H = cvar.GAMMA1H
DEFISO = cvar.DEFISO
PLANCK = cvar.PLANCK
HBAR = cvar.HBAR
query_parameter = _pygamma.query_parameter
ask_set = _pygamma.ask_set
GAMMAerror = _pygamma.GAMMAerror

cutWhite = _pygamma.cutWhite
cutParBlks = _pygamma.cutParBlks
Gitoa = _pygamma.Gitoa
Gdec2 = _pygamma.Gdec2
enable_blockdiag = _pygamma.enable_blockdiag
disable_blockdiag = _pygamma.disable_blockdiag
class matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_matrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_matrix
    __del__ = lambda self : None;
    def __call__(*args): return _pygamma.matrix___call__(*args)
    def elem(*args): return _pygamma.matrix_elem(*args)
    def get(*args): return _pygamma.matrix_get(*args)
    def getRe(*args): return _pygamma.matrix_getRe(*args)
    def getIm(*args): return _pygamma.matrix_getIm(*args)
    def put(*args): return _pygamma.matrix_put(*args)
    def put_h(*args): return _pygamma.matrix_put_h(*args)
    def get_block(*args): return _pygamma.matrix_get_block(*args)
    def put_block(*args): return _pygamma.matrix_put_block(*args)
    def stored_hermitian(*args): return _pygamma.matrix_stored_hermitian(*args)
    def check_hermitian(*args): return _pygamma.matrix_check_hermitian(*args)
    def set_hermitian(*args): return _pygamma.matrix_set_hermitian(*args)
    def test_hermitian(*args): return _pygamma.matrix_test_hermitian(*args)
    def stored_type(*args): return _pygamma.matrix_stored_type(*args)
    def test_type(*args): return _pygamma.matrix_test_type(*args)
    def set_type(*args): return _pygamma.matrix_set_type(*args)
    def check_type(*args): return _pygamma.matrix_check_type(*args)
    def mxtype(*args): return _pygamma.matrix_mxtype(*args)
    def cols(*args): return _pygamma.matrix_cols(*args)
    def rows(*args): return _pygamma.matrix_rows(*args)
    def refs(*args): return _pygamma.matrix_refs(*args)
    def pts(*args): return _pygamma.matrix_pts(*args)
    def is_symmetric(*args): return _pygamma.matrix_is_symmetric(*args)
    def is_hermitian(*args): return _pygamma.matrix_is_hermitian(*args)
    def is_unitary(*args): return _pygamma.matrix_is_unitary(*args)
    def is_real(*args): return _pygamma.matrix_is_real(*args)
    def is_imaginary(*args): return _pygamma.matrix_is_imaginary(*args)
    def is_complex(*args): return _pygamma.matrix_is_complex(*args)
    def is_zero(*args): return _pygamma.matrix_is_zero(*args)
    def is_diagonal(*args): return _pygamma.matrix_is_diagonal(*args)
    def is_square(*args): return _pygamma.matrix_is_square(*args)
    def __add__(*args): return _pygamma.matrix___add__(*args)
    def __sub__(*args): return _pygamma.matrix___sub__(*args)
    def __mul__(*args): return _pygamma.matrix___mul__(*args)
    def __div__(*args): return _pygamma.matrix___div__(*args)
    def __iadd__(*args): return _pygamma.matrix___iadd__(*args)
    def __isub__(*args): return _pygamma.matrix___isub__(*args)
    def __imul__(*args): return _pygamma.matrix___imul__(*args)
    def __idiv__(*args): return _pygamma.matrix___idiv__(*args)
    def __neg__(*args): return _pygamma.matrix___neg__(*args)
    def Re(*args): return _pygamma.matrix_Re(*args)
    def Im(*args): return _pygamma.matrix_Im(*args)
    def conj(*args): return _pygamma.matrix_conj(*args)
    def transpose(*args): return _pygamma.matrix_transpose(*args)
    def adjoint(*args): return _pygamma.matrix_adjoint(*args)
    def exp(*args): return _pygamma.matrix_exp(*args)
    def swaprows(*args): return _pygamma.matrix_swaprows(*args)
    def swapcols(*args): return _pygamma.matrix_swapcols(*args)
    def permute(*args): return _pygamma.matrix_permute(*args)
    def maxRe(*args): return _pygamma.matrix_maxRe(*args)
    def maxIm(*args): return _pygamma.matrix_maxIm(*args)
    def maxZ(*args): return _pygamma.matrix_maxZ(*args)
    def minRe(*args): return _pygamma.matrix_minRe(*args)
    def minIm(*args): return _pygamma.matrix_minIm(*args)
    def minZ(*args): return _pygamma.matrix_minZ(*args)
    def trace(*args): return _pygamma.matrix_trace(*args)
    def det(*args): return _pygamma.matrix_det(*args)
    def FFT(*args): return _pygamma.matrix_FFT(*args)
    def IFFT(*args): return _pygamma.matrix_IFFT(*args)
    __swig_getmethods__["Header"] = lambda x: _pygamma.matrix_Header
    if _newclass:Header = staticmethod(_pygamma.matrix_Header)
    __swig_getmethods__["PrintRI"] = lambda x: _pygamma.matrix_PrintRI
    if _newclass:PrintRI = staticmethod(_pygamma.matrix_PrintRI)
    __swig_getmethods__["PrintAll"] = lambda x: _pygamma.matrix_PrintAll
    if _newclass:PrintAll = staticmethod(_pygamma.matrix_PrintAll)
    __swig_getmethods__["PictDim"] = lambda x: _pygamma.matrix_PictDim
    if _newclass:PictDim = staticmethod(_pygamma.matrix_PictDim)
    __swig_getmethods__["PrintVal"] = lambda x: _pygamma.matrix_PrintVal
    if _newclass:PrintVal = staticmethod(_pygamma.matrix_PrintVal)
    __swig_getmethods__["PrintCols"] = lambda x: _pygamma.matrix_PrintCols
    if _newclass:PrintCols = staticmethod(_pygamma.matrix_PrintCols)
    __swig_getmethods__["PrintRows"] = lambda x: _pygamma.matrix_PrintRows
    if _newclass:PrintRows = staticmethod(_pygamma.matrix_PrintRows)
    def ask(*args): return _pygamma.matrix_ask(*args)
    def resize(*args): return _pygamma.matrix_resize(*args)
    def diagonal_form(*args): return _pygamma.matrix_diagonal_form(*args)
    def same_reference_as(*args): return _pygamma.matrix_same_reference_as(*args)
    def status(*args): return _pygamma.matrix_status(*args)
    def BlockDiag(*args): return _pygamma.matrix_BlockDiag(*args)
    def SymTriDiag(*args): return _pygamma.matrix_SymTriDiag(*args)
    def HermTriDiag(*args): return _pygamma.matrix_HermTriDiag(*args)
    def SymDiag(*args): return _pygamma.matrix_SymDiag(*args)
    def Diagonalize(*args): return _pygamma.matrix_Diagonalize(*args)
    def TestEigenSystem(*args): return _pygamma.matrix_TestEigenSystem(*args)
    def TestTransform(*args): return _pygamma.matrix_TestTransform(*args)
    def ColumnNorms(*args): return _pygamma.matrix_ColumnNorms(*args)
    def TestIdentity(*args): return _pygamma.matrix_TestIdentity(*args)
    def TestUnitary(*args): return _pygamma.matrix_TestUnitary(*args)
    def TestUTransform(*args): return _pygamma.matrix_TestUTransform(*args)
    def __eq__(*args): return _pygamma.matrix___eq__(*args)
    def __ne__(*args): return _pygamma.matrix___ne__(*args)
    def __lt__(*args): return _pygamma.matrix___lt__(*args)
    def __gt__(*args): return _pygamma.matrix___gt__(*args)
matrix_swigregister = _pygamma.matrix_swigregister
matrix_swigregister(matrix)
cutString = _pygamma.cutString
cutBlksXBlks = _pygamma.cutBlksXBlks
cutDouble = _pygamma.cutDouble
cutInt = _pygamma.cutInt
Gdec = _pygamma.Gdec
Gform = _pygamma.Gform
CenterString = _pygamma.CenterString
matrix_Header = _pygamma.matrix_Header
matrix_PrintRI = _pygamma.matrix_PrintRI
matrix_PrintAll = _pygamma.matrix_PrintAll
matrix_PictDim = _pygamma.matrix_PictDim
matrix_PrintVal = _pygamma.matrix_PrintVal
matrix_PrintCols = _pygamma.matrix_PrintCols
matrix_PrintRows = _pygamma.matrix_PrintRows

class row_vector(matrix):
    __swig_setmethods__ = {}
    for _s in [matrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, row_vector, name, value)
    __swig_getmethods__ = {}
    for _s in [matrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, row_vector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_row_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_row_vector
    __del__ = lambda self : None;
    def __call__(*args): return _pygamma.row_vector___call__(*args)
    def get(*args): return _pygamma.row_vector_get(*args)
    def getRe(*args): return _pygamma.row_vector_getRe(*args)
    def getIm(*args): return _pygamma.row_vector_getIm(*args)
    def put(*args): return _pygamma.row_vector_put(*args)
    def elements(*args): return _pygamma.row_vector_elements(*args)
    def size(*args): return _pygamma.row_vector_size(*args)
    def __add__(*args): return _pygamma.row_vector___add__(*args)
    def __sub__(*args): return _pygamma.row_vector___sub__(*args)
    def __mul__(*args): return _pygamma.row_vector___mul__(*args)
    def __iadd__(*args): return _pygamma.row_vector___iadd__(*args)
    def __isub__(*args): return _pygamma.row_vector___isub__(*args)
    def __imul__(*args): return _pygamma.row_vector___imul__(*args)
    def __idiv__(*args): return _pygamma.row_vector___idiv__(*args)
    def differential(*args): return _pygamma.row_vector_differential(*args)
    def norm(*args): return _pygamma.row_vector_norm(*args)
    def maxRe(*args): return _pygamma.row_vector_maxRe(*args)
    def maxIm(*args): return _pygamma.row_vector_maxIm(*args)
    def maxZ(*args): return _pygamma.row_vector_maxZ(*args)
    def minRe(*args): return _pygamma.row_vector_minRe(*args)
    def minIm(*args): return _pygamma.row_vector_minIm(*args)
    def minZ(*args): return _pygamma.row_vector_minZ(*args)
    def max(*args): return _pygamma.row_vector_max(*args)
    def min(*args): return _pygamma.row_vector_min(*args)
    def flip(*args): return _pygamma.row_vector_flip(*args)
    def sum(*args): return _pygamma.row_vector_sum(*args)
    def zero(*args): return _pygamma.row_vector_zero(*args)
    def sort(*args): return _pygamma.row_vector_sort(*args)
    def product(*args): return _pygamma.row_vector_product(*args)
    def scalar_product(*args): return _pygamma.row_vector_scalar_product(*args)
    def hdrString(*args): return _pygamma.row_vector_hdrString(*args)
    SMIS = _pygamma.row_vector_SMIS
    SIEMENS = _pygamma.row_vector_SIEMENS
    SIEMENS_NOHDR = _pygamma.row_vector_SIEMENS_NOHDR
    PLAIN_ASCII = _pygamma.row_vector_PLAIN_ASCII
    ASCII_MT_DEG = _pygamma.row_vector_ASCII_MT_DEG
    SVS = _pygamma.row_vector_SVS
    __swig_getmethods__["read_pulse"] = lambda x: _pygamma.row_vector_read_pulse
    if _newclass:read_pulse = staticmethod(_pygamma.row_vector_read_pulse)
    def ask(*args): return _pygamma.row_vector_ask(*args)
row_vector_swigregister = _pygamma.row_vector_swigregister
row_vector_swigregister(row_vector)
row_vector_read_pulse = _pygamma.row_vector_read_pulse

class col_vector(matrix):
    __swig_setmethods__ = {}
    for _s in [matrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, col_vector, name, value)
    __swig_getmethods__ = {}
    for _s in [matrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, col_vector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_col_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_col_vector
    __del__ = lambda self : None;
    def __call__(*args): return _pygamma.col_vector___call__(*args)
    def get(*args): return _pygamma.col_vector_get(*args)
    def getRe(*args): return _pygamma.col_vector_getRe(*args)
    def getIm(*args): return _pygamma.col_vector_getIm(*args)
    def put(*args): return _pygamma.col_vector_put(*args)
    def elements(*args): return _pygamma.col_vector_elements(*args)
    def size(*args): return _pygamma.col_vector_size(*args)
    def __add__(*args): return _pygamma.col_vector___add__(*args)
    def __sub__(*args): return _pygamma.col_vector___sub__(*args)
    def __mul__(*args): return _pygamma.col_vector___mul__(*args)
    def __iadd__(*args): return _pygamma.col_vector___iadd__(*args)
    def __isub__(*args): return _pygamma.col_vector___isub__(*args)
    def __imul__(*args): return _pygamma.col_vector___imul__(*args)
    def __idiv__(*args): return _pygamma.col_vector___idiv__(*args)
    def adjoint(*args): return _pygamma.col_vector_adjoint(*args)
    def transpose(*args): return _pygamma.col_vector_transpose(*args)
    def trace(*args): return _pygamma.col_vector_trace(*args)
    def differential(*args): return _pygamma.col_vector_differential(*args)
    def norm(*args): return _pygamma.col_vector_norm(*args)
    def maxRe(*args): return _pygamma.col_vector_maxRe(*args)
    def maxIm(*args): return _pygamma.col_vector_maxIm(*args)
    def maxZ(*args): return _pygamma.col_vector_maxZ(*args)
    def minRe(*args): return _pygamma.col_vector_minRe(*args)
    def minIm(*args): return _pygamma.col_vector_minIm(*args)
    def minZ(*args): return _pygamma.col_vector_minZ(*args)
    def max(*args): return _pygamma.col_vector_max(*args)
    def min(*args): return _pygamma.col_vector_min(*args)
    def flip(*args): return _pygamma.col_vector_flip(*args)
    def sum(*args): return _pygamma.col_vector_sum(*args)
    def zero(*args): return _pygamma.col_vector_zero(*args)
    def sort(*args): return _pygamma.col_vector_sort(*args)
    def product(*args): return _pygamma.col_vector_product(*args)
    def scalar_product(*args): return _pygamma.col_vector_scalar_product(*args)
    def hdrString(*args): return _pygamma.col_vector_hdrString(*args)
    def ask(*args): return _pygamma.col_vector_ask(*args)
col_vector_swigregister = _pygamma.col_vector_swigregister
col_vector_swigregister(col_vector)

class complex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, complex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, complex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_complex(*args)
        try: self.this.append(this)
        except: self.this = this
    def Relem(*args): return _pygamma.complex_Relem(*args)
    def Ielem(*args): return _pygamma.complex_Ielem(*args)
    def Rec(*args): return _pygamma.complex_Rec(*args)
    def Imc(*args): return _pygamma.complex_Imc(*args)
    def __add__(*args): return _pygamma.complex___add__(*args)
    def __iadd__(*args): return _pygamma.complex___iadd__(*args)
    def __sub__(*args): return _pygamma.complex___sub__(*args)
    def __isub__(*args): return _pygamma.complex___isub__(*args)
    def __mul__(*args): return _pygamma.complex___mul__(*args)
    def __imul__(*args): return _pygamma.complex___imul__(*args)
    def __div__(*args): return _pygamma.complex___div__(*args)
    def __idiv__(*args): return _pygamma.complex___idiv__(*args)
    def conj(*args): return _pygamma.complex_conj(*args)
    def conj_times(*args): return _pygamma.complex_conj_times(*args)
    def Zexp(*args): return _pygamma.complex_Zexp(*args)
    def Zsin(*args): return _pygamma.complex_Zsin(*args)
    def Zcos(*args): return _pygamma.complex_Zcos(*args)
    def Ztan(*args): return _pygamma.complex_Ztan(*args)
    def Zasin(*args): return _pygamma.complex_Zasin(*args)
    def Zacos(*args): return _pygamma.complex_Zacos(*args)
    def Zatan(*args): return _pygamma.complex_Zatan(*args)
    def Zsinh(*args): return _pygamma.complex_Zsinh(*args)
    def Zcosh(*args): return _pygamma.complex_Zcosh(*args)
    def Ztanh(*args): return _pygamma.complex_Ztanh(*args)
    def Zasinh(*args): return _pygamma.complex_Zasinh(*args)
    def Zacosh(*args): return _pygamma.complex_Zacosh(*args)
    def Zatanh(*args): return _pygamma.complex_Zatanh(*args)
    __swig_getmethods__["Reiphi"] = lambda x: _pygamma.complex_Reiphi
    if _newclass:Reiphi = staticmethod(_pygamma.complex_Reiphi)
    __swig_getmethods__["delim"] = lambda x: _pygamma.complex_delim
    if _newclass:delim = staticmethod(_pygamma.complex_delim)
    __swig_getmethods__["scinot"] = lambda x: _pygamma.complex_scinot
    if _newclass:scinot = staticmethod(_pygamma.complex_scinot)
    __swig_getmethods__["digits"] = lambda x: _pygamma.complex_digits
    if _newclass:digits = staticmethod(_pygamma.complex_digits)
    __swig_getmethods__["dadp"] = lambda x: _pygamma.complex_dadp
    if _newclass:dadp = staticmethod(_pygamma.complex_dadp)
    __swig_getmethods__["dlength"] = lambda x: _pygamma.complex_dlength
    if _newclass:dlength = staticmethod(_pygamma.complex_dlength)
    __swig_getmethods__["dformat"] = lambda x: _pygamma.complex_dformat
    if _newclass:dformat = staticmethod(_pygamma.complex_dformat)
    __swig_getmethods__["zlength"] = lambda x: _pygamma.complex_zlength
    if _newclass:zlength = staticmethod(_pygamma.complex_zlength)
    __swig_getmethods__["normphase"] = lambda x: _pygamma.complex_normphase
    if _newclass:normphase = staticmethod(_pygamma.complex_normphase)
    __swig_getmethods__["complex_getf"] = lambda x: _pygamma.complex_complex_getf
    if _newclass:complex_getf = staticmethod(_pygamma.complex_complex_getf)
    def printString(*args): return _pygamma.complex_printString(*args)
    def write(*args): return _pygamma.complex_write(*args)
    def read(*args): return _pygamma.complex_read(*args)
    def __eq__(*args): return _pygamma.complex___eq__(*args)
    def __ne__(*args): return _pygamma.complex___ne__(*args)
    def __lt__(*args): return _pygamma.complex___lt__(*args)
    def __gt__(*args): return _pygamma.complex___gt__(*args)
    __swig_destroy__ = _pygamma.delete_complex
    __del__ = lambda self : None;
complex_swigregister = _pygamma.complex_swigregister
complex_swigregister(complex)
Swap = _pygamma.Swap
complex_Reiphi = _pygamma.complex_Reiphi
complex_delim = _pygamma.complex_delim
complex_scinot = _pygamma.complex_scinot
complex_digits = _pygamma.complex_digits
complex_dadp = _pygamma.complex_dadp
complex_dlength = _pygamma.complex_dlength
complex_dformat = _pygamma.complex_dformat
complex_zlength = _pygamma.complex_zlength
complex_normphase = _pygamma.complex_normphase
complex_complex_getf = _pygamma.complex_complex_getf

DoubleMag = _pygamma.DoubleMag
SecUnits = _pygamma.SecUnits
HzUnits = _pygamma.HzUnits
analyze = _pygamma.analyze
TrajTiming = _pygamma.TrajTiming
class BlochSys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlochSys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlochSys, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_BlochSys(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_BlochSys
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.BlochSys___assign__(*args)
    def NIso(*args): return _pygamma.BlochSys_NIso(*args)
    def IsoMaxLength(*args): return _pygamma.BlochSys_IsoMaxLength(*args)
    def NSpins(*args): return _pygamma.BlochSys_NSpins(*args)
    def R1(*args): return _pygamma.BlochSys_R1(*args)
    def T1(*args): return _pygamma.BlochSys_T1(*args)
    def R2(*args): return _pygamma.BlochSys_R2(*args)
    def T2(*args): return _pygamma.BlochSys_T2(*args)
    def LW(*args): return _pygamma.BlochSys_LW(*args)
    def MaxExchange(*args): return _pygamma.BlochSys_MaxExchange(*args)
    def Norms(*args): return _pygamma.BlochSys_Norms(*args)
    def Norm(*args): return _pygamma.BlochSys_Norm(*args)
    def H(*args): return _pygamma.BlochSys_H(*args)
    def B(*args): return _pygamma.BlochSys_B(*args)
    def R(*args): return _pygamma.BlochSys_R(*args)
    def K(*args): return _pygamma.BlochSys_K(*args)
    def Meq(*args): return _pygamma.BlochSys_Meq(*args)
    def Mo(*args): return _pygamma.BlochSys_Mo(*args)
    def Mx(*args): return _pygamma.BlochSys_Mx(*args)
    def My(*args): return _pygamma.BlochSys_My(*args)
    def Mz(*args): return _pygamma.BlochSys_Mz(*args)
    def Mss(*args): return _pygamma.BlochSys_Mss(*args)
    def DetectMu(*args): return _pygamma.BlochSys_DetectMu(*args)
    def DetectMx(*args): return _pygamma.BlochSys_DetectMx(*args)
    def DetectMy(*args): return _pygamma.BlochSys_DetectMy(*args)
    def DetectMz(*args): return _pygamma.BlochSys_DetectMz(*args)
    def size(*args): return _pygamma.BlochSys_size(*args)
    def read(*args): return _pygamma.BlochSys_read(*args)
    def ask_read(*args): return _pygamma.BlochSys_ask_read(*args)
BlochSys_swigregister = _pygamma.BlochSys_swigregister
BlochSys_swigregister(BlochSys)
complex0 = cvar.complex0
complex1 = cvar.complex1
complexi = cvar.complexi
Mo_vector = _pygamma.Mo_vector

class MagVec(col_vector):
    __swig_setmethods__ = {}
    for _s in [col_vector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagVec, name, value)
    __swig_getmethods__ = {}
    for _s in [col_vector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MagVec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_MagVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def __add__(*args): return _pygamma.MagVec___add__(*args)
    def __iadd__(*args): return _pygamma.MagVec___iadd__(*args)
    def __sub__(*args): return _pygamma.MagVec___sub__(*args)
    def __isub__(*args): return _pygamma.MagVec___isub__(*args)
    def NComps(*args): return _pygamma.MagVec_NComps(*args)
    def x(*args): return _pygamma.MagVec_x(*args)
    def y(*args): return _pygamma.MagVec_y(*args)
    def z(*args): return _pygamma.MagVec_z(*args)
    def norm(*args): return _pygamma.MagVec_norm(*args)
    def theta(*args): return _pygamma.MagVec_theta(*args)
    def phi(*args): return _pygamma.MagVec_phi(*args)
    def Norms(*args): return _pygamma.MagVec_Norms(*args)
    def Norm(*args): return _pygamma.MagVec_Norm(*args)
    def PSetAdd(*args): return _pygamma.MagVec_PSetAdd(*args)
    def write(*args): return _pygamma.MagVec_write(*args)
    def read(*args): return _pygamma.MagVec_read(*args)
    def ask_read(*args): return _pygamma.MagVec_ask_read(*args)
    def printStrings(*args): return _pygamma.MagVec_printStrings(*args)
    def Mx(*args): return _pygamma.MagVec_Mx(*args)
    def My(*args): return _pygamma.MagVec_My(*args)
    def Mz(*args): return _pygamma.MagVec_Mz(*args)
    def MxVec(*args): return _pygamma.MagVec_MxVec(*args)
    def MyVec(*args): return _pygamma.MagVec_MyVec(*args)
    def MzVec(*args): return _pygamma.MagVec_MzVec(*args)
    __swig_destroy__ = _pygamma.delete_MagVec
    __del__ = lambda self : None;
MagVec_swigregister = _pygamma.MagVec_swigregister
MagVec_swigregister(MagVec)

class BlochAcq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlochAcq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlochAcq, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_BlochAcq(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_BlochAcq
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.BlochAcq___assign__(*args)
    def T(*args): return _pygamma.BlochAcq_T(*args)
    def F(*args): return _pygamma.BlochAcq_F(*args)
    def table(*args): return _pygamma.BlochAcq_table(*args)
    def full_size(*args): return _pygamma.BlochAcq_full_size(*args)
BlochAcq_swigregister = _pygamma.BlochAcq_swigregister
BlochAcq_swigregister(BlochAcq)

T_CSA = _pygamma.T_CSA
T22wh = _pygamma.T22wh
Clebsch_Gordan = _pygamma.Clebsch_Gordan
Wigner_3j = _pygamma.Wigner_3j
class spin_T(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_T, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spin_T, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_spin_T(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_spin_T
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.spin_T___assign__(*args)
    def component(*args): return _pygamma.spin_T_component(*args)
    def rotate(*args): return _pygamma.spin_T_rotate(*args)
    def Rank(*args): return _pygamma.spin_T_Rank(*args)
spin_T_swigregister = _pygamma.spin_T_swigregister
spin_T_swigregister(spin_T)
T_D = _pygamma.T_D
T_CS2 = _pygamma.T_CS2
T_CS = _pygamma.T_CS
T_RF = _pygamma.T_RF
T_Q = _pygamma.T_Q
T1 = _pygamma.T1
T10 = _pygamma.T10
T11 = _pygamma.T11
T22SSirr = _pygamma.T22SSirr
T2 = _pygamma.T2
T20 = _pygamma.T20
T21 = _pygamma.T21
T22 = _pygamma.T22
T2SS = _pygamma.T2SS
T20SS = _pygamma.T20SS
T21SS = _pygamma.T21SS
T22SS = _pygamma.T22SS
T_prod = _pygamma.T_prod

Rmx = _pygamma.Rmx
class coord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coord, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_coord(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_coord
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.coord___assign__(*args)
    def get(*args): return _pygamma.coord_get(*args)
    def x(*args): return _pygamma.coord_x(*args)
    def y(*args): return _pygamma.coord_y(*args)
    def z(*args): return _pygamma.coord_z(*args)
    def xyz(*args): return _pygamma.coord_xyz(*args)
    def norm(*args): return _pygamma.coord_norm(*args)
    def Rad(*args): return _pygamma.coord_Rad(*args)
    def theta(*args): return _pygamma.coord_theta(*args)
    def phi(*args): return _pygamma.coord_phi(*args)
    def invert(*args): return _pygamma.coord_invert(*args)
    __swig_getmethods__["Rz"] = lambda x: _pygamma.coord_Rz
    if _newclass:Rz = staticmethod(_pygamma.coord_Rz)
    __swig_getmethods__["Rx"] = lambda x: _pygamma.coord_Rx
    if _newclass:Rx = staticmethod(_pygamma.coord_Rx)
    __swig_getmethods__["Ry"] = lambda x: _pygamma.coord_Ry
    if _newclass:Ry = staticmethod(_pygamma.coord_Ry)
    def xrotate(*args): return _pygamma.coord_xrotate(*args)
    def yrotate(*args): return _pygamma.coord_yrotate(*args)
    def zrotate(*args): return _pygamma.coord_zrotate(*args)
    def Ralpha(*args): return _pygamma.coord_Ralpha(*args)
    def Rbeta(*args): return _pygamma.coord_Rbeta(*args)
    def Rgamma(*args): return _pygamma.coord_Rgamma(*args)
    def REuler(*args): return _pygamma.coord_REuler(*args)
    def rotate(*args): return _pygamma.coord_rotate(*args)
    def trans_x(*args): return _pygamma.coord_trans_x(*args)
    def trans_x_ip(*args): return _pygamma.coord_trans_x_ip(*args)
    def trans_y(*args): return _pygamma.coord_trans_y(*args)
    def trans_y_ip(*args): return _pygamma.coord_trans_y_ip(*args)
    def trans_z(*args): return _pygamma.coord_trans_z(*args)
    def trans_z_ip(*args): return _pygamma.coord_trans_z_ip(*args)
    def translate(*args): return _pygamma.coord_translate(*args)
    def translate_ip(*args): return _pygamma.coord_translate_ip(*args)
    def __add__(*args): return _pygamma.coord___add__(*args)
    def __sub__(*args): return _pygamma.coord___sub__(*args)
    def __iadd__(*args): return _pygamma.coord___iadd__(*args)
    def __isub__(*args): return _pygamma.coord___isub__(*args)
    def __mul__(*args): return _pygamma.coord___mul__(*args)
    def __imul__(*args): return _pygamma.coord___imul__(*args)
    def __div__(*args): return _pygamma.coord___div__(*args)
    def __idiv__(*args): return _pygamma.coord___idiv__(*args)
    def __eq__(*args): return _pygamma.coord___eq__(*args)
    def __ne__(*args): return _pygamma.coord___ne__(*args)
    def __gt__(*args): return _pygamma.coord___gt__(*args)
    def __lt__(*args): return _pygamma.coord___lt__(*args)
    def param(*args): return _pygamma.coord_param(*args)
    def read(*args): return _pygamma.coord_read(*args)
    __swig_getmethods__["length"] = lambda x: _pygamma.coord_length
    if _newclass:length = staticmethod(_pygamma.coord_length)
    def Cart2Sph(*args): return _pygamma.coord_Cart2Sph(*args)
    def Sph2Cart(*args): return _pygamma.coord_Sph2Cart(*args)
    def Cart2Cyl(*args): return _pygamma.coord_Cart2Cyl(*args)
    def Cyl2Cart(*args): return _pygamma.coord_Cyl2Cart(*args)
    def Sph2Cyl(*args): return _pygamma.coord_Sph2Cyl(*args)
    def Cyl2Sph(*args): return _pygamma.coord_Cyl2Sph(*args)
    __swig_getmethods__["getDefCoord"] = lambda x: _pygamma.coord_getDefCoord
    if _newclass:getDefCoord = staticmethod(_pygamma.coord_getDefCoord)
    __swig_getmethods__["setDefCoord"] = lambda x: _pygamma.coord_setDefCoord
    if _newclass:setDefCoord = staticmethod(_pygamma.coord_setDefCoord)
    __swig_getmethods__["SetCutoff"] = lambda x: _pygamma.coord_SetCutoff
    if _newclass:SetCutoff = staticmethod(_pygamma.coord_SetCutoff)
coord_swigregister = _pygamma.coord_swigregister
coord_swigregister(coord)
coord_Rz = _pygamma.coord_Rz
coord_Rx = _pygamma.coord_Rx
coord_Ry = _pygamma.coord_Ry
coord_length = _pygamma.coord_length
coord_getDefCoord = _pygamma.coord_getDefCoord
coord_setDefCoord = _pygamma.coord_setDefCoord
coord_SetCutoff = _pygamma.coord_SetCutoff

class coord_vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coord_vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coord_vec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_coord_vec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_coord_vec
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.coord_vec___assign__(*args)
    def xrotate(*args): return _pygamma.coord_vec_xrotate(*args)
    def yrotate(*args): return _pygamma.coord_vec_yrotate(*args)
    def zrotate(*args): return _pygamma.coord_vec_zrotate(*args)
    def rotate(*args): return _pygamma.coord_vec_rotate(*args)
    def rotate_ip(*args): return _pygamma.coord_vec_rotate_ip(*args)
    def translate(*args): return _pygamma.coord_vec_translate(*args)
    def translate_ip(*args): return _pygamma.coord_vec_translate_ip(*args)
    def trans_x(*args): return _pygamma.coord_vec_trans_x(*args)
    def trans_y(*args): return _pygamma.coord_vec_trans_y(*args)
    def trans_z(*args): return _pygamma.coord_vec_trans_z(*args)
    def trans_x_ip(*args): return _pygamma.coord_vec_trans_x_ip(*args)
    def trans_y_ip(*args): return _pygamma.coord_vec_trans_y_ip(*args)
    def trans_z_ip(*args): return _pygamma.coord_vec_trans_z_ip(*args)
    def project(*args): return _pygamma.coord_vec_project(*args)
    def __mul__(*args): return _pygamma.coord_vec___mul__(*args)
    def __imul__(*args): return _pygamma.coord_vec___imul__(*args)
    def __div__(*args): return _pygamma.coord_vec___div__(*args)
    def __idiv__(*args): return _pygamma.coord_vec___idiv__(*args)
    def __add__(*args): return _pygamma.coord_vec___add__(*args)
    def __iadd__(*args): return _pygamma.coord_vec___iadd__(*args)
    def __sub__(*args): return _pygamma.coord_vec___sub__(*args)
    def __isub__(*args): return _pygamma.coord_vec___isub__(*args)
    def size(*args): return _pygamma.coord_vec_size(*args)
    def max_x(*args): return _pygamma.coord_vec_max_x(*args)
    def max_y(*args): return _pygamma.coord_vec_max_y(*args)
    def max_z(*args): return _pygamma.coord_vec_max_z(*args)
    def maxima(*args): return _pygamma.coord_vec_maxima(*args)
    def max_R(*args): return _pygamma.coord_vec_max_R(*args)
    def vectors(*args): return _pygamma.coord_vec_vectors(*args)
    def vectors_f(*args): return _pygamma.coord_vec_vectors_f(*args)
    def distance(*args): return _pygamma.coord_vec_distance(*args)
    def distances(*args): return _pygamma.coord_vec_distances(*args)
    def thetas(*args): return _pygamma.coord_vec_thetas(*args)
    def phis(*args): return _pygamma.coord_vec_phis(*args)
    def __call__(*args): return _pygamma.coord_vec___call__(*args)
    def put(*args): return _pygamma.coord_vec_put(*args)
    def get(*args): return _pygamma.coord_vec_get(*args)
    def x(*args): return _pygamma.coord_vec_x(*args)
    def y(*args): return _pygamma.coord_vec_y(*args)
    def z(*args): return _pygamma.coord_vec_z(*args)
    def get_block(*args): return _pygamma.coord_vec_get_block(*args)
    def put_block(*args): return _pygamma.coord_vec_put_block(*args)
    def PSetAdd(*args): return _pygamma.coord_vec_PSetAdd(*args)
    def is_zero(*args): return _pygamma.coord_vec_is_zero(*args)
    def ask_read(*args): return _pygamma.coord_vec_ask_read(*args)
    def read(*args): return _pygamma.coord_vec_read(*args)
    def Cart2Sph(*args): return _pygamma.coord_vec_Cart2Sph(*args)
    def Sph2Cart(*args): return _pygamma.coord_vec_Sph2Cart(*args)
    def Cart2Cyl(*args): return _pygamma.coord_vec_Cart2Cyl(*args)
    def Cyl2Cart(*args): return _pygamma.coord_vec_Cyl2Cart(*args)
    def Sph2Cyl(*args): return _pygamma.coord_vec_Sph2Cyl(*args)
    def Cyl2Sph(*args): return _pygamma.coord_vec_Cyl2Sph(*args)
coord_vec_swigregister = _pygamma.coord_vec_swigregister
coord_vec_swigregister(coord_vec)
UnitX = cvar.UnitX
UnitY = cvar.UnitY
UnitZ = cvar.UnitZ
coord0 = cvar.coord0

class ExchProcM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExchProcM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExchProcM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["KRate"] = _pygamma.ExchProcM_KRate_set
    __swig_getmethods__["KRate"] = _pygamma.ExchProcM_KRate_get
    if _newclass:KRate = _swig_property(_pygamma.ExchProcM_KRate_get, _pygamma.ExchProcM_KRate_set)
    __swig_setmethods__["Spins"] = _pygamma.ExchProcM_Spins_set
    __swig_getmethods__["Spins"] = _pygamma.ExchProcM_Spins_get
    if _newclass:Spins = _swig_property(_pygamma.ExchProcM_Spins_get, _pygamma.ExchProcM_Spins_set)
    def XPerror(*args): return _pygamma.ExchProcM_XPerror(*args)
    def XPfatal(*args): return _pygamma.ExchProcM_XPfatal(*args)
    def getExch(*args): return _pygamma.ExchProcM_getExch(*args)
    def parseExch(*args): return _pygamma.ExchProcM_parseExch(*args)
    def getComps(*args): return _pygamma.ExchProcM_getComps(*args)
    def getRate(*args): return _pygamma.ExchProcM_getRate(*args)
    def getXP(*args): return _pygamma.ExchProcM_getXP(*args)
    def setXP(*args): return _pygamma.ExchProcM_setXP(*args)
    def CCheck(*args): return _pygamma.ExchProcM_CCheck(*args)
    def FCheck(*args): return _pygamma.ExchProcM_FCheck(*args)
    def __init__(self, *args): 
        this = _pygamma.new_ExchProcM(*args)
        try: self.this.append(this)
        except: self.this = this
    def __assign__(*args): return _pygamma.ExchProcM___assign__(*args)
    __swig_destroy__ = _pygamma.delete_ExchProcM
    __del__ = lambda self : None;
    def Kex(*args): return _pygamma.ExchProcM_Kex(*args)
    def NComps(*args): return _pygamma.ExchProcM_NComps(*args)
    def NSpins(*args): return _pygamma.ExchProcM_NSpins(*args)
    def Comp(*args): return _pygamma.ExchProcM_Comp(*args)
    def mixes(*args): return _pygamma.ExchProcM_mixes(*args)
    def involves(*args): return _pygamma.ExchProcM_involves(*args)
    def read(*args): return _pygamma.ExchProcM_read(*args)
    def ExchStr(*args): return _pygamma.ExchProcM_ExchStr(*args)
ExchProcM_swigregister = _pygamma.ExchProcM_swigregister
ExchProcM_swigregister(ExchProcM)
Exponential = _pygamma.Exponential
DExponential = _pygamma.DExponential
Exponen_cut = _pygamma.Exponen_cut

ask_Lorentzian = _pygamma.ask_Lorentzian
A11 = _pygamma.A11
class space_T(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, space_T, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, space_T, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_space_T(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_space_T
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.space_T___assign__(*args)
    def PASys(*args): return _pygamma.space_T_PASys(*args)
    def PASys_EA(*args): return _pygamma.space_T_PASys_EA(*args)
    def iso(*args): return _pygamma.space_T_iso(*args)
    def delz(*args): return _pygamma.space_T_delz(*args)
    def eta(*args): return _pygamma.space_T_eta(*args)
    def alpha(*args): return _pygamma.space_T_alpha(*args)
    def beta(*args): return _pygamma.space_T_beta(*args)
    def gamma(*args): return _pygamma.space_T_gamma(*args)
    def exists(*args): return _pygamma.space_T_exists(*args)
    def Rank(*args): return _pygamma.space_T_Rank(*args)
    def component(*args): return _pygamma.space_T_component(*args)
    def Ccomponent(*args): return _pygamma.space_T_Ccomponent(*args)
    def rotate(*args): return _pygamma.space_T_rotate(*args)
    def param(*args): return _pygamma.space_T_param(*args)
    def write(*args): return _pygamma.space_T_write(*args)
    def read(*args): return _pygamma.space_T_read(*args)
space_T_swigregister = _pygamma.space_T_swigregister
space_T_swigregister(space_T)
Lorentz_cut = _pygamma.Lorentz_cut
Lorentz_int = _pygamma.Lorentz_int
read_Lorentzian = _pygamma.read_Lorentzian
DLorentzian = _pygamma.DLorentzian
A1 = _pygamma.A1
SphA1 = _pygamma.SphA1
A2 = _pygamma.A2
A20 = _pygamma.A20
A21 = _pygamma.A21
A22 = _pygamma.A22
T_comp = _pygamma.T_comp
T_mult = _pygamma.T_mult
T_rot = _pygamma.T_rot

Y_fatality = _pygamma.Y_fatality
Y00rad = _pygamma.Y00rad
Y10rad = _pygamma.Y10rad
Y11rad = _pygamma.Y11rad
Y1m1rad = _pygamma.Y1m1rad
Y20rad = _pygamma.Y20rad
Y21rad = _pygamma.Y21rad
Y2m1rad = _pygamma.Y2m1rad
Y22rad = _pygamma.Y22rad
Y2m2rad = _pygamma.Y2m2rad
Y30rad = _pygamma.Y30rad
Y31rad = _pygamma.Y31rad
Y3m1rad = _pygamma.Y3m1rad
Y32rad = _pygamma.Y32rad
Y3m2rad = _pygamma.Y3m2rad
Y33rad = _pygamma.Y33rad
Y3m3rad = _pygamma.Y3m3rad
Ylmrad = _pygamma.Ylmrad
Y00 = _pygamma.Y00
Y10 = _pygamma.Y10
Y11 = _pygamma.Y11
Y1m1 = _pygamma.Y1m1
Y20 = _pygamma.Y20
Y21 = _pygamma.Y21
Y2m1 = _pygamma.Y2m1
Y22 = _pygamma.Y22
Y2m2 = _pygamma.Y2m2
Y30 = _pygamma.Y30
Y31 = _pygamma.Y31
Y3m1 = _pygamma.Y3m1
Y32 = _pygamma.Y32
Y3m2 = _pygamma.Y3m2
Y33 = _pygamma.Y33
Y3m3 = _pygamma.Y3m3
Ylm = _pygamma.Ylm
Wigner_error = _pygamma.Wigner_error
Wigner_fatality = _pygamma.Wigner_fatality
d0 = _pygamma.d0
dm1half = _pygamma.dm1half
d11 = _pygamma.d11
d10 = _pygamma.d10
d1m1 = _pygamma.d1m1
d1 = _pygamma.d1
d22 = _pygamma.d22
d21 = _pygamma.d21
d20 = _pygamma.d20
d2m1 = _pygamma.d2m1
d2m2 = _pygamma.d2m2
d2 = _pygamma.d2
fact = _pygamma.fact
dJ_int = _pygamma.dJ_int
dJ_half_int = _pygamma.dJ_half_int
D0 = _pygamma.D0
D1half = _pygamma.D1half
D1 = _pygamma.D1
D2 = _pygamma.D2
sinc = _pygamma.sinc
square_wave = _pygamma.square_wave
class spin_sys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_sys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spin_sys, name)
    __repr__ = _swig_repr
    def check_spin(*args): return _pygamma.spin_sys_check_spin(*args)
    def check_spins(*args): return _pygamma.spin_sys_check_spins(*args)
    def __init__(self, *args): 
        this = _pygamma.new_spin_sys(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_spin_sys
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.spin_sys___assign__(*args)
    def spins(*args): return _pygamma.spin_sys_spins(*args)
    def spinpairs(*args): return _pygamma.spin_sys_spinpairs(*args)
    def HS(*args): return _pygamma.spin_sys_HS(*args)
    def isotope(*args): return _pygamma.spin_sys_isotope(*args)
    def weight(*args): return _pygamma.spin_sys_weight(*args)
    def symbol(*args): return _pygamma.spin_sys_symbol(*args)
    def qn(*args): return _pygamma.spin_sys_qn(*args)
    def element(*args): return _pygamma.spin_sys_element(*args)
    def momentum(*args): return _pygamma.spin_sys_momentum(*args)
    def gamma(*args): return _pygamma.spin_sys_gamma(*args)
    def HSvect(*args): return _pygamma.spin_sys_HSvect(*args)
    def qState(*args): return _pygamma.spin_sys_qState(*args)
    def qnState(*args): return _pygamma.spin_sys_qnState(*args)
    def qnStates(*args): return _pygamma.spin_sys_qnStates(*args)
    def qnDist(*args): return _pygamma.spin_sys_qnDist(*args)
    def CoherDist(*args): return _pygamma.spin_sys_CoherDist(*args)
    def homonuclear(*args): return _pygamma.spin_sys_homonuclear(*args)
    def heteronuclear(*args): return _pygamma.spin_sys_heteronuclear(*args)
    def electron(*args): return _pygamma.spin_sys_electron(*args)
    def nucleon(*args): return _pygamma.spin_sys_nucleon(*args)
    def spinhalf(*args): return _pygamma.spin_sys_spinhalf(*args)
    def electrons(*args): return _pygamma.spin_sys_electrons(*args)
    def nucleons(*args): return _pygamma.spin_sys_nucleons(*args)
    def nepair(*args): return _pygamma.spin_sys_nepair(*args)
    def enpair(*args): return _pygamma.spin_sys_enpair(*args)
    def eepair(*args): return _pygamma.spin_sys_eepair(*args)
    def nnpair(*args): return _pygamma.spin_sys_nnpair(*args)
    def pairidx(*args): return _pygamma.spin_sys_pairidx(*args)
    def isotopes(*args): return _pygamma.spin_sys_isotopes(*args)
    def SetFlag(*args): return _pygamma.spin_sys_SetFlag(*args)
    def SetFlags(*args): return _pygamma.spin_sys_SetFlags(*args)
    def GetFlag(*args): return _pygamma.spin_sys_GetFlag(*args)
    def name(*args): return _pygamma.spin_sys_name(*args)
    def warnings(*args): return _pygamma.spin_sys_warnings(*args)
    def IsoDefault(*args): return _pygamma.spin_sys_IsoDefault(*args)
    def PSetAdd(*args): return _pygamma.spin_sys_PSetAdd(*args)
    def getSpins(*args): return _pygamma.spin_sys_getSpins(*args)
    def setName(*args): return _pygamma.spin_sys_setName(*args)
    def setIs(*args): return _pygamma.spin_sys_setIs(*args)
    def ask_read(*args): return _pygamma.spin_sys_ask_read(*args)
    def get_basis(*args): return _pygamma.spin_sys_get_basis(*args)
    def printstrings(*args): return _pygamma.spin_sys_printstrings(*args)
    def SYSStrings(*args): return _pygamma.spin_sys_SYSStrings(*args)
    def SIStrings(*args): return _pygamma.spin_sys_SIStrings(*args)
    def SYMStrings(*args): return _pygamma.spin_sys_SYMStrings(*args)
    def SAMStrings(*args): return _pygamma.spin_sys_SAMStrings(*args)
spin_sys_swigregister = _pygamma.spin_sys_swigregister
spin_sys_swigregister(spin_sys)
Y_error = _pygamma.Y_error
d1half = _pygamma.d1half
dJ = _pygamma.dJ
DJ = _pygamma.DJ
exponential_multiply = _pygamma.exponential_multiply
exponential = _pygamma.exponential
Gaussian = _pygamma.Gaussian
Hamming = _pygamma.Hamming
Hanning = _pygamma.Hanning
hyperbol_sec = _pygamma.hyperbol_sec
Kaiser = _pygamma.Kaiser
Lorentzian = _pygamma.Lorentzian
sin_square = _pygamma.sin_square
Noise = _pygamma.Noise

class spin_system(spin_sys):
    __swig_setmethods__ = {}
    for _s in [spin_sys]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_system, name, value)
    __swig_getmethods__ = {}
    for _s in [spin_sys]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, spin_system, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_spin_system(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_spin_system
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.spin_system___assign__(*args)
    def shifts(*args): return _pygamma.spin_system_shifts(*args)
    def shift(*args): return _pygamma.spin_system_shift(*args)
    def maxShift(*args): return _pygamma.spin_system_maxShift(*args)
    def minShift(*args): return _pygamma.spin_system_minShift(*args)
    def medianShift(*args): return _pygamma.spin_system_medianShift(*args)
    def lab_shift(*args): return _pygamma.spin_system_lab_shift(*args)
    def offsetShifts(*args): return _pygamma.spin_system_offsetShifts(*args)
    def PPM(*args): return _pygamma.spin_system_PPM(*args)
    def gfactor(*args): return _pygamma.spin_system_gfactor(*args)
    def eshift(*args): return _pygamma.spin_system_eshift(*args)
    def lab_eshift(*args): return _pygamma.spin_system_lab_eshift(*args)
    def efield(*args): return _pygamma.spin_system_efield(*args)
    def efield_lab(*args): return _pygamma.spin_system_efield_lab(*args)
    def Js(*args): return _pygamma.spin_system_Js(*args)
    def J(*args): return _pygamma.spin_system_J(*args)
    def As(*args): return _pygamma.spin_system_As(*args)
    def A(*args): return _pygamma.spin_system_A(*args)
    def AHz(*args): return _pygamma.spin_system_AHz(*args)
    def Omega(*args): return _pygamma.spin_system_Omega(*args)
    def Bo(*args): return _pygamma.spin_system_Bo(*args)
    def OmegaAdjust(*args): return _pygamma.spin_system_OmegaAdjust(*args)
    def FieldAdjust(*args): return _pygamma.spin_system_FieldAdjust(*args)
    def spectrometer_frequency(*args): return _pygamma.spin_system_spectrometer_frequency(*args)
    def spflags(*args): return _pygamma.spin_system_spflags(*args)
    def spflag(*args): return _pygamma.spin_system_spflag(*args)
    def center(*args): return _pygamma.spin_system_center(*args)
    def Nyquist(*args): return _pygamma.spin_system_Nyquist(*args)
    def PSetAdd(*args): return _pygamma.spin_system_PSetAdd(*args)
    def setJs(*args): return _pygamma.spin_system_setJs(*args)
    def setAs(*args): return _pygamma.spin_system_setAs(*args)
    def setShifts(*args): return _pygamma.spin_system_setShifts(*args)
    def setGs(*args): return _pygamma.spin_system_setGs(*args)
    def write(*args): return _pygamma.spin_system_write(*args)
    def read(*args): return _pygamma.spin_system_read(*args)
    def ask_read(*args): return _pygamma.spin_system_ask_read(*args)
    def SYSStrings(*args): return _pygamma.spin_system_SYSStrings(*args)
    def VStrings(*args): return _pygamma.spin_system_VStrings(*args)
    def PPMStrings(*args): return _pygamma.spin_system_PPMStrings(*args)
    def GFStrings(*args): return _pygamma.spin_system_GFStrings(*args)
    def BeStrings(*args): return _pygamma.spin_system_BeStrings(*args)
    def JStrings(*args): return _pygamma.spin_system_JStrings(*args)
    def AStrings(*args): return _pygamma.spin_system_AStrings(*args)
    def OmStrings(*args): return _pygamma.spin_system_OmStrings(*args)
spin_system_swigregister = _pygamma.spin_system_swigregister
spin_system_swigregister(spin_system)

class gen_op(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gen_op, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gen_op, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_gen_op(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_gen_op
    __del__ = lambda self : None;
    def __add__(*args): return _pygamma.gen_op___add__(*args)
    def __sub__(*args): return _pygamma.gen_op___sub__(*args)
    def __neg__(*args): return _pygamma.gen_op___neg__(*args)
    def __mul__(*args): return _pygamma.gen_op___mul__(*args)
    def __iand__(*args): return _pygamma.gen_op___iand__(*args)
    def __iadd__(*args): return _pygamma.gen_op___iadd__(*args)
    def __isub__(*args): return _pygamma.gen_op___isub__(*args)
    def __imul__(*args): return _pygamma.gen_op___imul__(*args)
    def __idiv__(*args): return _pygamma.gen_op___idiv__(*args)
    def det(*args): return _pygamma.gen_op_det(*args)
    def trace(*args): return _pygamma.gen_op_trace(*args)
    def proj(*args): return _pygamma.gen_op_proj(*args)
    def dim(*args): return _pygamma.gen_op_dim(*args)
    def HS(*args): return _pygamma.gen_op_HS(*args)
    def LS(*args): return _pygamma.gen_op_LS(*args)
    def dim_LS(*args): return _pygamma.gen_op_dim_LS(*args)
    def exp(*args): return _pygamma.gen_op_exp(*args)
    def Pow(*args): return _pygamma.gen_op_Pow(*args)
    def sim_trans(*args): return _pygamma.gen_op_sim_trans(*args)
    def sim_trans_ip(*args): return _pygamma.gen_op_sim_trans_ip(*args)
    def eigvals(*args): return _pygamma.gen_op_eigvals(*args)
    def get_bs(*args): return _pygamma.gen_op_get_bs(*args)
    def get_basis(*args): return _pygamma.gen_op_get_basis(*args)
    def put_bs(*args): return _pygamma.gen_op_put_bs(*args)
    def put_basis(*args): return _pygamma.gen_op_put_basis(*args)
    def __call__(*args): return _pygamma.gen_op___call__(*args)
    def get(*args): return _pygamma.gen_op_get(*args)
    def put(*args): return _pygamma.gen_op_put(*args)
    def name(*args): return _pygamma.gen_op_name(*args)
    def bsname(*args): return _pygamma.gen_op_bsname(*args)
    def exists(*args): return _pygamma.gen_op_exists(*args)
    def superket(*args): return _pygamma.gen_op_superket(*args)
    def desuperket(*args): return _pygamma.gen_op_desuperket(*args)
    def project_sub(*args): return _pygamma.gen_op_project_sub(*args)
    def test_EBR(*args): return _pygamma.gen_op_test_EBR(*args)
    def test_DBR(*args): return _pygamma.gen_op_test_DBR(*args)
    def in_EBR(*args): return _pygamma.gen_op_in_EBR(*args)
    def in_DBR(*args): return _pygamma.gen_op_in_DBR(*args)
    def set_DBR(*args): return _pygamma.gen_op_set_DBR(*args)
    def set_EBR(*args): return _pygamma.gen_op_set_EBR(*args)
    def Op_base(*args): return _pygamma.gen_op_Op_base(*args)
    def status(*args): return _pygamma.gen_op_status(*args)
    def setOnlyWBR(*args): return _pygamma.gen_op_setOnlyWBR(*args)
    def Op_priority(*args): return _pygamma.gen_op_Op_priority(*args)
    def SetLimits(*args): return _pygamma.gen_op_SetLimits(*args)
    def OpCheck(*args): return _pygamma.gen_op_OpCheck(*args)
    def LimCheck(*args): return _pygamma.gen_op_LimCheck(*args)
    def write(*args): return _pygamma.gen_op_write(*args)
    def read(*args): return _pygamma.gen_op_read(*args)
    def TestEigenSystem(*args): return _pygamma.gen_op_TestEigenSystem(*args)
    def is_symmetric(*args): return _pygamma.gen_op_is_symmetric(*args)
    def is_hermitian(*args): return _pygamma.gen_op_is_hermitian(*args)
    def is_unitary(*args): return _pygamma.gen_op_is_unitary(*args)
    def is_real(*args): return _pygamma.gen_op_is_real(*args)
    def is_imaginary(*args): return _pygamma.gen_op_is_imaginary(*args)
    def is_complex(*args): return _pygamma.gen_op_is_complex(*args)
    def is_zero(*args): return _pygamma.gen_op_is_zero(*args)
    def is_diagonal(*args): return _pygamma.gen_op_is_diagonal(*args)
    def is_square(*args): return _pygamma.gen_op_is_square(*args)
    def __eq__(*args): return _pygamma.gen_op___eq__(*args)
    def __ne__(*args): return _pygamma.gen_op___ne__(*args)
    def __lt__(*args): return _pygamma.gen_op___lt__(*args)
    def __gt__(*args): return _pygamma.gen_op___gt__(*args)
gen_op_swigregister = _pygamma.gen_op_swigregister
gen_op_swigregister(gen_op)

I_gen_op = _pygamma.I_gen_op
HJw = _pygamma.HJw
HJwh = _pygamma.HJwh
HJd = _pygamma.HJd
How = _pygamma.How
Ho_lab = _pygamma.Ho_lab
Hg = _pygamma.Hg
Hg_lab = _pygamma.Hg_lab
HAw = _pygamma.HAw
HQsec = _pygamma.HQsec
SOpCmpfatal = _pygamma.SOpCmpfatal
Iu = _pygamma.Iu
Ia = _pygamma.Ia
Ib = _pygamma.Ib
Ipol = _pygamma.Ipol
Fe_sp = _pygamma.Fe_sp
Fx_sp = _pygamma.Fx_sp
Fy_sp = _pygamma.Fy_sp
Fz_sp = _pygamma.Fz_sp
Fa_sp = _pygamma.Fa_sp
Fb_sp = _pygamma.Fb_sp
Fpol_sp = _pygamma.Fpol_sp
Faxis_sp = _pygamma.Faxis_sp
Fpol_gen = _pygamma.Fpol_gen
Ipdt = _pygamma.Ipdt
Fpdt = _pygamma.Fpdt
zero_mqc = _pygamma.zero_mqc
st_Op = _pygamma.st_Op
sqt_v = _pygamma.sqt_v
sort_super_op_basis = _pygamma.sort_super_op_basis
sort_LOp_basis = _pygamma.sort_LOp_basis
sort_Op_basis = _pygamma.sort_Op_basis
mqt_v = _pygamma.mqt_v
wavefunction = _pygamma.wavefunction
vecmax = _pygamma.vecmax
integral = _pygamma.integral
lwhh = _pygamma.lwhh
query_file1D = _pygamma.query_file1D
Ixpuls_sp = _pygamma.Ixpuls_sp
Iypuls_sp = _pygamma.Iypuls_sp
Ixypuls_sp = _pygamma.Ixypuls_sp
Ixpuls_sp_U = _pygamma.Ixpuls_sp_U
Iypuls_sp_U = _pygamma.Iypuls_sp_U
Ixypuls_U_sp = _pygamma.Ixypuls_U_sp
class basis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, basis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, basis, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_basis(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_basis
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.basis___assign__(*args)
    def size(*args): return _pygamma.basis_size(*args)
    def dim(*args): return _pygamma.basis_dim(*args)
    def name(*args): return _pygamma.basis_name(*args)
    def dim_LS(*args): return _pygamma.basis_dim_LS(*args)
    def sub_N(*args): return _pygamma.basis_sub_N(*args)
    def sub_dim(*args): return _pygamma.basis_sub_dim(*args)
    def sub_anchor(*args): return _pygamma.basis_sub_anchor(*args)
    def sub_anchor_LS(*args): return _pygamma.basis_sub_anchor_LS(*args)
    def which_sub_LS(*args): return _pygamma.basis_which_sub_LS(*args)
    def __eq__(*args): return _pygamma.basis___eq__(*args)
    def __ne__(*args): return _pygamma.basis___ne__(*args)
    def isDefaultBasis(*args): return _pygamma.basis_isDefaultBasis(*args)
    def refs(*args): return _pygamma.basis_refs(*args)
    def check(*args): return _pygamma.basis_check(*args)
    def write(*args): return _pygamma.basis_write(*args)
    def read(*args): return _pygamma.basis_read(*args)
    def TestBasis(*args): return _pygamma.basis_TestBasis(*args)
basis_swigregister = _pygamma.basis_swigregister
basis_swigregister(basis)
Hz = _pygamma.Hz
H1 = _pygamma.H1
Heff = _pygamma.Heff
SOpCmperror = _pygamma.SOpCmperror
Fpol = _pygamma.Fpol
Fa = _pygamma.Fa
Fb = _pygamma.Fb
Faxis = _pygamma.Faxis
Fpol_gen_new = _pygamma.Fpol_gen_new
query_isotope = _pygamma.query_isotope
query_offset = _pygamma.query_offset
Ixpuls = _pygamma.Ixpuls
Ixypuls = _pygamma.Ixypuls

prop = _pygamma.prop
prop_ip = _pygamma.prop_ip
class HSprop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HSprop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HSprop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_HSprop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_HSprop
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.HSprop___assign__(*args)
    def time(*args): return _pygamma.HSprop_time(*args)
    def length(*args): return _pygamma.HSprop_length(*args)
    def dim(*args): return _pygamma.HSprop_dim(*args)
    def Bs(*args): return _pygamma.HSprop_Bs(*args)
    def HS(*args): return _pygamma.HSprop_HS(*args)
    def LS(*args): return _pygamma.HSprop_LS(*args)
    def Op(*args): return _pygamma.HSprop_Op(*args)
    def H(*args): return _pygamma.HSprop_H(*args)
    def SetEBR(*args): return _pygamma.HSprop_SetEBR(*args)
    def SetBasis(*args): return _pygamma.HSprop_SetBasis(*args)
    def evolve(*args): return _pygamma.HSprop_evolve(*args)
    def __mul__(*args): return _pygamma.HSprop___mul__(*args)
    def __imul__(*args): return _pygamma.HSprop___imul__(*args)
    def __iand__(*args): return _pygamma.HSprop___iand__(*args)
    def sim_trans(*args): return _pygamma.HSprop_sim_trans(*args)
    def sim_trans_ip(*args): return _pygamma.HSprop_sim_trans_ip(*args)
    def Pow(*args): return _pygamma.HSprop_Pow(*args)
    def __eq__(*args): return _pygamma.HSprop___eq__(*args)
    def __ne__(*args): return _pygamma.HSprop___ne__(*args)
    def __lt__(*args): return _pygamma.HSprop___lt__(*args)
    def __gt__(*args): return _pygamma.HSprop___gt__(*args)
HSprop_swigregister = _pygamma.HSprop_swigregister
HSprop_swigregister(HSprop)
evolve_ip = _pygamma.evolve_ip

class spin_op(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_op, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spin_op, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_spin_op(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_spin_op
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.spin_op___assign__(*args)
    def __neg__(*args): return _pygamma.spin_op___neg__(*args)
    def __add__(*args): return _pygamma.spin_op___add__(*args)
    def __isub__(*args): return _pygamma.spin_op___isub__(*args)
    def __iadd__(*args): return _pygamma.spin_op___iadd__(*args)
    def __imul__(*args): return _pygamma.spin_op___imul__(*args)
    def __idiv__(*args): return _pygamma.spin_op___idiv__(*args)
    def exp(*args): return _pygamma.spin_op_exp(*args)
    def adjoint(*args): return _pygamma.spin_op_adjoint(*args)
    def trace(*args): return _pygamma.spin_op_trace(*args)
    def spins(*args): return _pygamma.spin_op_spins(*args)
    def refs(*args): return _pygamma.spin_op_refs(*args)
    def HS(*args): return _pygamma.spin_op_HS(*args)
    def status(*args): return _pygamma.spin_op_status(*args)
    def FaxisStruct(*args): return _pygamma.spin_op_FaxisStruct(*args)
spin_op_swigregister = _pygamma.spin_op_swigregister
spin_op_swigregister(spin_op)

PulSfatality = _pygamma.PulSfatality
Spul_axis = _pygamma.Spul_axis
Spul_U_axis = _pygamma.Spul_U_axis
qStatel = _pygamma.qStatel
PulSherror = _pygamma.PulSherror
PulShfatality = _pygamma.PulShfatality
Shpul_axis = _pygamma.Shpul_axis
Shpul_U_axis = _pygamma.Shpul_U_axis
class genoprep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, genoprep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, genoprep, name)
    __repr__ = _swig_repr
    __swig_setmethods__["RepMx"] = _pygamma.genoprep_RepMx_set
    __swig_getmethods__["RepMx"] = _pygamma.genoprep_RepMx_get
    if _newclass:RepMx = _swig_property(_pygamma.genoprep_RepMx_get, _pygamma.genoprep_RepMx_set)
    __swig_setmethods__["RepBs"] = _pygamma.genoprep_RepBs_set
    __swig_getmethods__["RepBs"] = _pygamma.genoprep_RepBs_get
    if _newclass:RepBs = _swig_property(_pygamma.genoprep_RepBs_get, _pygamma.genoprep_RepBs_set)
    __swig_setmethods__["RepPty"] = _pygamma.genoprep_RepPty_set
    __swig_getmethods__["RepPty"] = _pygamma.genoprep_RepPty_get
    if _newclass:RepPty = _swig_property(_pygamma.genoprep_RepPty_get, _pygamma.genoprep_RepPty_set)
    __swig_setmethods__["BSPrnt"] = _pygamma.genoprep_BSPrnt_set
    __swig_getmethods__["BSPrnt"] = _pygamma.genoprep_BSPrnt_get
    if _newclass:BSPrnt = _swig_property(_pygamma.genoprep_BSPrnt_get, _pygamma.genoprep_BSPrnt_set)
    def OpReperror(*args): return _pygamma.genoprep_OpReperror(*args)
    def OpRepfatal(*args): return _pygamma.genoprep_OpRepfatal(*args)
    def __init__(self, *args): 
        this = _pygamma.new_genoprep(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_genoprep
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.genoprep___assign__(*args)
    def OpRepCheck(*args): return _pygamma.genoprep_OpRepCheck(*args)
    def write(*args): return _pygamma.genoprep_write(*args)
    def read(*args): return _pygamma.genoprep_read(*args)
    def __eq__(*args): return _pygamma.genoprep___eq__(*args)
    def __ne__(*args): return _pygamma.genoprep___ne__(*args)
    def __lt__(*args): return _pygamma.genoprep___lt__(*args)
    def __gt__(*args): return _pygamma.genoprep___gt__(*args)
genoprep_swigregister = _pygamma.genoprep_swigregister
genoprep_swigregister(genoprep)
PulSerror = _pygamma.PulSerror
Sxpuls = _pygamma.Sxpuls
SxpulsB = _pygamma.SxpulsB
Sypuls = _pygamma.Sypuls
SypulsB = _pygamma.SypulsB
SxpulsB_U = _pygamma.SxpulsB_U
SypulsB_U = _pygamma.SypulsB_U
Sxypuls = _pygamma.Sxypuls
SxypulsB = _pygamma.SxypulsB
Sxypuls_U = _pygamma.Sxypuls_U
SxypulsB_U = _pygamma.SxypulsB_U
Spul_plane = _pygamma.Spul_plane
Spul_U_plane = _pygamma.Spul_U_plane
alphabeta = cvar.alphabeta
tref_labels = _pygamma.tref_labels
tran_types = _pygamma.tran_types
trev_labels = _pygamma.trev_labels
ev_select = _pygamma.ev_select
tr_select = _pygamma.tr_select
Shxpuls = _pygamma.Shxpuls
Shxpuls_U = _pygamma.Shxpuls_U
Shypuls = _pygamma.Shypuls
Shypuls_U = _pygamma.Shypuls_U
Shxypuls = _pygamma.Shxypuls
Shxypuls_U = _pygamma.Shxypuls_U
ShxpulsB = _pygamma.ShxpulsB
ShxpulsB_U = _pygamma.ShxpulsB_U
ShypulsB = _pygamma.ShypulsB
ShypulsB_U = _pygamma.ShypulsB_U
ShxypulsB = _pygamma.ShxypulsB
ShxypulsB_U = _pygamma.ShxypulsB_U
Shpul_plane = _pygamma.Shpul_plane
Shpul_U_plane = _pygamma.Shpul_U_plane
Prod_base_dec = _pygamma.Prod_base_dec

Rx_sp = _pygamma.Rx_sp
Ry_sp = _pygamma.Ry_sp
Rz_sp = _pygamma.Rz_sp
Raxis_sp = _pygamma.Raxis_sp
Rxy_sp = _pygamma.Rxy_sp
Ryz_sp = _pygamma.Ryz_sp
Rzx_sp = _pygamma.Rzx_sp
Rplane_sp = _pygamma.Rplane_sp
Rxyz_sp = _pygamma.Rxyz_sp
Rspace = _pygamma.Rspace
R_Euler_sp = _pygamma.R_Euler_sp
R_Euler_plane = _pygamma.R_Euler_plane
Ixy = _pygamma.Ixy
Fxy_sp = _pygamma.Fxy_sp
Fplane = _pygamma.Fplane
RotSpinOp = _pygamma.RotSpinOp
left = _pygamma.left
right = _pygamma.right
U_transform = _pygamma.U_transform
commutator = _pygamma.commutator
class super_op(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, super_op, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, super_op, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_super_op(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_super_op
    __del__ = lambda self : None;
    def __add__(*args): return _pygamma.super_op___add__(*args)
    def __iadd__(*args): return _pygamma.super_op___iadd__(*args)
    def __sub__(*args): return _pygamma.super_op___sub__(*args)
    def __isub__(*args): return _pygamma.super_op___isub__(*args)
    def __mul__(*args): return _pygamma.super_op___mul__(*args)
    def __iand__(*args): return _pygamma.super_op___iand__(*args)
    def __imul__(*args): return _pygamma.super_op___imul__(*args)
    def __idiv__(*args): return _pygamma.super_op___idiv__(*args)
    def exp(*args): return _pygamma.super_op_exp(*args)
    def set_EBR(*args): return _pygamma.super_op_set_EBR(*args)
    def set_HBR(*args): return _pygamma.super_op_set_HBR(*args)
    def set_DBR(*args): return _pygamma.super_op_set_DBR(*args)
    def LOp_Hbase(*args): return _pygamma.super_op_LOp_Hbase(*args)
    def LOp_base(*args): return _pygamma.super_op_LOp_base(*args)
    def SetHSBaseOf(*args): return _pygamma.super_op_SetHSBaseOf(*args)
    def HS(*args): return _pygamma.super_op_HS(*args)
    def size(*args): return _pygamma.super_op_size(*args)
    def dim(*args): return _pygamma.super_op_dim(*args)
    def LS(*args): return _pygamma.super_op_LS(*args)
    def eigenvalues(*args): return _pygamma.super_op_eigenvalues(*args)
    def Bs(*args): return _pygamma.super_op_Bs(*args)
    def get_basis(*args): return _pygamma.super_op_get_basis(*args)
    def put_basis(*args): return _pygamma.super_op_put_basis(*args)
    def LBs(*args): return _pygamma.super_op_LBs(*args)
    def get_Lbasis(*args): return _pygamma.super_op_get_Lbasis(*args)
    def put_Lbasis(*args): return _pygamma.super_op_put_Lbasis(*args)
    def __call__(*args): return _pygamma.super_op___call__(*args)
    def put(*args): return _pygamma.super_op_put(*args)
    def get(*args): return _pygamma.super_op_get(*args)
    def checkLOp(*args): return _pygamma.super_op_checkLOp(*args)
    def status(*args): return _pygamma.super_op_status(*args)
    def __eq__(*args): return _pygamma.super_op___eq__(*args)
    def below(*args): return _pygamma.super_op_below(*args)
    def write(*args): return _pygamma.super_op_write(*args)
    def read(*args): return _pygamma.super_op_read(*args)
super_op_swigregister = _pygamma.super_op_swigregister
super_op_swigregister(super_op)
GenericD = _pygamma.GenericD
detector = _pygamma.detector
Mxy = _pygamma.Mxy
detector_sp = _pygamma.detector_sp
Mxy_sp = _pygamma.Mxy_sp
Rx = _pygamma.Rx
Ry = _pygamma.Ry
Rxy = _pygamma.Rxy
Ryz = _pygamma.Ryz
Rzx = _pygamma.Rzx
Rplane = _pygamma.Rplane
Rxyz = _pygamma.Rxyz
R_Euler = _pygamma.R_Euler
Fxy = _pygamma.Fxy
Fp_sp = _pygamma.Fp_sp
Fm_sp = _pygamma.Fm_sp
Ie = _pygamma.Ie
Ix = _pygamma.Ix
Iy = _pygamma.Iy
Iz = _pygamma.Iz
Ip = _pygamma.Ip
Im = _pygamma.Im
Raxis = _pygamma.Raxis
d_commutator = _pygamma.d_commutator

class sys_dynamic(spin_system,coord_vec):
    __swig_setmethods__ = {}
    for _s in [spin_system,coord_vec]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sys_dynamic, name, value)
    __swig_getmethods__ = {}
    for _s in [spin_system,coord_vec]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sys_dynamic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_sys_dynamic(*args)
        try: self.this.append(this)
        except: self.this = this
    def __assign__(*args): return _pygamma.sys_dynamic___assign__(*args)
    __swig_destroy__ = _pygamma.delete_sys_dynamic
    __del__ = lambda self : None;
    def shifts(*args): return _pygamma.sys_dynamic_shifts(*args)
    def shift(*args): return _pygamma.sys_dynamic_shift(*args)
    def offsetShifts(*args): return _pygamma.sys_dynamic_offsetShifts(*args)
    def PPM(*args): return _pygamma.sys_dynamic_PPM(*args)
    def delz(*args): return _pygamma.sys_dynamic_delz(*args)
    def Ceta(*args): return _pygamma.sys_dynamic_Ceta(*args)
    def TC(*args): return _pygamma.sys_dynamic_TC(*args)
    def xiC_vector(*args): return _pygamma.sys_dynamic_xiC_vector(*args)
    def xiC(*args): return _pygamma.sys_dynamic_xiC(*args)
    def CSA(*args): return _pygamma.sys_dynamic_CSA(*args)
    def coords(*args): return _pygamma.sys_dynamic_coords(*args)
    def Coord(*args): return _pygamma.sys_dynamic_Coord(*args)
    def DCC(*args): return _pygamma.sys_dynamic_DCC(*args)
    def Ddelz(*args): return _pygamma.sys_dynamic_Ddelz(*args)
    def Deta(*args): return _pygamma.sys_dynamic_Deta(*args)
    def AD(*args): return _pygamma.sys_dynamic_AD(*args)
    def dipoles(*args): return _pygamma.sys_dynamic_dipoles(*args)
    def dipole(*args): return _pygamma.sys_dynamic_dipole(*args)
    def xiD_matrix(*args): return _pygamma.sys_dynamic_xiD_matrix(*args)
    def Dip(*args): return _pygamma.sys_dynamic_Dip(*args)
    def QCC(*args): return _pygamma.sys_dynamic_QCC(*args)
    def Qdelz(*args): return _pygamma.sys_dynamic_Qdelz(*args)
    def Qeta(*args): return _pygamma.sys_dynamic_Qeta(*args)
    def TQ(*args): return _pygamma.sys_dynamic_TQ(*args)
    def xiQ_vector(*args): return _pygamma.sys_dynamic_xiQ_vector(*args)
    def xiQ(*args): return _pygamma.sys_dynamic_xiQ(*args)
    def Quad(*args): return _pygamma.sys_dynamic_Quad(*args)
    def TR(*args): return _pygamma.sys_dynamic_TR(*args)
    def tauR(*args): return _pygamma.sys_dynamic_tauR(*args)
    def xiR_vector(*args): return _pygamma.sys_dynamic_xiR_vector(*args)
    def xiR(*args): return _pygamma.sys_dynamic_xiR(*args)
    def setCoords(*args): return _pygamma.sys_dynamic_setCoords(*args)
    def setDip(*args): return _pygamma.sys_dynamic_setDip(*args)
    def SetCSA(*args): return _pygamma.sys_dynamic_SetCSA(*args)
    def setQuad(*args): return _pygamma.sys_dynamic_setQuad(*args)
    def setRand(*args): return _pygamma.sys_dynamic_setRand(*args)
    def setTaus(*args): return _pygamma.sys_dynamic_setTaus(*args)
    def setKs(*args): return _pygamma.sys_dynamic_setKs(*args)
    def write(*args): return _pygamma.sys_dynamic_write(*args)
    def read(*args): return _pygamma.sys_dynamic_read(*args)
    def ask_read(*args): return _pygamma.sys_dynamic_ask_read(*args)
    def taus(*args): return _pygamma.sys_dynamic_taus(*args)
    def taux(*args): return _pygamma.sys_dynamic_taux(*args)
    def tauy(*args): return _pygamma.sys_dynamic_tauy(*args)
    def tauz(*args): return _pygamma.sys_dynamic_tauz(*args)
    def Kex_zero(*args): return _pygamma.sys_dynamic_Kex_zero(*args)
    def Kex(*args): return _pygamma.sys_dynamic_Kex(*args)
    def MExProcs(*args): return _pygamma.sys_dynamic_MExProcs(*args)
    def PtStrings(*args): return _pygamma.sys_dynamic_PtStrings(*args)
    def AQStrings(*args): return _pygamma.sys_dynamic_AQStrings(*args)
sys_dynamic_swigregister = _pygamma.sys_dynamic_swigregister
sys_dynamic_swigregister(sys_dynamic)

SigmaEq = _pygamma.SigmaEq
class densop(gen_op):
    __swig_setmethods__ = {}
    for _s in [gen_op]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, densop, name, value)
    __swig_getmethods__ = {}
    for _s in [gen_op]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, densop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_densop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_densop
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.densop___assign__(*args)
    def length(*args): return _pygamma.densop_length(*args)
    def SetTrace(*args): return _pygamma.densop_SetTrace(*args)
densop_swigregister = _pygamma.densop_swigregister
densop_swigregister(densop)
SigmaSS = _pygamma.SigmaSS

class LSprop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LSprop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LSprop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_LSprop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_LSprop
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.LSprop___assign__(*args)
    def time(*args): return _pygamma.LSprop_time(*args)
    def dim(*args): return _pygamma.LSprop_dim(*args)
    def HS(*args): return _pygamma.LSprop_HS(*args)
    def LS(*args): return _pygamma.LSprop_LS(*args)
    def LOp(*args): return _pygamma.LSprop_LOp(*args)
    def L(*args): return _pygamma.LSprop_L(*args)
    def length(*args): return _pygamma.LSprop_length(*args)
    def SetEBR(*args): return _pygamma.LSprop_SetEBR(*args)
    def SetBasis(*args): return _pygamma.LSprop_SetBasis(*args)
    def evolve(*args): return _pygamma.LSprop_evolve(*args)
    def __mul__(*args): return _pygamma.LSprop___mul__(*args)
    def __imul__(*args): return _pygamma.LSprop___imul__(*args)
    def __iand__(*args): return _pygamma.LSprop___iand__(*args)
LSprop_swigregister = _pygamma.LSprop_swigregister
LSprop_swigregister(LSprop)
R_prop = _pygamma.R_prop

UOrderMQC = _pygamma.UOrderMQC
invert_it = _pygamma.invert_it
LU_decomp = _pygamma.LU_decomp
LU_backsub = _pygamma.LU_backsub
LU_invert = _pygamma.LU_invert
class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _pygamma.StringVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _pygamma.StringVector___nonzero__(*args)
    def __len__(*args): return _pygamma.StringVector___len__(*args)
    def pop(*args): return _pygamma.StringVector_pop(*args)
    def __getslice__(*args): return _pygamma.StringVector___getslice__(*args)
    def __setslice__(*args): return _pygamma.StringVector___setslice__(*args)
    def __delslice__(*args): return _pygamma.StringVector___delslice__(*args)
    def __delitem__(*args): return _pygamma.StringVector___delitem__(*args)
    def __getitem__(*args): return _pygamma.StringVector___getitem__(*args)
    def __setitem__(*args): return _pygamma.StringVector___setitem__(*args)
    def append(*args): return _pygamma.StringVector_append(*args)
    def empty(*args): return _pygamma.StringVector_empty(*args)
    def size(*args): return _pygamma.StringVector_size(*args)
    def clear(*args): return _pygamma.StringVector_clear(*args)
    def swap(*args): return _pygamma.StringVector_swap(*args)
    def get_allocator(*args): return _pygamma.StringVector_get_allocator(*args)
    def begin(*args): return _pygamma.StringVector_begin(*args)
    def end(*args): return _pygamma.StringVector_end(*args)
    def rbegin(*args): return _pygamma.StringVector_rbegin(*args)
    def rend(*args): return _pygamma.StringVector_rend(*args)
    def pop_back(*args): return _pygamma.StringVector_pop_back(*args)
    def erase(*args): return _pygamma.StringVector_erase(*args)
    def __init__(self, *args): 
        this = _pygamma.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _pygamma.StringVector_push_back(*args)
    def front(*args): return _pygamma.StringVector_front(*args)
    def back(*args): return _pygamma.StringVector_back(*args)
    def assign(*args): return _pygamma.StringVector_assign(*args)
    def resize(*args): return _pygamma.StringVector_resize(*args)
    def insert(*args): return _pygamma.StringVector_insert(*args)
    def reserve(*args): return _pygamma.StringVector_reserve(*args)
    def capacity(*args): return _pygamma.StringVector_capacity(*args)
    __swig_destroy__ = _pygamma.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _pygamma.StringVector_swigregister
StringVector_swigregister(StringVector)
FIDx = _pygamma.FIDx
FIDrot = _pygamma.FIDrot
wf_labels = _pygamma.wf_labels
ev_labels = _pygamma.ev_labels
wavefunctions = _pygamma.wavefunctions
eigensystem = _pygamma.eigensystem
lsprint = _pygamma.lsprint
eigenvalues = _pygamma.eigenvalues
OrderMQC = _pygamma.OrderMQC
solve_it = _pygamma.solve_it

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _pygamma.IntVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _pygamma.IntVector___nonzero__(*args)
    def __len__(*args): return _pygamma.IntVector___len__(*args)
    def pop(*args): return _pygamma.IntVector_pop(*args)
    def __getslice__(*args): return _pygamma.IntVector___getslice__(*args)
    def __setslice__(*args): return _pygamma.IntVector___setslice__(*args)
    def __delslice__(*args): return _pygamma.IntVector___delslice__(*args)
    def __delitem__(*args): return _pygamma.IntVector___delitem__(*args)
    def __getitem__(*args): return _pygamma.IntVector___getitem__(*args)
    def __setitem__(*args): return _pygamma.IntVector___setitem__(*args)
    def append(*args): return _pygamma.IntVector_append(*args)
    def empty(*args): return _pygamma.IntVector_empty(*args)
    def size(*args): return _pygamma.IntVector_size(*args)
    def clear(*args): return _pygamma.IntVector_clear(*args)
    def swap(*args): return _pygamma.IntVector_swap(*args)
    def get_allocator(*args): return _pygamma.IntVector_get_allocator(*args)
    def begin(*args): return _pygamma.IntVector_begin(*args)
    def end(*args): return _pygamma.IntVector_end(*args)
    def rbegin(*args): return _pygamma.IntVector_rbegin(*args)
    def rend(*args): return _pygamma.IntVector_rend(*args)
    def pop_back(*args): return _pygamma.IntVector_pop_back(*args)
    def erase(*args): return _pygamma.IntVector_erase(*args)
    def __init__(self, *args): 
        this = _pygamma.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _pygamma.IntVector_push_back(*args)
    def front(*args): return _pygamma.IntVector_front(*args)
    def back(*args): return _pygamma.IntVector_back(*args)
    def assign(*args): return _pygamma.IntVector_assign(*args)
    def resize(*args): return _pygamma.IntVector_resize(*args)
    def insert(*args): return _pygamma.IntVector_insert(*args)
    def reserve(*args): return _pygamma.IntVector_reserve(*args)
    def capacity(*args): return _pygamma.IntVector_capacity(*args)
    __swig_destroy__ = _pygamma.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _pygamma.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _pygamma.DoubleVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _pygamma.DoubleVector___nonzero__(*args)
    def __len__(*args): return _pygamma.DoubleVector___len__(*args)
    def pop(*args): return _pygamma.DoubleVector_pop(*args)
    def __getslice__(*args): return _pygamma.DoubleVector___getslice__(*args)
    def __setslice__(*args): return _pygamma.DoubleVector___setslice__(*args)
    def __delslice__(*args): return _pygamma.DoubleVector___delslice__(*args)
    def __delitem__(*args): return _pygamma.DoubleVector___delitem__(*args)
    def __getitem__(*args): return _pygamma.DoubleVector___getitem__(*args)
    def __setitem__(*args): return _pygamma.DoubleVector___setitem__(*args)
    def append(*args): return _pygamma.DoubleVector_append(*args)
    def empty(*args): return _pygamma.DoubleVector_empty(*args)
    def size(*args): return _pygamma.DoubleVector_size(*args)
    def clear(*args): return _pygamma.DoubleVector_clear(*args)
    def swap(*args): return _pygamma.DoubleVector_swap(*args)
    def get_allocator(*args): return _pygamma.DoubleVector_get_allocator(*args)
    def begin(*args): return _pygamma.DoubleVector_begin(*args)
    def end(*args): return _pygamma.DoubleVector_end(*args)
    def rbegin(*args): return _pygamma.DoubleVector_rbegin(*args)
    def rend(*args): return _pygamma.DoubleVector_rend(*args)
    def pop_back(*args): return _pygamma.DoubleVector_pop_back(*args)
    def erase(*args): return _pygamma.DoubleVector_erase(*args)
    def __init__(self, *args): 
        this = _pygamma.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _pygamma.DoubleVector_push_back(*args)
    def front(*args): return _pygamma.DoubleVector_front(*args)
    def back(*args): return _pygamma.DoubleVector_back(*args)
    def assign(*args): return _pygamma.DoubleVector_assign(*args)
    def resize(*args): return _pygamma.DoubleVector_resize(*args)
    def insert(*args): return _pygamma.DoubleVector_insert(*args)
    def reserve(*args): return _pygamma.DoubleVector_reserve(*args)
    def capacity(*args): return _pygamma.DoubleVector_capacity(*args)
    __swig_destroy__ = _pygamma.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _pygamma.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class TTable1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TTable1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TTable1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_TTable1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_TTable1D
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.TTable1D___assign__(*args)
    def center(*args): return _pygamma.TTable1D_center(*args)
    def offset(*args): return _pygamma.TTable1D_offset(*args)
    def FRscale(*args): return _pygamma.TTable1D_FRscale(*args)
    def BC(*args): return _pygamma.TTable1D_BC(*args)
    def Iscale(*args): return _pygamma.TTable1D_Iscale(*args)
    def Iremove(*args): return _pygamma.TTable1D_Iremove(*args)
    def broaden(*args): return _pygamma.TTable1D_broaden(*args)
    def resolution(*args): return _pygamma.TTable1D_resolution(*args)
    def T(*args): return _pygamma.TTable1D_T(*args)
    def Ts(*args): return _pygamma.TTable1D_Ts(*args)
    def TCutoffs(*args): return _pygamma.TTable1D_TCutoffs(*args)
    def F(*args): return _pygamma.TTable1D_F(*args)
    def Fs(*args): return _pygamma.TTable1D_Fs(*args)
    def FD(*args): return _pygamma.TTable1D_FD(*args)
    def pcorrect(*args): return _pygamma.TTable1D_pcorrect(*args)
    def R2(*args): return _pygamma.TTable1D_R2(*args)
    def Fr(*args): return _pygamma.TTable1D_Fr(*args)
    def I(*args): return _pygamma.TTable1D_I(*args)
    def Tr(*args): return _pygamma.TTable1D_Tr(*args)
    def LineWidths(*args): return _pygamma.TTable1D_LineWidths(*args)
    def Intensities(*args): return _pygamma.TTable1D_Intensities(*args)
    def Phases(*args): return _pygamma.TTable1D_Phases(*args)
    def size(*args): return _pygamma.TTable1D_size(*args)
    def FRmax(*args): return _pygamma.TTable1D_FRmax(*args)
    def FRmin(*args): return _pygamma.TTable1D_FRmin(*args)
    def Tdmin(*args): return _pygamma.TTable1D_Tdmin(*args)
    def LWmax(*args): return _pygamma.TTable1D_LWmax(*args)
    def LWmin(*args): return _pygamma.TTable1D_LWmin(*args)
    def Imax(*args): return _pygamma.TTable1D_Imax(*args)
    def Noisemax(*args): return _pygamma.TTable1D_Noisemax(*args)
    def Sort(*args): return _pygamma.TTable1D_Sort(*args)
    def readPSet(*args): return _pygamma.TTable1D_readPSet(*args)
    def setType(*args): return _pygamma.TTable1D_setType(*args)
    def setSort(*args): return _pygamma.TTable1D_setSort(*args)
    def setConv(*args): return _pygamma.TTable1D_setConv(*args)
    def setIcut(*args): return _pygamma.TTable1D_setIcut(*args)
    def setInorm(*args): return _pygamma.TTable1D_setInorm(*args)
    def setSN(*args): return _pygamma.TTable1D_setSN(*args)
    def setHprint(*args): return _pygamma.TTable1D_setHprint(*args)
    def setRprint(*args): return _pygamma.TTable1D_setRprint(*args)
    def setLWprint(*args): return _pygamma.TTable1D_setLWprint(*args)
    def setT2print(*args): return _pygamma.TTable1D_setT2print(*args)
    def setPHprint(*args): return _pygamma.TTable1D_setPHprint(*args)
    def setFreqRev(*args): return _pygamma.TTable1D_setFreqRev(*args)
    def getType(*args): return _pygamma.TTable1D_getType(*args)
    def getSort(*args): return _pygamma.TTable1D_getSort(*args)
    def getConv(*args): return _pygamma.TTable1D_getConv(*args)
    def getIcut(*args): return _pygamma.TTable1D_getIcut(*args)
    def getInorm(*args): return _pygamma.TTable1D_getInorm(*args)
    def getSN(*args): return _pygamma.TTable1D_getSN(*args)
    def getHprint(*args): return _pygamma.TTable1D_getHprint(*args)
    def getRprint(*args): return _pygamma.TTable1D_getRprint(*args)
    def getLWprint(*args): return _pygamma.TTable1D_getLWprint(*args)
    def getT2print(*args): return _pygamma.TTable1D_getT2print(*args)
    def getPHprint(*args): return _pygamma.TTable1D_getPHprint(*args)
    def getFreqRev(*args): return _pygamma.TTable1D_getFreqRev(*args)
    def printStrings(*args): return _pygamma.TTable1D_printStrings(*args)
    def write(*args): return _pygamma.TTable1D_write(*args)
    def dbwrite_old(*args): return _pygamma.TTable1D_dbwrite_old(*args)
    def dbwrite(*args): return _pygamma.TTable1D_dbwrite(*args)
    def calc_spectra(*args): return _pygamma.TTable1D_calc_spectra(*args)
    def read(*args): return _pygamma.TTable1D_read(*args)
TTable1D_swigregister = _pygamma.TTable1D_swigregister
TTable1D_swigregister(TTable1D)

class acquire1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, acquire1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, acquire1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_acquire1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_acquire1D
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.acquire1D___assign__(*args)
    def L(*args): return _pygamma.acquire1D_L(*args)
    def D(*args): return _pygamma.acquire1D_D(*args)
    def TTable(*args): return _pygamma.acquire1D_TTable(*args)
    def Detector(*args): return _pygamma.acquire1D_Detector(*args)
    def T(*args): return _pygamma.acquire1D_T(*args)
    def F(*args): return _pygamma.acquire1D_F(*args)
    def FD(*args): return _pygamma.acquire1D_FD(*args)
    def table(*args): return _pygamma.acquire1D_table(*args)
    def table_snapshot(*args): return _pygamma.acquire1D_table_snapshot(*args)
    def offset(*args): return _pygamma.acquire1D_offset(*args)
    def FRscale(*args): return _pygamma.acquire1D_FRscale(*args)
    def Iscale(*args): return _pygamma.acquire1D_Iscale(*args)
    def broaden(*args): return _pygamma.acquire1D_broaden(*args)
    def resolution(*args): return _pygamma.acquire1D_resolution(*args)
    def pcorrect(*args): return _pygamma.acquire1D_pcorrect(*args)
    def Wmax(*args): return _pygamma.acquire1D_Wmax(*args)
    def LWmax(*args): return _pygamma.acquire1D_LWmax(*args)
    def setSort(*args): return _pygamma.acquire1D_setSort(*args)
    def setConv(*args): return _pygamma.acquire1D_setConv(*args)
    def ls(*args): return _pygamma.acquire1D_ls(*args)
    def size(*args): return _pygamma.acquire1D_size(*args)
    def full_size(*args): return _pygamma.acquire1D_full_size(*args)
    def transitions(*args): return _pygamma.acquire1D_transitions(*args)
    def write(*args): return _pygamma.acquire1D_write(*args)
    def read(*args): return _pygamma.acquire1D_read(*args)
acquire1D_swigregister = _pygamma.acquire1D_swigregister
acquire1D_swigregister(acquire1D)

class RBasic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RBasic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RBasic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_RBasic(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_RBasic
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.RBasic___assign__(*args)
    def spins(*args): return _pygamma.RBasic_spins(*args)
    def HS(*args): return _pygamma.RBasic_HS(*args)
    def T1(*args): return _pygamma.RBasic_T1(*args)
    def T2(*args): return _pygamma.RBasic_T2(*args)
    def R1(*args): return _pygamma.RBasic_R1(*args)
    def R2(*args): return _pygamma.RBasic_R2(*args)
    def LW(*args): return _pygamma.RBasic_LW(*args)
    def RB(*args): return _pygamma.RBasic_RB(*args)
    def T1s(*args): return _pygamma.RBasic_T1s(*args)
    def T2s(*args): return _pygamma.RBasic_T2s(*args)
    def R1s(*args): return _pygamma.RBasic_R1s(*args)
    def R2s(*args): return _pygamma.RBasic_R2s(*args)
    def LWs(*args): return _pygamma.RBasic_LWs(*args)
    def RBRates(*args): return _pygamma.RBasic_RBRates(*args)
    def SetSystem(*args): return _pygamma.RBasic_SetSystem(*args)
    def SetH0(*args): return _pygamma.RBasic_SetH0(*args)
    def SetDet(*args): return _pygamma.RBasic_SetDet(*args)
    def SetSigInf(*args): return _pygamma.RBasic_SetSigInf(*args)
    def R2Mx(*args): return _pygamma.RBasic_R2Mx(*args)
    def R2LOp(*args): return _pygamma.RBasic_R2LOp(*args)
    def R1LOp(*args): return _pygamma.RBasic_R1LOp(*args)
    def SigmaT1(*args): return _pygamma.RBasic_SigmaT1(*args)
    def SigmaT2(*args): return _pygamma.RBasic_SigmaT2(*args)
    def SigmaC(*args): return _pygamma.RBasic_SigmaC(*args)
    def SigmaCEq(*args): return _pygamma.RBasic_SigmaCEq(*args)
    def RC(*args): return _pygamma.RBasic_RC(*args)
    def HC(*args): return _pygamma.RBasic_HC(*args)
    def Sigma(*args): return _pygamma.RBasic_Sigma(*args)
    def ReadT2(*args): return _pygamma.RBasic_ReadT2(*args)
    def ReadT1(*args): return _pygamma.RBasic_ReadT1(*args)
    def ReadLW(*args): return _pygamma.RBasic_ReadLW(*args)
    def ReadR2(*args): return _pygamma.RBasic_ReadR2(*args)
    def ReadR1(*args): return _pygamma.RBasic_ReadR1(*args)
    def ReadPar(*args): return _pygamma.RBasic_ReadPar(*args)
    def ReadT2s(*args): return _pygamma.RBasic_ReadT2s(*args)
    def ReadT1s(*args): return _pygamma.RBasic_ReadT1s(*args)
    def ReadLWs(*args): return _pygamma.RBasic_ReadLWs(*args)
    def ReadR2s(*args): return _pygamma.RBasic_ReadR2s(*args)
    def ReadR1s(*args): return _pygamma.RBasic_ReadR1s(*args)
    def ReadPars(*args): return _pygamma.RBasic_ReadPars(*args)
    def read(*args): return _pygamma.RBasic_read(*args)
    def Evolve(*args): return _pygamma.RBasic_Evolve(*args)
    def FID(*args): return _pygamma.RBasic_FID(*args)
    def FzCoeffs(*args): return _pygamma.RBasic_FzCoeffs(*args)
RBasic_swigregister = _pygamma.RBasic_swigregister
RBasic_swigregister(RBasic)
Kex = _pygamma.Kex

class quatern(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, quatern, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, quatern, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_quatern(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_quatern
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.quatern___assign__(*args)
    def A(*args): return _pygamma.quatern_A(*args)
    def B(*args): return _pygamma.quatern_B(*args)
    def C(*args): return _pygamma.quatern_C(*args)
    def D(*args): return _pygamma.quatern_D(*args)
    def alpha(*args): return _pygamma.quatern_alpha(*args)
    def beta(*args): return _pygamma.quatern_beta(*args)
    def gamma(*args): return _pygamma.quatern_gamma(*args)
    def EA(*args): return _pygamma.quatern_EA(*args)
    def ABG(*args): return _pygamma.quatern_ABG(*args)
    def __mul__(*args): return _pygamma.quatern___mul__(*args)
    def __imul__(*args): return _pygamma.quatern___imul__(*args)
    def __iand__(*args): return _pygamma.quatern___iand__(*args)
    def composite(*args): return _pygamma.quatern_composite(*args)
    def RotMx(*args): return _pygamma.quatern_RotMx(*args)
    def RMx(*args): return _pygamma.quatern_RMx(*args)
    def norm(*args): return _pygamma.quatern_norm(*args)
    def inverse(*args): return _pygamma.quatern_inverse(*args)
    def __eq__(*args): return _pygamma.quatern___eq__(*args)
    def __ne__(*args): return _pygamma.quatern___ne__(*args)
    def __lt__(*args): return _pygamma.quatern___lt__(*args)
    def __gt__(*args): return _pygamma.quatern___gt__(*args)
    def param(*args): return _pygamma.quatern_param(*args)
    def PSetAdd(*args): return _pygamma.quatern_PSetAdd(*args)
    def write(*args): return _pygamma.quatern_write(*args)
    def read(*args): return _pygamma.quatern_read(*args)
    __swig_getmethods__["ASinPos"] = lambda x: _pygamma.quatern_ASinPos
    if _newclass:ASinPos = staticmethod(_pygamma.quatern_ASinPos)
    __swig_getmethods__["ACosPos"] = lambda x: _pygamma.quatern_ACosPos
    if _newclass:ACosPos = staticmethod(_pygamma.quatern_ACosPos)
    __swig_getmethods__["ATanPos"] = lambda x: _pygamma.quatern_ATanPos
    if _newclass:ATanPos = staticmethod(_pygamma.quatern_ATanPos)
    def ShowConversion(*args): return _pygamma.quatern_ShowConversion(*args)
    __swig_getmethods__["ValidRMx"] = lambda x: _pygamma.quatern_ValidRMx
    if _newclass:ValidRMx = staticmethod(_pygamma.quatern_ValidRMx)
quatern_swigregister = _pygamma.quatern_swigregister
quatern_swigregister(quatern)
quatern_ASinPos = _pygamma.quatern_ASinPos
quatern_ACosPos = _pygamma.quatern_ACosPos
quatern_ATanPos = _pygamma.quatern_ATanPos
quatern_ValidRMx = _pygamma.quatern_ValidRMx

class EAngles(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EAngles, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EAngles, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_EAngles(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_EAngles
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.EAngles___assign__(*args)
    def alpha(*args): return _pygamma.EAngles_alpha(*args)
    def beta(*args): return _pygamma.EAngles_beta(*args)
    def gamma(*args): return _pygamma.EAngles_gamma(*args)
    def __mul__(*args): return _pygamma.EAngles___mul__(*args)
    def __imul__(*args): return _pygamma.EAngles___imul__(*args)
    def __iand__(*args): return _pygamma.EAngles___iand__(*args)
    def composite(*args): return _pygamma.EAngles_composite(*args)
    def param(*args): return _pygamma.EAngles_param(*args)
    def PSetAdd(*args): return _pygamma.EAngles_PSetAdd(*args)
    def write(*args): return _pygamma.EAngles_write(*args)
    def read(*args): return _pygamma.EAngles_read(*args)
    __swig_getmethods__["SetCutoff"] = lambda x: _pygamma.EAngles_SetCutoff
    if _newclass:SetCutoff = staticmethod(_pygamma.EAngles_SetCutoff)
    def __eq__(*args): return _pygamma.EAngles___eq__(*args)
    def __ne__(*args): return _pygamma.EAngles___ne__(*args)
    def __lt__(*args): return _pygamma.EAngles___lt__(*args)
    def __gt__(*args): return _pygamma.EAngles___gt__(*args)
    def equal(*args): return _pygamma.EAngles_equal(*args)
    def inverse(*args): return _pygamma.EAngles_inverse(*args)
    def RMx(*args): return _pygamma.EAngles_RMx(*args)
    def Rmx(*args): return _pygamma.EAngles_Rmx(*args)
    def invRmx(*args): return _pygamma.EAngles_invRmx(*args)
EAngles_swigregister = _pygamma.EAngles_swigregister
EAngles_swigregister(EAngles)
composite = _pygamma.composite
EAngles_SetCutoff = _pygamma.EAngles_SetCutoff

class decomp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, decomp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, decomp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_decomp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_decomp
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.decomp___assign__(*args)
    def decompose(*args): return _pygamma.decomp_decompose(*args)
    def size(*args): return _pygamma.decomp_size(*args)
    def LS(*args): return _pygamma.decomp_LS(*args)
    def HS(*args): return _pygamma.decomp_HS(*args)
    def Names(*args): return _pygamma.decomp_Names(*args)
    def Name(*args): return _pygamma.decomp_Name(*args)
    def OpName(*args): return _pygamma.decomp_OpName(*args)
    def AltOpName(*args): return _pygamma.decomp_AltOpName(*args)
    def MaxOpNameLen(*args): return _pygamma.decomp_MaxOpNameLen(*args)
    def MaxOpAltNameLen(*args): return _pygamma.decomp_MaxOpAltNameLen(*args)
    def Coherence(*args): return _pygamma.decomp_Coherence(*args)
    def MaxCoherence(*args): return _pygamma.decomp_MaxCoherence(*args)
    def Op(*args): return _pygamma.decomp_Op(*args)
    def values(*args): return _pygamma.decomp_values(*args)
    def value(*args): return _pygamma.decomp_value(*args)
    def bcoefficient(*args): return _pygamma.decomp_bcoefficient(*args)
    def index(*args): return _pygamma.decomp_index(*args)
    def SortBySpins(*args): return _pygamma.decomp_SortBySpins(*args)
decomp_swigregister = _pygamma.decomp_swigregister
decomp_swigregister(decomp)

PB_dec = _pygamma.PB_dec
class PulWaveform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulWaveform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PulWaveform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_PulWaveform(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_PulWaveform
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.PulWaveform___assign__(*args)
    def name(*args): return _pygamma.PulWaveform_name(*args)
    def values(*args): return _pygamma.PulWaveform_values(*args)
    def lengths(*args): return _pygamma.PulWaveform_lengths(*args)
    def strength(*args): return _pygamma.PulWaveform_strength(*args)
    def phase(*args): return _pygamma.PulWaveform_phase(*args)
    def length(*args): return _pygamma.PulWaveform_length(*args)
    def value(*args): return _pygamma.PulWaveform_value(*args)
    def maxlength(*args): return _pygamma.PulWaveform_maxlength(*args)
    def minlength(*args): return _pygamma.PulWaveform_minlength(*args)
    def maxgamB1(*args): return _pygamma.PulWaveform_maxgamB1(*args)
    def mingamB1(*args): return _pygamma.PulWaveform_mingamB1(*args)
    def gamB1const(*args): return _pygamma.PulWaveform_gamB1const(*args)
    def phaseconst(*args): return _pygamma.PulWaveform_phaseconst(*args)
    def timeconst(*args): return _pygamma.PulWaveform_timeconst(*args)
    def steps(*args): return _pygamma.PulWaveform_steps(*args)
    def fullsteps(*args): return _pygamma.PulWaveform_fullsteps(*args)
    def WFs(*args): return _pygamma.PulWaveform_WFs(*args)
    def fullWFs(*args): return _pygamma.PulWaveform_fullWFs(*args)
    def sumlength(*args): return _pygamma.PulWaveform_sumlength(*args)
    def scalegB1(*args): return _pygamma.PulWaveform_scalegB1(*args)
    def getIdeal(*args): return _pygamma.PulWaveform_getIdeal(*args)
    def IvsT(*args): return _pygamma.PulWaveform_IvsT(*args)
    def PvsT(*args): return _pygamma.PulWaveform_PvsT(*args)
    def GP(*args): return _pygamma.PulWaveform_GP(*args)
    def FM(*args): return _pygamma.PulWaveform_FM(*args)
PulWaveform_swigregister = _pygamma.PulWaveform_swigregister
PulWaveform_swigregister(PulWaveform)

class PulComposite(PulWaveform):
    __swig_setmethods__ = {}
    for _s in [PulWaveform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulComposite, name, value)
    __swig_getmethods__ = {}
    for _s in [PulWaveform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PulComposite, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_PulComposite(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_PulComposite
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.PulComposite___assign__(*args)
    def GetH(*args): return _pygamma.PulComposite_GetH(*args)
    def L0(*args): return _pygamma.PulComposite_L0(*args)
    def GetL0(*args): return _pygamma.PulComposite_GetL0(*args)
    def Leff(*args): return _pygamma.PulComposite_Leff(*args)
    def GetLeff(*args): return _pygamma.PulComposite_GetLeff(*args)
    def GetU(*args): return _pygamma.PulComposite_GetU(*args)
    def GetUsum(*args): return _pygamma.PulComposite_GetUsum(*args)
    def GetUmult(*args): return _pygamma.PulComposite_GetUmult(*args)
    def channel(*args): return _pygamma.PulComposite_channel(*args)
    def FZ(*args): return _pygamma.PulComposite_FZ(*args)
    def ROp(*args): return _pygamma.PulComposite_ROp(*args)
    def Precision(*args): return _pygamma.PulComposite_Precision(*args)
    def scalegB1(*args): return _pygamma.PulComposite_scalegB1(*args)
    def setRelax(*args): return _pygamma.PulComposite_setRelax(*args)
    def FIDheader(*args): return _pygamma.PulComposite_FIDheader(*args)
    def FIDpoint(*args): return _pygamma.PulComposite_FIDpoint(*args)
    def FIDvalue(*args): return _pygamma.PulComposite_FIDvalue(*args)
    def FIDtell(*args): return _pygamma.PulComposite_FIDtell(*args)
    def FIDsync(*args): return _pygamma.PulComposite_FIDsync(*args)
    def FIDtest(*args): return _pygamma.PulComposite_FIDtest(*args)
    def FIDsynchWF(*args): return _pygamma.PulComposite_FIDsynchWF(*args)
    def FIDsynchST(*args): return _pygamma.PulComposite_FIDsynchST(*args)
    def FIDsynchFR(*args): return _pygamma.PulComposite_FIDsynchFR(*args)
    def FID(*args): return _pygamma.PulComposite_FID(*args)
    def FIDRsynchWF(*args): return _pygamma.PulComposite_FIDRsynchWF(*args)
    def FIDRsynchST(*args): return _pygamma.PulComposite_FIDRsynchST(*args)
    def FIDRsynchFR(*args): return _pygamma.PulComposite_FIDRsynchFR(*args)
    def FIDR(*args): return _pygamma.PulComposite_FIDR(*args)
PulComposite_swigregister = _pygamma.PulComposite_swigregister
PulComposite_swigregister(PulComposite)

class Pulse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pulse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pulse, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_Pulse(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_Pulse
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.Pulse___assign__(*args)
    def channel(*args): return _pygamma.Pulse_channel(*args)
    def angle(*args): return _pygamma.Pulse_angle(*args)
    def phase(*args): return _pygamma.Pulse_phase(*args)
    def offset(*args): return _pygamma.Pulse_offset(*args)
    def length(*args): return _pygamma.Pulse_length(*args)
    def strength(*args): return _pygamma.Pulse_strength(*args)
    def read(*args): return _pygamma.Pulse_read(*args)
    def ask_read(*args): return _pygamma.Pulse_ask_read(*args)
Pulse_swigregister = _pygamma.Pulse_swigregister
Pulse_swigregister(Pulse)

class Gpuldat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gpuldat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Gpuldat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["N"] = _pygamma.Gpuldat_N_set
    __swig_getmethods__["N"] = _pygamma.Gpuldat_N_get
    if _newclass:N = _swig_property(_pygamma.Gpuldat_N_get, _pygamma.Gpuldat_N_set)
    __swig_setmethods__["Wrf"] = _pygamma.Gpuldat_Wrf_set
    __swig_getmethods__["Wrf"] = _pygamma.Gpuldat_Wrf_get
    if _newclass:Wrf = _swig_property(_pygamma.Gpuldat_Wrf_get, _pygamma.Gpuldat_Wrf_set)
    __swig_setmethods__["Iso"] = _pygamma.Gpuldat_Iso_set
    __swig_getmethods__["Iso"] = _pygamma.Gpuldat_Iso_get
    if _newclass:Iso = _swig_property(_pygamma.Gpuldat_Iso_get, _pygamma.Gpuldat_Iso_set)
    __swig_setmethods__["gamB1"] = _pygamma.Gpuldat_gamB1_set
    __swig_getmethods__["gamB1"] = _pygamma.Gpuldat_gamB1_get
    if _newclass:gamB1 = _swig_property(_pygamma.Gpuldat_gamB1_get, _pygamma.Gpuldat_gamB1_set)
    __swig_setmethods__["tau"] = _pygamma.Gpuldat_tau_set
    __swig_getmethods__["tau"] = _pygamma.Gpuldat_tau_get
    if _newclass:tau = _swig_property(_pygamma.Gpuldat_tau_get, _pygamma.Gpuldat_tau_set)
    __swig_setmethods__["fact"] = _pygamma.Gpuldat_fact_set
    __swig_getmethods__["fact"] = _pygamma.Gpuldat_fact_get
    if _newclass:fact = _swig_property(_pygamma.Gpuldat_fact_get, _pygamma.Gpuldat_fact_set)
    __swig_setmethods__["phi"] = _pygamma.Gpuldat_phi_set
    __swig_getmethods__["phi"] = _pygamma.Gpuldat_phi_get
    if _newclass:phi = _swig_property(_pygamma.Gpuldat_phi_get, _pygamma.Gpuldat_phi_set)
    def __init__(self, *args): 
        this = _pygamma.new_Gpuldat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_Gpuldat
    __del__ = lambda self : None;
Gpuldat_swigregister = _pygamma.Gpuldat_swigregister
Gpuldat_swigregister(Gpuldat)

Gpulse_Hs = _pygamma.Gpulse_Hs
Gpulse_Us = _pygamma.Gpulse_Us
Gpulse_UX = _pygamma.Gpulse_UX
GNvect = _pygamma.GNvect
class SincPulDat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SincPulDat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SincPulDat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["N"] = _pygamma.SincPulDat_N_set
    __swig_getmethods__["N"] = _pygamma.SincPulDat_N_get
    if _newclass:N = _swig_property(_pygamma.SincPulDat_N_get, _pygamma.SincPulDat_N_set)
    __swig_setmethods__["Wrf"] = _pygamma.SincPulDat_Wrf_set
    __swig_getmethods__["Wrf"] = _pygamma.SincPulDat_Wrf_get
    if _newclass:Wrf = _swig_property(_pygamma.SincPulDat_Wrf_get, _pygamma.SincPulDat_Wrf_set)
    __swig_setmethods__["Iso"] = _pygamma.SincPulDat_Iso_set
    __swig_getmethods__["Iso"] = _pygamma.SincPulDat_Iso_get
    if _newclass:Iso = _swig_property(_pygamma.SincPulDat_Iso_get, _pygamma.SincPulDat_Iso_set)
    __swig_setmethods__["gamB1"] = _pygamma.SincPulDat_gamB1_set
    __swig_getmethods__["gamB1"] = _pygamma.SincPulDat_gamB1_get
    if _newclass:gamB1 = _swig_property(_pygamma.SincPulDat_gamB1_get, _pygamma.SincPulDat_gamB1_set)
    __swig_setmethods__["tau"] = _pygamma.SincPulDat_tau_set
    __swig_getmethods__["tau"] = _pygamma.SincPulDat_tau_get
    if _newclass:tau = _swig_property(_pygamma.SincPulDat_tau_get, _pygamma.SincPulDat_tau_set)
    __swig_setmethods__["node"] = _pygamma.SincPulDat_node_set
    __swig_getmethods__["node"] = _pygamma.SincPulDat_node_get
    if _newclass:node = _swig_property(_pygamma.SincPulDat_node_get, _pygamma.SincPulDat_node_set)
    __swig_setmethods__["phi"] = _pygamma.SincPulDat_phi_set
    __swig_getmethods__["phi"] = _pygamma.SincPulDat_phi_get
    if _newclass:phi = _swig_property(_pygamma.SincPulDat_phi_get, _pygamma.SincPulDat_phi_set)
    def __init__(self, *args): 
        this = _pygamma.new_SincPulDat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_SincPulDat
    __del__ = lambda self : None;
SincPulDat_swigregister = _pygamma.SincPulDat_swigregister
SincPulDat_swigregister(SincPulDat)
Gpulse_U = _pygamma.Gpulse_U
Gangle = _pygamma.Gangle
GgamB1 = _pygamma.GgamB1
Gtime = _pygamma.Gtime
Gvect = _pygamma.Gvect
GIntvec = _pygamma.GIntvec
Ghistogram = _pygamma.Ghistogram
ask_Gpulse = _pygamma.ask_Gpulse
read_Gpulse = _pygamma.read_Gpulse

SincPts = _pygamma.SincPts
SincIso = _pygamma.SincIso
SincWrf = _pygamma.SincWrf
SincPhi = _pygamma.SincPhi
SincZero = _pygamma.SincZero
SincPrep = _pygamma.SincPrep
class PulCycle(PulComposite):
    __swig_setmethods__ = {}
    for _s in [PulComposite]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulCycle, name, value)
    __swig_getmethods__ = {}
    for _s in [PulComposite]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PulCycle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_PulCycle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_PulCycle
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.PulCycle___assign__(*args)
    def GetCU(*args): return _pygamma.PulCycle_GetCU(*args)
    def GetCUsum(*args): return _pygamma.PulCycle_GetCUsum(*args)
    def GetCUmult(*args): return _pygamma.PulCycle_GetCUmult(*args)
    def GetCG(*args): return _pygamma.PulCycle_GetCG(*args)
    def GetCGsum(*args): return _pygamma.PulCycle_GetCGsum(*args)
    def GetCGmult(*args): return _pygamma.PulCycle_GetCGmult(*args)
    def WF_steps(*args): return _pygamma.PulCycle_WF_steps(*args)
    def name(*args): return _pygamma.PulCycle_name(*args)
    def WF_name(*args): return _pygamma.PulCycle_WF_name(*args)
    def values(*args): return _pygamma.PulCycle_values(*args)
    def WF_values(*args): return _pygamma.PulCycle_WF_values(*args)
    def length(*args): return _pygamma.PulCycle_length(*args)
    def WF_length(*args): return _pygamma.PulCycle_WF_length(*args)
    def value(*args): return _pygamma.PulCycle_value(*args)
    def phase(*args): return _pygamma.PulCycle_phase(*args)
    def steps(*args): return _pygamma.PulCycle_steps(*args)
    def cycles(*args): return _pygamma.PulCycle_cycles(*args)
    def fullcycles(*args): return _pygamma.PulCycle_fullcycles(*args)
    def scalegB1(*args): return _pygamma.PulCycle_scalegB1(*args)
    def IvsT(*args): return _pygamma.PulCycle_IvsT(*args)
    def PvsT(*args): return _pygamma.PulCycle_PvsT(*args)
    def GP(*args): return _pygamma.PulCycle_GP(*args)
    def FM(*args): return _pygamma.PulCycle_FM(*args)
    def FIDsync(*args): return _pygamma.PulCycle_FIDsync(*args)
    def FIDtest(*args): return _pygamma.PulCycle_FIDtest(*args)
    def FIDsynchCYC(*args): return _pygamma.PulCycle_FIDsynchCYC(*args)
    def FIDWFsynch(*args): return _pygamma.PulCycle_FIDWFsynch(*args)
    def FIDSTsynch(*args): return _pygamma.PulCycle_FIDSTsynch(*args)
    def FID(*args): return _pygamma.PulCycle_FID(*args)
    def FIDRsynchCYC(*args): return _pygamma.PulCycle_FIDRsynchCYC(*args)
    def FIDRWFsynch(*args): return _pygamma.PulCycle_FIDRWFsynch(*args)
    def FIDRSTsynch(*args): return _pygamma.PulCycle_FIDRSTsynch(*args)
    def FIDR(*args): return _pygamma.PulCycle_FIDR(*args)
PulCycle_swigregister = _pygamma.PulCycle_swigregister
PulCycle_swigregister(PulCycle)
SincPulseHs = _pygamma.SincPulseHs
SincPulseUs = _pygamma.SincPulseUs
SincPulseU = _pygamma.SincPulseU
SincNVect = _pygamma.SincNVect
SincVect = _pygamma.SincVect
SincIntVec = _pygamma.SincIntVec
SincSteps = _pygamma.SincSteps
SincStrength = _pygamma.SincStrength
SincSelectivity = _pygamma.SincSelectivity
SincPhase = _pygamma.SincPhase
ReadSinc = _pygamma.ReadSinc
SincHistogram = _pygamma.SincHistogram
SincNode = _pygamma.SincNode
SincTime = _pygamma.SincTime
SincGamB1 = _pygamma.SincGamB1
SincAngle = _pygamma.SincAngle
SincAsk = _pygamma.SincAsk

class MLEV(Pulse):
    __swig_setmethods__ = {}
    for _s in [Pulse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MLEV, name, value)
    __swig_getmethods__ = {}
    for _s in [Pulse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MLEV, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_MLEV(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_MLEV
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.MLEV___assign__(*args)
    def WF(*args): return _pygamma.MLEV_WF(*args)
    def WF_C180(*args): return _pygamma.MLEV_WF_C180(*args)
    def PCmp(*args): return _pygamma.MLEV_PCmp(*args)
    def PCmp_C180(*args): return _pygamma.MLEV_PCmp_C180(*args)
    def CycMLEV4(*args): return _pygamma.MLEV_CycMLEV4(*args)
    def CycMLEV8(*args): return _pygamma.MLEV_CycMLEV8(*args)
    def CycMLEV16(*args): return _pygamma.MLEV_CycMLEV16(*args)
    def read(*args): return _pygamma.MLEV_read(*args)
    def ask_read(*args): return _pygamma.MLEV_ask_read(*args)
MLEV_swigregister = _pygamma.MLEV_swigregister
MLEV_swigregister(MLEV)

class PulTrain(PulComposite):
    __swig_setmethods__ = {}
    for _s in [PulComposite]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulTrain, name, value)
    __swig_getmethods__ = {}
    for _s in [PulComposite]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PulTrain, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_PulTrain(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_PulTrain
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.PulTrain___assign__(*args)
    def GetU(*args): return _pygamma.PulTrain_GetU(*args)
    def FID(*args): return _pygamma.PulTrain_FID(*args)
    def FIDR(*args): return _pygamma.PulTrain_FIDR(*args)
PulTrain_swigregister = _pygamma.PulTrain_swigregister
PulTrain_swigregister(PulTrain)
CYC_MLEV4 = _pygamma.CYC_MLEV4
CYC_MLEV8 = _pygamma.CYC_MLEV8
CYC_MLEV16 = _pygamma.CYC_MLEV16

class PulSupCycle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulSupCycle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PulSupCycle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_PulSupCycle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_PulSupCycle
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.PulSupCycle___assign__(*args)
    def steps(*args): return _pygamma.PulSupCycle_steps(*args)
    def name(*args): return _pygamma.PulSupCycle_name(*args)
    def values(*args): return _pygamma.PulSupCycle_values(*args)
    def value(*args): return _pygamma.PulSupCycle_value(*args)
    def phase(*args): return _pygamma.PulSupCycle_phase(*args)
PulSupCycle_swigregister = _pygamma.PulSupCycle_swigregister
PulSupCycle_swigregister(PulSupCycle)

CYC_CHIRP95 = _pygamma.CYC_CHIRP95
class GARP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GARP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GARP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_GARP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_GARP
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.GARP___assign__(*args)
    def channel(*args): return _pygamma.GARP_channel(*args)
    def strength(*args): return _pygamma.GARP_strength(*args)
    def phase(*args): return _pygamma.GARP_phase(*args)
    def offset(*args): return _pygamma.GARP_offset(*args)
    def WF(*args): return _pygamma.GARP_WF(*args)
    def WF_GARP(*args): return _pygamma.GARP_WF_GARP(*args)
    def PCmpGARP(*args): return _pygamma.GARP_PCmpGARP(*args)
    def PCmp(*args): return _pygamma.GARP_PCmp(*args)
    def CycGARP1(*args): return _pygamma.GARP_CycGARP1(*args)
    def read(*args): return _pygamma.GARP_read(*args)
    def ask_read(*args): return _pygamma.GARP_ask_read(*args)
GARP_swigregister = _pygamma.GARP_swigregister
GARP_swigregister(GARP)
WF_CHIRP95 = _pygamma.WF_CHIRP95
CP_CHIRP95 = _pygamma.CP_CHIRP95

class WALTZ(Pulse):
    __swig_setmethods__ = {}
    for _s in [Pulse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WALTZ, name, value)
    __swig_getmethods__ = {}
    for _s in [Pulse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WALTZ, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_WALTZ(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_WALTZ
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.WALTZ___assign__(*args)
    def WF(*args): return _pygamma.WALTZ_WF(*args)
    def WF_WALTZR(*args): return _pygamma.WALTZ_WF_WALTZR(*args)
    def WF_WALTZK(*args): return _pygamma.WALTZ_WF_WALTZK(*args)
    def WF_WALTZQ(*args): return _pygamma.WALTZ_WF_WALTZQ(*args)
    def PCmp(*args): return _pygamma.WALTZ_PCmp(*args)
    def PCmpWALTZR(*args): return _pygamma.WALTZ_PCmpWALTZR(*args)
    def PCmpWALTZK(*args): return _pygamma.WALTZ_PCmpWALTZK(*args)
    def PCmpWALTZQ(*args): return _pygamma.WALTZ_PCmpWALTZQ(*args)
    def CycWALTZ4(*args): return _pygamma.WALTZ_CycWALTZ4(*args)
    def CycWALTZ8(*args): return _pygamma.WALTZ_CycWALTZ8(*args)
    def CycWALTZ16(*args): return _pygamma.WALTZ_CycWALTZ16(*args)
    def read(*args): return _pygamma.WALTZ_read(*args)
    def ask_read(*args): return _pygamma.WALTZ_ask_read(*args)
WALTZ_swigregister = _pygamma.WALTZ_swigregister
WALTZ_swigregister(WALTZ)

class PulTrainSCyc(PulSupCycle):
    __swig_setmethods__ = {}
    for _s in [PulSupCycle]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulTrainSCyc, name, value)
    __swig_getmethods__ = {}
    for _s in [PulSupCycle]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PulTrainSCyc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_PulTrainSCyc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_PulTrainSCyc
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.PulTrainSCyc___assign__(*args)
    def GetU(*args): return _pygamma.PulTrainSCyc_GetU(*args)
    def GetUsum(*args): return _pygamma.PulTrainSCyc_GetUsum(*args)
    def GetUmult(*args): return _pygamma.PulTrainSCyc_GetUmult(*args)
    def SetGs(*args): return _pygamma.PulTrainSCyc_SetGs(*args)
    def GetG(*args): return _pygamma.PulTrainSCyc_GetG(*args)
    def length(*args): return _pygamma.PulTrainSCyc_length(*args)
    def steps(*args): return _pygamma.PulTrainSCyc_steps(*args)
    def fullSCYCs(*args): return _pygamma.PulTrainSCyc_fullSCYCs(*args)
    def fullsteps(*args): return _pygamma.PulTrainSCyc_fullsteps(*args)
PulTrainSCyc_swigregister = _pygamma.PulTrainSCyc_swigregister
PulTrainSCyc_swigregister(PulTrainSCyc)
CYC_WALTZ4 = _pygamma.CYC_WALTZ4
CYC_WALTZ8 = _pygamma.CYC_WALTZ8

class DANTE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DANTE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DANTE, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_DANTE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_DANTE
    __del__ = lambda self : None;
    def __assign__(*args): return _pygamma.DANTE___assign__(*args)
    def steps(*args): return _pygamma.DANTE_steps(*args)
    def channel(*args): return _pygamma.DANTE_channel(*args)
    def dlength(*args): return _pygamma.DANTE_dlength(*args)
    def strength(*args): return _pygamma.DANTE_strength(*args)
    def plength(*args): return _pygamma.DANTE_plength(*args)
    def angle(*args): return _pygamma.DANTE_angle(*args)
    def phase(*args): return _pygamma.DANTE_phase(*args)
    def offset(*args): return _pygamma.DANTE_offset(*args)
    def length(*args): return _pygamma.DANTE_length(*args)
    def WF(*args): return _pygamma.DANTE_WF(*args)
    def CP(*args): return _pygamma.DANTE_CP(*args)
    def PT(*args): return _pygamma.DANTE_PT(*args)
    def read(*args): return _pygamma.DANTE_read(*args)
    def ask_read(*args): return _pygamma.DANTE_ask_read(*args)
DANTE_swigregister = _pygamma.DANTE_swigregister
DANTE_swigregister(DANTE)

set_DANTE = _pygamma.set_DANTE
detect = _pygamma.detect
Ixpulse_Us = _pygamma.Ixpulse_Us
Iypulse_Us = _pygamma.Iypulse_Us
Gxpulse_U = _pygamma.Gxpulse_U
Gypulse_U = _pygamma.Gypulse_U
SincPulseXUs = _pygamma.SincPulseXUs
SincPulseYUs = _pygamma.SincPulseYUs
class sys_gradz(spin_system):
    __swig_setmethods__ = {}
    for _s in [spin_system]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sys_gradz, name, value)
    __swig_getmethods__ = {}
    for _s in [spin_system]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sys_gradz, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_sys_gradz(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_sys_gradz
    __del__ = lambda self : None;
    def NSS(*args): return _pygamma.sys_gradz_NSS(*args)
    def BoGrad(*args): return _pygamma.sys_gradz_BoGrad(*args)
    def GradVal(*args): return _pygamma.sys_gradz_GradVal(*args)
    def SysLen(*args): return _pygamma.sys_gradz_SysLen(*args)
    def SysDist(*args): return _pygamma.sys_gradz_SysDist(*args)
    def SubSys(*args): return _pygamma.sys_gradz_SubSys(*args)
    def SubSysShift(*args): return _pygamma.sys_gradz_SubSysShift(*args)
    def SubSysPPM(*args): return _pygamma.sys_gradz_SubSysPPM(*args)
    def PSetAdd(*args): return _pygamma.sys_gradz_PSetAdd(*args)
    def setSubSys(*args): return _pygamma.sys_gradz_setSubSys(*args)
    def setBoGrad(*args): return _pygamma.sys_gradz_setBoGrad(*args)
    def setLength(*args): return _pygamma.sys_gradz_setLength(*args)
    def __assign__(*args): return _pygamma.sys_gradz___assign__(*args)
    def write(*args): return _pygamma.sys_gradz_write(*args)
    def read(*args): return _pygamma.sys_gradz_read(*args)
    def ask_read(*args): return _pygamma.sys_gradz_ask_read(*args)
sys_gradz_swigregister = _pygamma.sys_gradz_swigregister
sys_gradz_swigregister(sys_gradz)
WF_DANTE = _pygamma.WF_DANTE
CP_DANTE = _pygamma.CP_DANTE
PT_DANTE = _pygamma.PT_DANTE
UDANTE = _pygamma.UDANTE
ask_DANTE = _pygamma.ask_DANTE
acquire = _pygamma.acquire
FID = _pygamma.FID
acquire1DT = _pygamma.acquire1DT
Hzgrad = _pygamma.Hzgrad
Props = _pygamma.Props
evolve = _pygamma.evolve
Sxpuls_U = _pygamma.Sxpuls_U
Sypuls_U = _pygamma.Sypuls_U

J_error = _pygamma.J_error
J_fatality = _pygamma.J_fatality
J_LZ_iso = _pygamma.J_LZ_iso
J_LZ_aniso = _pygamma.J_LZ_aniso
R1_RR_max = _pygamma.R1_RR_max
T1_RR_max = _pygamma.T1_RR_max
R2_RR_max = _pygamma.R2_RR_max
T2_RR_max = _pygamma.T2_RR_max
RlxNMRfatal = _pygamma.RlxNMRfatal
Rodiag_2 = _pygamma.Rodiag_2
Rdiag_2 = _pygamma.Rdiag_2
R_4s = _pygamma.R_4s
R_3s = _pygamma.R_3s
R_2s = _pygamma.R_2s
LOp_sigma = _pygamma.LOp_sigma
Rrf_4s = _pygamma.Rrf_4s
Rrf_3s = _pygamma.Rrf_3s
Rrf_2s = _pygamma.Rrf_2s
Rrfijkds = _pygamma.Rrfijkds
Rrfkijds = _pygamma.Rrfkijds
sigma_ss = _pygamma.sigma_ss
sigma_ss_it = _pygamma.sigma_ss_it
class WBRExch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WBRExch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WBRExch, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_WBRExch(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_WBRExch
    __del__ = lambda self : None;
    def Level(*args): return _pygamma.WBRExch_Level(*args)
    def Type(*args): return _pygamma.WBRExch_Type(*args)
    def Dip(*args): return _pygamma.WBRExch_Dip(*args)
    def DipDFS(*args): return _pygamma.WBRExch_DipDFS(*args)
    def DipCSA(*args): return _pygamma.WBRExch_DipCSA(*args)
    def DipCSADFS(*args): return _pygamma.WBRExch_DipCSADFS(*args)
    def DipQuad(*args): return _pygamma.WBRExch_DipQuad(*args)
    def DipQuadDFS(*args): return _pygamma.WBRExch_DipQuadDFS(*args)
    def CSA(*args): return _pygamma.WBRExch_CSA(*args)
    def CSADFS(*args): return _pygamma.WBRExch_CSADFS(*args)
    def CSADip(*args): return _pygamma.WBRExch_CSADip(*args)
    def CSADipDFS(*args): return _pygamma.WBRExch_CSADipDFS(*args)
    def CSAQuad(*args): return _pygamma.WBRExch_CSAQuad(*args)
    def CSAQuadDFS(*args): return _pygamma.WBRExch_CSAQuadDFS(*args)
    def Quad(*args): return _pygamma.WBRExch_Quad(*args)
    def QuadDFS(*args): return _pygamma.WBRExch_QuadDFS(*args)
    def QuadDip(*args): return _pygamma.WBRExch_QuadDip(*args)
    def QuadDipDFSQuad(*args): return _pygamma.WBRExch_QuadDipDFSQuad(*args)
    def QuadCSA(*args): return _pygamma.WBRExch_QuadCSA(*args)
    def QuadCSADFS(*args): return _pygamma.WBRExch_QuadCSADFS(*args)
    def LWhh(*args): return _pygamma.WBRExch_LWhh(*args)
    def SetZero(*args): return _pygamma.WBRExch_SetZero(*args)
    def SetLevel(*args): return _pygamma.WBRExch_SetLevel(*args)
    def SetType(*args): return _pygamma.WBRExch_SetType(*args)
    def SetDip(*args): return _pygamma.WBRExch_SetDip(*args)
    def SetSA(*args): return _pygamma.WBRExch_SetSA(*args)
    def SetQuad(*args): return _pygamma.WBRExch_SetQuad(*args)
    def SetDCX(*args): return _pygamma.WBRExch_SetDCX(*args)
    def SetDQX(*args): return _pygamma.WBRExch_SetDQX(*args)
    def SetQCX(*args): return _pygamma.WBRExch_SetQCX(*args)
    def __assign__(*args): return _pygamma.WBRExch___assign__(*args)
    def prepQuad(*args): return _pygamma.WBRExch_prepQuad(*args)
    def read(*args): return _pygamma.WBRExch_read(*args)
    def ask_read(*args): return _pygamma.WBRExch_ask_read(*args)
    def ask(*args): return _pygamma.WBRExch_ask(*args)
    def REX(*args): return _pygamma.WBRExch_REX(*args)
    def REXrf(*args): return _pygamma.WBRExch_REXrf(*args)
WBRExch_swigregister = _pygamma.WBRExch_swigregister
WBRExch_swigregister(WBRExch)
RCCrf = _pygamma.RCCrf
RCCds = _pygamma.RCCds
RCCrfds = _pygamma.RCCrfds
R1_CC = _pygamma.R1_CC
R1_CC_max = _pygamma.R1_CC_max
T1_CC = _pygamma.T1_CC
T1_CC_max = _pygamma.T1_CC_max
R2_CC = _pygamma.R2_CC
R2_CC_max = _pygamma.R2_CC_max
T2_CC = _pygamma.T2_CC
T2_CC_max = _pygamma.T2_CC_max
LWhh_CC = _pygamma.LWhh_CC
LWhh_CC_max = _pygamma.LWhh_CC_max
xiCSA = _pygamma.xiCSA
CSA = _pygamma.CSA
RDCX = _pygamma.RDCX
RDC = _pygamma.RDC
RCD = _pygamma.RCD
RCDrf = _pygamma.RCDrf
RDD_Jgen = _pygamma.RDD_Jgen
RDDrf = _pygamma.RDDrf
RDDds = _pygamma.RDDds
RDDrfds = _pygamma.RDDrfds
xiD = _pygamma.xiD
DCC = _pygamma.DCC
R1_DD = _pygamma.R1_DD
R1_DD_max = _pygamma.R1_DD_max
T1_DD = _pygamma.T1_DD
T1_DD_max = _pygamma.T1_DD_max
R2_DD = _pygamma.R2_DD
R2_DD_max = _pygamma.R2_DD_max
T2_DD = _pygamma.T2_DD
T2_DD_max = _pygamma.T2_DD_max
LWhh_DD = _pygamma.LWhh_DD
LWhh_DD_max = _pygamma.LWhh_DD_max
NOE = _pygamma.NOE
R2_DDMQT = _pygamma.R2_DDMQT
Rex = _pygamma.Rex
J_gen = _pygamma.J_gen
J_gen_shft = _pygamma.J_gen_shft
tausD = _pygamma.tausD
chiD = _pygamma.chiD
taust = _pygamma.taust
chit = _pygamma.chit
Jcoeffs = _pygamma.Jcoeffs
J_red_shft = _pygamma.J_red_shft
J_reduced = _pygamma.J_reduced
Q_red_shft = _pygamma.Q_red_shft
Q_reduced = _pygamma.Q_reduced
RQCX = _pygamma.RQCX
RCQrf = _pygamma.RCQrf
RQQrf = _pygamma.RQQrf
RQQds = _pygamma.RQQds
RQQrfds = _pygamma.RQQrfds
R1_QQ = _pygamma.R1_QQ
R1_QQ_max = _pygamma.R1_QQ_max
T1_QQ = _pygamma.T1_QQ
T1_QQ_max = _pygamma.T1_QQ_max
R2_QQ = _pygamma.R2_QQ
R2_QQ_max = _pygamma.R2_QQ_max
T2_QQ = _pygamma.T2_QQ
T2_QQ_max = _pygamma.T2_QQ_max
LWhh_QQ = _pygamma.LWhh_QQ
LWhh_QQ_max = _pygamma.LWhh_QQ_max
xiQ = _pygamma.xiQ
RRRx = _pygamma.RRRx
RRR = _pygamma.RRR
Rij_rdm = _pygamma.Rij_rdm
Rmumu_rdm = _pygamma.Rmumu_rdm
R1_RR = _pygamma.R1_RR
T1_RR = _pygamma.T1_RR
R2_RR = _pygamma.R2_RR
T2_RR = _pygamma.T2_RR
LWhh_RR = _pygamma.LWhh_RR
LWhh_RR_max = _pygamma.LWhh_RR_max
xiRDM = _pygamma.xiRDM
RlxNMRerror = _pygamma.RlxNMRerror
R_4 = _pygamma.R_4
R_3 = _pygamma.R_3
R_2 = _pygamma.R_2
R_0 = _pygamma.R_0
R_AC_0 = _pygamma.R_AC_0
R_CC_0 = _pygamma.R_CC_0
R_CC_0_trans = _pygamma.R_CC_0_trans
R_AC_1 = _pygamma.R_AC_1
R_CC_1 = _pygamma.R_CC_1
Rmumu = _pygamma.Rmumu
Rmu1mu2 = _pygamma.Rmu1mu2
Rijkl = _pygamma.Rijkl
Rij = _pygamma.Rij
Rijk = _pygamma.Rijk
Rkij = _pygamma.Rkij
Rmumuds = _pygamma.Rmumuds
Rijklds = _pygamma.Rijklds
Rijds = _pygamma.Rijds
Rijkds = _pygamma.Rijkds
Rkijds = _pygamma.Rkijds
Rrf_4 = _pygamma.Rrf_4
Rrf_3 = _pygamma.Rrf_3
Rrf_2 = _pygamma.Rrf_2
Rrf_0 = _pygamma.Rrf_0
Rrfmumu = _pygamma.Rrfmumu
Rrfijkl = _pygamma.Rrfijkl
Rrfij = _pygamma.Rrfij
Rrfijk = _pygamma.Rrfijk
Rrfkij = _pygamma.Rrfkij
Rrfijklds = _pygamma.Rrfijklds
Rrfijds = _pygamma.Rrfijds
REXijkl = _pygamma.REXijkl
REXijk = _pygamma.REXijk
REXkij = _pygamma.REXkij
REXij = _pygamma.REXij
REXmumu = _pygamma.REXmumu
REXrfijkl = _pygamma.REXrfijkl
REXrfijk = _pygamma.REXrfijk
REXrfkij = _pygamma.REXrfkij
REXrfij = _pygamma.REXrfij
REXrfmumu = _pygamma.REXrfmumu
REX_4 = _pygamma.REX_4
REX_3 = _pygamma.REX_3
REXrf_4 = _pygamma.REXrf_4
REXrf_3 = _pygamma.REXrf_3

Rel_clean = _pygamma.Rel_clean
class ExchProc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExchProc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExchProc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["KRate"] = _pygamma.ExchProc_KRate_set
    __swig_getmethods__["KRate"] = _pygamma.ExchProc_KRate_get
    if _newclass:KRate = _swig_property(_pygamma.ExchProc_KRate_get, _pygamma.ExchProc_KRate_set)
    __swig_setmethods__["LHSComps"] = _pygamma.ExchProc_LHSComps_set
    __swig_getmethods__["LHSComps"] = _pygamma.ExchProc_LHSComps_get
    if _newclass:LHSComps = _swig_property(_pygamma.ExchProc_LHSComps_get, _pygamma.ExchProc_LHSComps_set)
    __swig_setmethods__["RHSComps"] = _pygamma.ExchProc_RHSComps_set
    __swig_getmethods__["RHSComps"] = _pygamma.ExchProc_RHSComps_get
    if _newclass:RHSComps = _swig_property(_pygamma.ExchProc_RHSComps_get, _pygamma.ExchProc_RHSComps_set)
    __swig_setmethods__["SpinMaps"] = _pygamma.ExchProc_SpinMaps_set
    __swig_getmethods__["SpinMaps"] = _pygamma.ExchProc_SpinMaps_get
    if _newclass:SpinMaps = _swig_property(_pygamma.ExchProc_SpinMaps_get, _pygamma.ExchProc_SpinMaps_set)
    def XPerror(*args): return _pygamma.ExchProc_XPerror(*args)
    def XPfatal(*args): return _pygamma.ExchProc_XPfatal(*args)
    def getExch(*args): return _pygamma.ExchProc_getExch(*args)
    def parseExch(*args): return _pygamma.ExchProc_parseExch(*args)
    def getComps(*args): return _pygamma.ExchProc_getComps(*args)
    def getRate(*args): return _pygamma.ExchProc_getRate(*args)
    def getMappings(*args): return _pygamma.ExchProc_getMappings(*args)
    def getXP(*args): return _pygamma.ExchProc_getXP(*args)
    def setXP(*args): return _pygamma.ExchProc_setXP(*args)
    def CheckLHS(*args): return _pygamma.ExchProc_CheckLHS(*args)
    def CheckRHS(*args): return _pygamma.ExchProc_CheckRHS(*args)
    def __assign__(*args): return _pygamma.ExchProc___assign__(*args)
    __swig_destroy__ = _pygamma.delete_ExchProc
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _pygamma.new_ExchProc(*args)
        try: self.this.append(this)
        except: self.this = this
    def intra_default(*args): return _pygamma.ExchProc_intra_default(*args)
    def Kex(*args): return _pygamma.ExchProc_Kex(*args)
    def LHSComp(*args): return _pygamma.ExchProc_LHSComp(*args)
    def RHSComp(*args): return _pygamma.ExchProc_RHSComp(*args)
    def NCompsLHS(*args): return _pygamma.ExchProc_NCompsLHS(*args)
    def NCompsRHS(*args): return _pygamma.ExchProc_NCompsRHS(*args)
    def mixes(*args): return _pygamma.ExchProc_mixes(*args)
    def CompInLHS(*args): return _pygamma.ExchProc_CompInLHS(*args)
    def CompInRHS(*args): return _pygamma.ExchProc_CompInRHS(*args)
    def involves(*args): return _pygamma.ExchProc_involves(*args)
    def NSpinMaps(*args): return _pygamma.ExchProc_NSpinMaps(*args)
    def SMap(*args): return _pygamma.ExchProc_SMap(*args)
    def add_pair(*args): return _pygamma.ExchProc_add_pair(*args)
    def mapped(*args): return _pygamma.ExchProc_mapped(*args)
    def mapping(*args): return _pygamma.ExchProc_mapping(*args)
    def read(*args): return _pygamma.ExchProc_read(*args)
    __swig_getmethods__["Label"] = lambda x: _pygamma.ExchProc_Label
    if _newclass:Label = staticmethod(_pygamma.ExchProc_Label)
    def LHSStr(*args): return _pygamma.ExchProc_LHSStr(*args)
    def RHSStr(*args): return _pygamma.ExchProc_RHSStr(*args)
    def SpinMapStrs(*args): return _pygamma.ExchProc_SpinMapStrs(*args)
    def lsprint(*args): return _pygamma.ExchProc_lsprint(*args)
ExchProc_swigregister = _pygamma.ExchProc_swigregister
ExchProc_swigregister(ExchProc)
RDDel = _pygamma.RDDel
RSSel = _pygamma.RSSel
RDSel = _pygamma.RDSel
RSDel = _pygamma.RSDel
RRRel = _pygamma.RRRel
RQQel = _pygamma.RQQel
RQSel = _pygamma.RQSel
RSQel = _pygamma.RSQel
RQDel = _pygamma.RQDel
RDQel = _pygamma.RDQel
Rijkl_el = _pygamma.Rijkl_el
Rij_el = _pygamma.Rij_el
Rijk_el = _pygamma.Rijk_el
Rkij_el = _pygamma.Rkij_el
Rel_12 = _pygamma.Rel_12
Rel_12_condense = _pygamma.Rel_12_condense
Spin_labels = _pygamma.Spin_labels
W_labels = _pygamma.W_labels
Elem_labels = _pygamma.Elem_labels
Rel = _pygamma.Rel
sort = _pygamma.sort
ExchProc_Label = _pygamma.ExchProc_Label

class multi_sys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, multi_sys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, multi_sys, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_multi_sys(*args)
        try: self.this.append(this)
        except: self.this = this
    def __assign__(*args): return _pygamma.multi_sys___assign__(*args)
    __swig_destroy__ = _pygamma.delete_multi_sys
    __del__ = lambda self : None;
    def name(*args): return _pygamma.multi_sys_name(*args)
    def pop(*args): return _pygamma.multi_sys_pop(*args)
    def popmin(*args): return _pygamma.multi_sys_popmin(*args)
    def popmax(*args): return _pygamma.multi_sys_popmax(*args)
    def NComps(*args): return _pygamma.multi_sys_NComps(*args)
    def Comp(*args): return _pygamma.multi_sys_Comp(*args)
    def AddComp(*args): return _pygamma.multi_sys_AddComp(*args)
    def CheckComp(*args): return _pygamma.multi_sys_CheckComp(*args)
    def NExProcs(*args): return _pygamma.multi_sys_NExProcs(*args)
    def ExProc(*args): return _pygamma.multi_sys_ExProc(*args)
    def Kex(*args): return _pygamma.multi_sys_Kex(*args)
    def NCompsLHS(*args): return _pygamma.multi_sys_NCompsLHS(*args)
    def NCompsRHS(*args): return _pygamma.multi_sys_NCompsRHS(*args)
    def homonuclear(*args): return _pygamma.multi_sys_homonuclear(*args)
    def heteronuclear(*args): return _pygamma.multi_sys_heteronuclear(*args)
    def HS(*args): return _pygamma.multi_sys_HS(*args)
    def LS(*args): return _pygamma.multi_sys_LS(*args)
    def HSs(*args): return _pygamma.multi_sys_HSs(*args)
    def LSs(*args): return _pygamma.multi_sys_LSs(*args)
    def symbol(*args): return _pygamma.multi_sys_symbol(*args)
    def Omega(*args): return _pygamma.multi_sys_Omega(*args)
    def write(*args): return _pygamma.multi_sys_write(*args)
    def read(*args): return _pygamma.multi_sys_read(*args)
    def ask_read(*args): return _pygamma.multi_sys_ask_read(*args)
    def SpinMapStrs(*args): return _pygamma.multi_sys_SpinMapStrs(*args)
    def LHSStrs(*args): return _pygamma.multi_sys_LHSStrs(*args)
    def RHSStrs(*args): return _pygamma.multi_sys_RHSStrs(*args)
    def EXPStrs(*args): return _pygamma.multi_sys_EXPStrs(*args)
multi_sys_swigregister = _pygamma.multi_sys_swigregister
multi_sys_swigregister(multi_sys)

D_basis = _pygamma.D_basis
qStateLS = _pygamma.qStateLS
LS_qState_bra = _pygamma.LS_qState_bra
LS_qState_ket = _pygamma.LS_qState_ket
Lo = _pygamma.Lo
U_LS = _pygamma.U_LS
Uinv_LS = _pygamma.Uinv_LS
Op_Ebase = _pygamma.Op_Ebase
Xm = _pygamma.Xm
Xnmpdblk = _pygamma.Xnmpdblk
Xnmpblk = _pygamma.Xnmpblk
XXnm = _pygamma.XXnm
class SpinMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpinMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpinMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sub1"] = _pygamma.SpinMap_sub1_set
    __swig_getmethods__["sub1"] = _pygamma.SpinMap_sub1_get
    if _newclass:sub1 = _swig_property(_pygamma.SpinMap_sub1_get, _pygamma.SpinMap_sub1_set)
    __swig_setmethods__["sp1"] = _pygamma.SpinMap_sp1_set
    __swig_getmethods__["sp1"] = _pygamma.SpinMap_sp1_get
    if _newclass:sp1 = _swig_property(_pygamma.SpinMap_sp1_get, _pygamma.SpinMap_sp1_set)
    __swig_setmethods__["sub2"] = _pygamma.SpinMap_sub2_set
    __swig_getmethods__["sub2"] = _pygamma.SpinMap_sub2_get
    if _newclass:sub2 = _swig_property(_pygamma.SpinMap_sub2_get, _pygamma.SpinMap_sub2_set)
    __swig_setmethods__["sp2"] = _pygamma.SpinMap_sp2_set
    __swig_getmethods__["sp2"] = _pygamma.SpinMap_sp2_get
    if _newclass:sp2 = _swig_property(_pygamma.SpinMap_sp2_get, _pygamma.SpinMap_sp2_set)
    def SMfatal(*args): return _pygamma.SpinMap_SMfatal(*args)
    def SMerror(*args): return _pygamma.SpinMap_SMerror(*args)
    def getSMStr(*args): return _pygamma.SpinMap_getSMStr(*args)
    def getSM(*args): return _pygamma.SpinMap_getSM(*args)
    def setSM(*args): return _pygamma.SpinMap_setSM(*args)
    def Check(*args): return _pygamma.SpinMap_Check(*args)
    def __init__(self, *args): 
        this = _pygamma.new_SpinMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def __assign__(*args): return _pygamma.SpinMap___assign__(*args)
    __swig_destroy__ = _pygamma.delete_SpinMap
    __del__ = lambda self : None;
    def Sub1(*args): return _pygamma.SpinMap_Sub1(*args)
    def Sub2(*args): return _pygamma.SpinMap_Sub2(*args)
    def Spin1(*args): return _pygamma.SpinMap_Spin1(*args)
    def Spin2(*args): return _pygamma.SpinMap_Spin2(*args)
    def read(*args): return _pygamma.SpinMap_read(*args)
    def lsprint(*args): return _pygamma.SpinMap_lsprint(*args)
SpinMap_swigregister = _pygamma.SpinMap_swigregister
SpinMap_swigregister(SpinMap)
multize = _pygamma.multize
Fx = _pygamma.Fx
Fy = _pygamma.Fy
Fz = _pygamma.Fz
Fe = _pygamma.Fe
Fm = _pygamma.Fm
Fp = _pygamma.Fp
Rz = _pygamma.Rz
Ho = _pygamma.Ho
Hcs = _pygamma.Hcs
HJ = _pygamma.HJ
Hcs_lab = _pygamma.Hcs_lab
Iypuls = _pygamma.Iypuls
Ixpuls_U = _pygamma.Ixpuls_U
Iypuls_U = _pygamma.Iypuls_U
Ixypuls_U = _pygamma.Ixypuls_U
sigma_eq = _pygamma.sigma_eq
Hsuper = _pygamma.Hsuper
RQQ = _pygamma.RQQ
RCC = _pygamma.RCC
RDD = _pygamma.RDD
RCQ = _pygamma.RCQ
RQC = _pygamma.RQC
Xnm = _pygamma.Xnm
Xnmp = _pygamma.Xnmp



