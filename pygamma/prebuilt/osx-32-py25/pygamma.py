# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _pygamma
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pygamma.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _pygamma.PySwigIterator_value(*args)
    def incr(*args): return _pygamma.PySwigIterator_incr(*args)
    def decr(*args): return _pygamma.PySwigIterator_decr(*args)
    def distance(*args): return _pygamma.PySwigIterator_distance(*args)
    def equal(*args): return _pygamma.PySwigIterator_equal(*args)
    def copy(*args): return _pygamma.PySwigIterator_copy(*args)
    def next(*args): return _pygamma.PySwigIterator_next(*args)
    def previous(*args): return _pygamma.PySwigIterator_previous(*args)
    def advance(*args): return _pygamma.PySwigIterator_advance(*args)
    def __eq__(*args): return _pygamma.PySwigIterator___eq__(*args)
    def __ne__(*args): return _pygamma.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _pygamma.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _pygamma.PySwigIterator___isub__(*args)
    def __add__(*args): return _pygamma.PySwigIterator___add__(*args)
    def __sub__(*args): return _pygamma.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _pygamma.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class ParameterSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_ParameterSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_ParameterSet
    __del__ = lambda self : None;
ParameterSet_swigregister = _pygamma.ParameterSet_swigregister
ParameterSet_swigregister(ParameterSet)
cvar = _pygamma.cvar
GamSParInit = cvar.GamSParInit
GamIntVecInit = cvar.GamIntVecInit

class SinglePar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SinglePar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SinglePar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_SinglePar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_SinglePar
    __del__ = lambda self : None;
    def SPerror(*args): return _pygamma.SinglePar_SPerror(*args)
    def SPfatality(*args): return _pygamma.SinglePar_SPfatality(*args)
    def setCoord(*args): return _pygamma.SinglePar_setCoord(*args)
    def data(*args): return _pygamma.SinglePar_data(*args)
    def type(*args): return _pygamma.SinglePar_type(*args)
    def name(*args): return _pygamma.SinglePar_name(*args)
    def state(*args): return _pygamma.SinglePar_state(*args)
    def GetNS(*args): return _pygamma.SinglePar_GetNS(*args)
    def parse(*args): return _pygamma.SinglePar_parse(*args)
    def printStrings(*args): return _pygamma.SinglePar_printStrings(*args)
    def __eq__(*args): return _pygamma.SinglePar___eq__(*args)
    def __ne__(*args): return _pygamma.SinglePar___ne__(*args)
    def __lt__(*args): return _pygamma.SinglePar___lt__(*args)
    def __gt__(*args): return _pygamma.SinglePar___gt__(*args)
SinglePar_swigregister = _pygamma.SinglePar_swigregister
SinglePar_swigregister(SinglePar)

class Isotope(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Isotope, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Isotope, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_Isotope(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_Isotope
    __del__ = lambda self : None;
    def qn(*args): return _pygamma.Isotope_qn(*args)
    def HS(*args): return _pygamma.Isotope_HS(*args)
    def momentum(*args): return _pygamma.Isotope_momentum(*args)
    def symbol(*args): return _pygamma.Isotope_symbol(*args)
    def name(*args): return _pygamma.Isotope_name(*args)
    def element(*args): return _pygamma.Isotope_element(*args)
    def number(*args): return _pygamma.Isotope_number(*args)
    def mass(*args): return _pygamma.Isotope_mass(*args)
    def weight(*args): return _pygamma.Isotope_weight(*args)
    def gamma(*args): return _pygamma.Isotope_gamma(*args)
    def receptivity(*args): return _pygamma.Isotope_receptivity(*args)
    def relative_frequency(*args): return _pygamma.Isotope_relative_frequency(*args)
    def electron(*args): return _pygamma.Isotope_electron(*args)
    def read(*args): return _pygamma.Isotope_read(*args)
    def printStrings(*args): return _pygamma.Isotope_printStrings(*args)
    def seek(*args): return _pygamma.Isotope_seek(*args)
    def exists(*args): return _pygamma.Isotope_exists(*args)
    __swig_getmethods__["known"] = lambda x: _pygamma.Isotope_known
    if _newclass:known = staticmethod(_pygamma.Isotope_known)
    __swig_getmethods__["size"] = lambda x: _pygamma.Isotope_size
    if _newclass:size = staticmethod(_pygamma.Isotope_size)
    __swig_getmethods__["PrintListStrings"] = lambda x: _pygamma.Isotope_PrintListStrings
    if _newclass:PrintListStrings = staticmethod(_pygamma.Isotope_PrintListStrings)
    __swig_getmethods__["AddIsotope"] = lambda x: _pygamma.Isotope_AddIsotope
    if _newclass:AddIsotope = staticmethod(_pygamma.Isotope_AddIsotope)
    def __eq__(*args): return _pygamma.Isotope___eq__(*args)
    def __ne__(*args): return _pygamma.Isotope___ne__(*args)
    def __lt__(*args): return _pygamma.Isotope___lt__(*args)
    def __gt__(*args): return _pygamma.Isotope___gt__(*args)
    def nepair(*args): return _pygamma.Isotope_nepair(*args)
    def enpair(*args): return _pygamma.Isotope_enpair(*args)
    def eepair(*args): return _pygamma.Isotope_eepair(*args)
    def nnpair(*args): return _pygamma.Isotope_nnpair(*args)
Isotope_swigregister = _pygamma.Isotope_swigregister
Isotope_swigregister(Isotope)
Isotope_known = _pygamma.Isotope_known
Isotope_size = _pygamma.Isotope_size
Isotope_PrintListStrings = _pygamma.Isotope_PrintListStrings
Isotope_AddIsotope = _pygamma.Isotope_AddIsotope

enable_blockdiag = _pygamma.enable_blockdiag
disable_blockdiag = _pygamma.disable_blockdiag
class matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_matrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_matrix
    __del__ = lambda self : None;
    def __call__(*args): return _pygamma.matrix___call__(*args)
    def elem(*args): return _pygamma.matrix_elem(*args)
    def get(*args): return _pygamma.matrix_get(*args)
    def getRe(*args): return _pygamma.matrix_getRe(*args)
    def getIm(*args): return _pygamma.matrix_getIm(*args)
    def put(*args): return _pygamma.matrix_put(*args)
    def put_h(*args): return _pygamma.matrix_put_h(*args)
    def get_block(*args): return _pygamma.matrix_get_block(*args)
    def put_block(*args): return _pygamma.matrix_put_block(*args)
    def stored_hermitian(*args): return _pygamma.matrix_stored_hermitian(*args)
    def check_hermitian(*args): return _pygamma.matrix_check_hermitian(*args)
    def set_hermitian(*args): return _pygamma.matrix_set_hermitian(*args)
    def test_hermitian(*args): return _pygamma.matrix_test_hermitian(*args)
    def stored_type(*args): return _pygamma.matrix_stored_type(*args)
    def test_type(*args): return _pygamma.matrix_test_type(*args)
    def set_type(*args): return _pygamma.matrix_set_type(*args)
    def check_type(*args): return _pygamma.matrix_check_type(*args)
    def mxtype(*args): return _pygamma.matrix_mxtype(*args)
    def cols(*args): return _pygamma.matrix_cols(*args)
    def rows(*args): return _pygamma.matrix_rows(*args)
    def refs(*args): return _pygamma.matrix_refs(*args)
    def pts(*args): return _pygamma.matrix_pts(*args)
    def is_symmetric(*args): return _pygamma.matrix_is_symmetric(*args)
    def is_hermitian(*args): return _pygamma.matrix_is_hermitian(*args)
    def is_unitary(*args): return _pygamma.matrix_is_unitary(*args)
    def is_real(*args): return _pygamma.matrix_is_real(*args)
    def is_imaginary(*args): return _pygamma.matrix_is_imaginary(*args)
    def is_complex(*args): return _pygamma.matrix_is_complex(*args)
    def is_zero(*args): return _pygamma.matrix_is_zero(*args)
    def is_diagonal(*args): return _pygamma.matrix_is_diagonal(*args)
    def is_square(*args): return _pygamma.matrix_is_square(*args)
    def __add__(*args): return _pygamma.matrix___add__(*args)
    def __sub__(*args): return _pygamma.matrix___sub__(*args)
    def __mul__(*args): return _pygamma.matrix___mul__(*args)
    def __div__(*args): return _pygamma.matrix___div__(*args)
    def __iadd__(*args): return _pygamma.matrix___iadd__(*args)
    def __isub__(*args): return _pygamma.matrix___isub__(*args)
    def __imul__(*args): return _pygamma.matrix___imul__(*args)
    def __idiv__(*args): return _pygamma.matrix___idiv__(*args)
    def __neg__(*args): return _pygamma.matrix___neg__(*args)
    def Re(*args): return _pygamma.matrix_Re(*args)
    def Im(*args): return _pygamma.matrix_Im(*args)
    def conj(*args): return _pygamma.matrix_conj(*args)
    def transpose(*args): return _pygamma.matrix_transpose(*args)
    def adjoint(*args): return _pygamma.matrix_adjoint(*args)
    def exp(*args): return _pygamma.matrix_exp(*args)
    def swaprows(*args): return _pygamma.matrix_swaprows(*args)
    def swapcols(*args): return _pygamma.matrix_swapcols(*args)
    def permute(*args): return _pygamma.matrix_permute(*args)
    def maxRe(*args): return _pygamma.matrix_maxRe(*args)
    def maxIm(*args): return _pygamma.matrix_maxIm(*args)
    def maxZ(*args): return _pygamma.matrix_maxZ(*args)
    def minRe(*args): return _pygamma.matrix_minRe(*args)
    def minIm(*args): return _pygamma.matrix_minIm(*args)
    def minZ(*args): return _pygamma.matrix_minZ(*args)
    def trace(*args): return _pygamma.matrix_trace(*args)
    def det(*args): return _pygamma.matrix_det(*args)
    def FFT(*args): return _pygamma.matrix_FFT(*args)
    def IFFT(*args): return _pygamma.matrix_IFFT(*args)
    __swig_getmethods__["Header"] = lambda x: _pygamma.matrix_Header
    if _newclass:Header = staticmethod(_pygamma.matrix_Header)
    __swig_getmethods__["PrintRI"] = lambda x: _pygamma.matrix_PrintRI
    if _newclass:PrintRI = staticmethod(_pygamma.matrix_PrintRI)
    __swig_getmethods__["PrintAll"] = lambda x: _pygamma.matrix_PrintAll
    if _newclass:PrintAll = staticmethod(_pygamma.matrix_PrintAll)
    __swig_getmethods__["PictDim"] = lambda x: _pygamma.matrix_PictDim
    if _newclass:PictDim = staticmethod(_pygamma.matrix_PictDim)
    __swig_getmethods__["PrintVal"] = lambda x: _pygamma.matrix_PrintVal
    if _newclass:PrintVal = staticmethod(_pygamma.matrix_PrintVal)
    __swig_getmethods__["PrintCols"] = lambda x: _pygamma.matrix_PrintCols
    if _newclass:PrintCols = staticmethod(_pygamma.matrix_PrintCols)
    __swig_getmethods__["PrintRows"] = lambda x: _pygamma.matrix_PrintRows
    if _newclass:PrintRows = staticmethod(_pygamma.matrix_PrintRows)
    def ask(*args): return _pygamma.matrix_ask(*args)
    def resize(*args): return _pygamma.matrix_resize(*args)
    def diagonal_form(*args): return _pygamma.matrix_diagonal_form(*args)
    def same_reference_as(*args): return _pygamma.matrix_same_reference_as(*args)
    def status(*args): return _pygamma.matrix_status(*args)
    def BlockDiag(*args): return _pygamma.matrix_BlockDiag(*args)
    def SymTriDiag(*args): return _pygamma.matrix_SymTriDiag(*args)
    def HermTriDiag(*args): return _pygamma.matrix_HermTriDiag(*args)
    def SymDiag(*args): return _pygamma.matrix_SymDiag(*args)
    def Diagonalize(*args): return _pygamma.matrix_Diagonalize(*args)
    def TestEigenSystem(*args): return _pygamma.matrix_TestEigenSystem(*args)
    def TestTransform(*args): return _pygamma.matrix_TestTransform(*args)
    def ColumnNorms(*args): return _pygamma.matrix_ColumnNorms(*args)
    def TestIdentity(*args): return _pygamma.matrix_TestIdentity(*args)
    def TestUnitary(*args): return _pygamma.matrix_TestUnitary(*args)
    def TestUTransform(*args): return _pygamma.matrix_TestUTransform(*args)
    def __eq__(*args): return _pygamma.matrix___eq__(*args)
    def __ne__(*args): return _pygamma.matrix___ne__(*args)
    def __lt__(*args): return _pygamma.matrix___lt__(*args)
    def __gt__(*args): return _pygamma.matrix___gt__(*args)
matrix_swigregister = _pygamma.matrix_swigregister
matrix_swigregister(matrix)
matrix_Header = _pygamma.matrix_Header
matrix_PrintRI = _pygamma.matrix_PrintRI
matrix_PrintAll = _pygamma.matrix_PrintAll
matrix_PictDim = _pygamma.matrix_PictDim
matrix_PrintVal = _pygamma.matrix_PrintVal
matrix_PrintCols = _pygamma.matrix_PrintCols
matrix_PrintRows = _pygamma.matrix_PrintRows

class row_vector(matrix):
    __swig_setmethods__ = {}
    for _s in [matrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, row_vector, name, value)
    __swig_getmethods__ = {}
    for _s in [matrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, row_vector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_row_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_row_vector
    __del__ = lambda self : None;
    def __call__(*args): return _pygamma.row_vector___call__(*args)
    def get(*args): return _pygamma.row_vector_get(*args)
    def getRe(*args): return _pygamma.row_vector_getRe(*args)
    def getIm(*args): return _pygamma.row_vector_getIm(*args)
    def put(*args): return _pygamma.row_vector_put(*args)
    def elements(*args): return _pygamma.row_vector_elements(*args)
    def size(*args): return _pygamma.row_vector_size(*args)
    def __add__(*args): return _pygamma.row_vector___add__(*args)
    def __sub__(*args): return _pygamma.row_vector___sub__(*args)
    def __mul__(*args): return _pygamma.row_vector___mul__(*args)
    def __iadd__(*args): return _pygamma.row_vector___iadd__(*args)
    def __isub__(*args): return _pygamma.row_vector___isub__(*args)
    def __imul__(*args): return _pygamma.row_vector___imul__(*args)
    def __idiv__(*args): return _pygamma.row_vector___idiv__(*args)
    def differential(*args): return _pygamma.row_vector_differential(*args)
    def norm(*args): return _pygamma.row_vector_norm(*args)
    def maxRe(*args): return _pygamma.row_vector_maxRe(*args)
    def maxIm(*args): return _pygamma.row_vector_maxIm(*args)
    def maxZ(*args): return _pygamma.row_vector_maxZ(*args)
    def minRe(*args): return _pygamma.row_vector_minRe(*args)
    def minIm(*args): return _pygamma.row_vector_minIm(*args)
    def minZ(*args): return _pygamma.row_vector_minZ(*args)
    def max(*args): return _pygamma.row_vector_max(*args)
    def min(*args): return _pygamma.row_vector_min(*args)
    def flip(*args): return _pygamma.row_vector_flip(*args)
    def sum(*args): return _pygamma.row_vector_sum(*args)
    def zero(*args): return _pygamma.row_vector_zero(*args)
    def sort(*args): return _pygamma.row_vector_sort(*args)
    def product(*args): return _pygamma.row_vector_product(*args)
    def scalar_product(*args): return _pygamma.row_vector_scalar_product(*args)
    def hdrString(*args): return _pygamma.row_vector_hdrString(*args)
    SMIS = _pygamma.row_vector_SMIS
    SIEMENS = _pygamma.row_vector_SIEMENS
    SIEMENS_NOHDR = _pygamma.row_vector_SIEMENS_NOHDR
    PLAIN_ASCII = _pygamma.row_vector_PLAIN_ASCII
    ASCII_MT_DEG = _pygamma.row_vector_ASCII_MT_DEG
    SVS = _pygamma.row_vector_SVS
    __swig_getmethods__["read_pulse"] = lambda x: _pygamma.row_vector_read_pulse
    if _newclass:read_pulse = staticmethod(_pygamma.row_vector_read_pulse)
    def ask(*args): return _pygamma.row_vector_ask(*args)
row_vector_swigregister = _pygamma.row_vector_swigregister
row_vector_swigregister(row_vector)
row_vector_read_pulse = _pygamma.row_vector_read_pulse

class col_vector(matrix):
    __swig_setmethods__ = {}
    for _s in [matrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, col_vector, name, value)
    __swig_getmethods__ = {}
    for _s in [matrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, col_vector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_col_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_col_vector
    __del__ = lambda self : None;
    def __call__(*args): return _pygamma.col_vector___call__(*args)
    def get(*args): return _pygamma.col_vector_get(*args)
    def getRe(*args): return _pygamma.col_vector_getRe(*args)
    def getIm(*args): return _pygamma.col_vector_getIm(*args)
    def put(*args): return _pygamma.col_vector_put(*args)
    def elements(*args): return _pygamma.col_vector_elements(*args)
    def size(*args): return _pygamma.col_vector_size(*args)
    def __add__(*args): return _pygamma.col_vector___add__(*args)
    def __sub__(*args): return _pygamma.col_vector___sub__(*args)
    def __mul__(*args): return _pygamma.col_vector___mul__(*args)
    def __iadd__(*args): return _pygamma.col_vector___iadd__(*args)
    def __isub__(*args): return _pygamma.col_vector___isub__(*args)
    def __imul__(*args): return _pygamma.col_vector___imul__(*args)
    def __idiv__(*args): return _pygamma.col_vector___idiv__(*args)
    def adjoint(*args): return _pygamma.col_vector_adjoint(*args)
    def transpose(*args): return _pygamma.col_vector_transpose(*args)
    def trace(*args): return _pygamma.col_vector_trace(*args)
    def differential(*args): return _pygamma.col_vector_differential(*args)
    def norm(*args): return _pygamma.col_vector_norm(*args)
    def maxRe(*args): return _pygamma.col_vector_maxRe(*args)
    def maxIm(*args): return _pygamma.col_vector_maxIm(*args)
    def maxZ(*args): return _pygamma.col_vector_maxZ(*args)
    def minRe(*args): return _pygamma.col_vector_minRe(*args)
    def minIm(*args): return _pygamma.col_vector_minIm(*args)
    def minZ(*args): return _pygamma.col_vector_minZ(*args)
    def max(*args): return _pygamma.col_vector_max(*args)
    def min(*args): return _pygamma.col_vector_min(*args)
    def flip(*args): return _pygamma.col_vector_flip(*args)
    def sum(*args): return _pygamma.col_vector_sum(*args)
    def zero(*args): return _pygamma.col_vector_zero(*args)
    def sort(*args): return _pygamma.col_vector_sort(*args)
    def product(*args): return _pygamma.col_vector_product(*args)
    def scalar_product(*args): return _pygamma.col_vector_scalar_product(*args)
    def hdrString(*args): return _pygamma.col_vector_hdrString(*args)
    def ask(*args): return _pygamma.col_vector_ask(*args)
col_vector_swigregister = _pygamma.col_vector_swigregister
col_vector_swigregister(col_vector)

class complex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, complex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, complex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_complex(*args)
        try: self.this.append(this)
        except: self.this = this
    def Relem(*args): return _pygamma.complex_Relem(*args)
    def Ielem(*args): return _pygamma.complex_Ielem(*args)
    def Rec(*args): return _pygamma.complex_Rec(*args)
    def Imc(*args): return _pygamma.complex_Imc(*args)
    def __add__(*args): return _pygamma.complex___add__(*args)
    def __iadd__(*args): return _pygamma.complex___iadd__(*args)
    def __sub__(*args): return _pygamma.complex___sub__(*args)
    def __isub__(*args): return _pygamma.complex___isub__(*args)
    def __mul__(*args): return _pygamma.complex___mul__(*args)
    def __imul__(*args): return _pygamma.complex___imul__(*args)
    def __div__(*args): return _pygamma.complex___div__(*args)
    def __idiv__(*args): return _pygamma.complex___idiv__(*args)
    def conj(*args): return _pygamma.complex_conj(*args)
    def conj_times(*args): return _pygamma.complex_conj_times(*args)
    def Zexp(*args): return _pygamma.complex_Zexp(*args)
    def Zsin(*args): return _pygamma.complex_Zsin(*args)
    def Zcos(*args): return _pygamma.complex_Zcos(*args)
    def Ztan(*args): return _pygamma.complex_Ztan(*args)
    def Zasin(*args): return _pygamma.complex_Zasin(*args)
    def Zacos(*args): return _pygamma.complex_Zacos(*args)
    def Zatan(*args): return _pygamma.complex_Zatan(*args)
    def Zsinh(*args): return _pygamma.complex_Zsinh(*args)
    def Zcosh(*args): return _pygamma.complex_Zcosh(*args)
    def Ztanh(*args): return _pygamma.complex_Ztanh(*args)
    def Zasinh(*args): return _pygamma.complex_Zasinh(*args)
    def Zacosh(*args): return _pygamma.complex_Zacosh(*args)
    def Zatanh(*args): return _pygamma.complex_Zatanh(*args)
    __swig_getmethods__["Reiphi"] = lambda x: _pygamma.complex_Reiphi
    if _newclass:Reiphi = staticmethod(_pygamma.complex_Reiphi)
    __swig_getmethods__["delim"] = lambda x: _pygamma.complex_delim
    if _newclass:delim = staticmethod(_pygamma.complex_delim)
    __swig_getmethods__["scinot"] = lambda x: _pygamma.complex_scinot
    if _newclass:scinot = staticmethod(_pygamma.complex_scinot)
    __swig_getmethods__["digits"] = lambda x: _pygamma.complex_digits
    if _newclass:digits = staticmethod(_pygamma.complex_digits)
    __swig_getmethods__["dadp"] = lambda x: _pygamma.complex_dadp
    if _newclass:dadp = staticmethod(_pygamma.complex_dadp)
    __swig_getmethods__["dlength"] = lambda x: _pygamma.complex_dlength
    if _newclass:dlength = staticmethod(_pygamma.complex_dlength)
    __swig_getmethods__["dformat"] = lambda x: _pygamma.complex_dformat
    if _newclass:dformat = staticmethod(_pygamma.complex_dformat)
    __swig_getmethods__["zlength"] = lambda x: _pygamma.complex_zlength
    if _newclass:zlength = staticmethod(_pygamma.complex_zlength)
    __swig_getmethods__["normphase"] = lambda x: _pygamma.complex_normphase
    if _newclass:normphase = staticmethod(_pygamma.complex_normphase)
    __swig_getmethods__["complex_getf"] = lambda x: _pygamma.complex_complex_getf
    if _newclass:complex_getf = staticmethod(_pygamma.complex_complex_getf)
    def printString(*args): return _pygamma.complex_printString(*args)
    def write(*args): return _pygamma.complex_write(*args)
    def read(*args): return _pygamma.complex_read(*args)
    def __eq__(*args): return _pygamma.complex___eq__(*args)
    def __ne__(*args): return _pygamma.complex___ne__(*args)
    def __lt__(*args): return _pygamma.complex___lt__(*args)
    def __gt__(*args): return _pygamma.complex___gt__(*args)
    __swig_destroy__ = _pygamma.delete_complex
    __del__ = lambda self : None;
complex_swigregister = _pygamma.complex_swigregister
complex_swigregister(complex)
Swap = _pygamma.Swap
complex_Reiphi = _pygamma.complex_Reiphi
complex_delim = _pygamma.complex_delim
complex_scinot = _pygamma.complex_scinot
complex_digits = _pygamma.complex_digits
complex_dadp = _pygamma.complex_dadp
complex_dlength = _pygamma.complex_dlength
complex_dformat = _pygamma.complex_dformat
complex_zlength = _pygamma.complex_zlength
complex_normphase = _pygamma.complex_normphase
complex_complex_getf = _pygamma.complex_complex_getf

class spin_sys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_sys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spin_sys, name)
    __repr__ = _swig_repr
    def check_spin(*args): return _pygamma.spin_sys_check_spin(*args)
    def check_spins(*args): return _pygamma.spin_sys_check_spins(*args)
    def __init__(self, *args): 
        this = _pygamma.new_spin_sys(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_spin_sys
    __del__ = lambda self : None;
    def spins(*args): return _pygamma.spin_sys_spins(*args)
    def spinpairs(*args): return _pygamma.spin_sys_spinpairs(*args)
    def HS(*args): return _pygamma.spin_sys_HS(*args)
    def isotope(*args): return _pygamma.spin_sys_isotope(*args)
    def weight(*args): return _pygamma.spin_sys_weight(*args)
    def symbol(*args): return _pygamma.spin_sys_symbol(*args)
    def qn(*args): return _pygamma.spin_sys_qn(*args)
    def element(*args): return _pygamma.spin_sys_element(*args)
    def momentum(*args): return _pygamma.spin_sys_momentum(*args)
    def gamma(*args): return _pygamma.spin_sys_gamma(*args)
    def HSvect(*args): return _pygamma.spin_sys_HSvect(*args)
    def qState(*args): return _pygamma.spin_sys_qState(*args)
    def qnState(*args): return _pygamma.spin_sys_qnState(*args)
    def qnStates(*args): return _pygamma.spin_sys_qnStates(*args)
    def qnDist(*args): return _pygamma.spin_sys_qnDist(*args)
    def CoherDist(*args): return _pygamma.spin_sys_CoherDist(*args)
    def homonuclear(*args): return _pygamma.spin_sys_homonuclear(*args)
    def heteronuclear(*args): return _pygamma.spin_sys_heteronuclear(*args)
    def electron(*args): return _pygamma.spin_sys_electron(*args)
    def nucleon(*args): return _pygamma.spin_sys_nucleon(*args)
    def spinhalf(*args): return _pygamma.spin_sys_spinhalf(*args)
    def electrons(*args): return _pygamma.spin_sys_electrons(*args)
    def nucleons(*args): return _pygamma.spin_sys_nucleons(*args)
    def nepair(*args): return _pygamma.spin_sys_nepair(*args)
    def enpair(*args): return _pygamma.spin_sys_enpair(*args)
    def eepair(*args): return _pygamma.spin_sys_eepair(*args)
    def nnpair(*args): return _pygamma.spin_sys_nnpair(*args)
    def pairidx(*args): return _pygamma.spin_sys_pairidx(*args)
    def isotopes(*args): return _pygamma.spin_sys_isotopes(*args)
    def SetFlag(*args): return _pygamma.spin_sys_SetFlag(*args)
    def SetFlags(*args): return _pygamma.spin_sys_SetFlags(*args)
    def GetFlag(*args): return _pygamma.spin_sys_GetFlag(*args)
    def name(*args): return _pygamma.spin_sys_name(*args)
    def warnings(*args): return _pygamma.spin_sys_warnings(*args)
    def IsoDefault(*args): return _pygamma.spin_sys_IsoDefault(*args)
    def PSetAdd(*args): return _pygamma.spin_sys_PSetAdd(*args)
    def getSpins(*args): return _pygamma.spin_sys_getSpins(*args)
    def setName(*args): return _pygamma.spin_sys_setName(*args)
    def setIs(*args): return _pygamma.spin_sys_setIs(*args)
    def ask_read(*args): return _pygamma.spin_sys_ask_read(*args)
    def get_basis(*args): return _pygamma.spin_sys_get_basis(*args)
    def printstrings(*args): return _pygamma.spin_sys_printstrings(*args)
    def SYSStrings(*args): return _pygamma.spin_sys_SYSStrings(*args)
    def SIStrings(*args): return _pygamma.spin_sys_SIStrings(*args)
    def SYMStrings(*args): return _pygamma.spin_sys_SYMStrings(*args)
    def SAMStrings(*args): return _pygamma.spin_sys_SAMStrings(*args)
spin_sys_swigregister = _pygamma.spin_sys_swigregister
spin_sys_swigregister(spin_sys)
complex0 = cvar.complex0
complex1 = cvar.complex1
complexi = cvar.complexi

class spin_system(spin_sys):
    __swig_setmethods__ = {}
    for _s in [spin_sys]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_system, name, value)
    __swig_getmethods__ = {}
    for _s in [spin_sys]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, spin_system, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_spin_system(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_spin_system
    __del__ = lambda self : None;
    def shifts(*args): return _pygamma.spin_system_shifts(*args)
    def shift(*args): return _pygamma.spin_system_shift(*args)
    def maxShift(*args): return _pygamma.spin_system_maxShift(*args)
    def minShift(*args): return _pygamma.spin_system_minShift(*args)
    def medianShift(*args): return _pygamma.spin_system_medianShift(*args)
    def lab_shift(*args): return _pygamma.spin_system_lab_shift(*args)
    def offsetShifts(*args): return _pygamma.spin_system_offsetShifts(*args)
    def PPM(*args): return _pygamma.spin_system_PPM(*args)
    def gfactor(*args): return _pygamma.spin_system_gfactor(*args)
    def eshift(*args): return _pygamma.spin_system_eshift(*args)
    def lab_eshift(*args): return _pygamma.spin_system_lab_eshift(*args)
    def efield(*args): return _pygamma.spin_system_efield(*args)
    def efield_lab(*args): return _pygamma.spin_system_efield_lab(*args)
    def Js(*args): return _pygamma.spin_system_Js(*args)
    def J(*args): return _pygamma.spin_system_J(*args)
    def As(*args): return _pygamma.spin_system_As(*args)
    def A(*args): return _pygamma.spin_system_A(*args)
    def AHz(*args): return _pygamma.spin_system_AHz(*args)
    def Omega(*args): return _pygamma.spin_system_Omega(*args)
    def Bo(*args): return _pygamma.spin_system_Bo(*args)
    def OmegaAdjust(*args): return _pygamma.spin_system_OmegaAdjust(*args)
    def FieldAdjust(*args): return _pygamma.spin_system_FieldAdjust(*args)
    def spectrometer_frequency(*args): return _pygamma.spin_system_spectrometer_frequency(*args)
    def spflags(*args): return _pygamma.spin_system_spflags(*args)
    def spflag(*args): return _pygamma.spin_system_spflag(*args)
    def center(*args): return _pygamma.spin_system_center(*args)
    def Nyquist(*args): return _pygamma.spin_system_Nyquist(*args)
    def PSetAdd(*args): return _pygamma.spin_system_PSetAdd(*args)
    def setJs(*args): return _pygamma.spin_system_setJs(*args)
    def setAs(*args): return _pygamma.spin_system_setAs(*args)
    def setShifts(*args): return _pygamma.spin_system_setShifts(*args)
    def setGs(*args): return _pygamma.spin_system_setGs(*args)
    def write(*args): return _pygamma.spin_system_write(*args)
    def read(*args): return _pygamma.spin_system_read(*args)
    def ask_read(*args): return _pygamma.spin_system_ask_read(*args)
    def SYSStrings(*args): return _pygamma.spin_system_SYSStrings(*args)
    def VStrings(*args): return _pygamma.spin_system_VStrings(*args)
    def PPMStrings(*args): return _pygamma.spin_system_PPMStrings(*args)
    def GFStrings(*args): return _pygamma.spin_system_GFStrings(*args)
    def BeStrings(*args): return _pygamma.spin_system_BeStrings(*args)
    def JStrings(*args): return _pygamma.spin_system_JStrings(*args)
    def AStrings(*args): return _pygamma.spin_system_AStrings(*args)
    def OmStrings(*args): return _pygamma.spin_system_OmStrings(*args)
spin_system_swigregister = _pygamma.spin_system_swigregister
spin_system_swigregister(spin_system)

class gen_op(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gen_op, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gen_op, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_gen_op(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_gen_op
    __del__ = lambda self : None;
    def __add__(*args): return _pygamma.gen_op___add__(*args)
    def __sub__(*args): return _pygamma.gen_op___sub__(*args)
    def __neg__(*args): return _pygamma.gen_op___neg__(*args)
    def __mul__(*args): return _pygamma.gen_op___mul__(*args)
    def __iand__(*args): return _pygamma.gen_op___iand__(*args)
    def __iadd__(*args): return _pygamma.gen_op___iadd__(*args)
    def __isub__(*args): return _pygamma.gen_op___isub__(*args)
    def __imul__(*args): return _pygamma.gen_op___imul__(*args)
    def __idiv__(*args): return _pygamma.gen_op___idiv__(*args)
    def det(*args): return _pygamma.gen_op_det(*args)
    def trace(*args): return _pygamma.gen_op_trace(*args)
    def proj(*args): return _pygamma.gen_op_proj(*args)
    def dim(*args): return _pygamma.gen_op_dim(*args)
    def HS(*args): return _pygamma.gen_op_HS(*args)
    def LS(*args): return _pygamma.gen_op_LS(*args)
    def dim_LS(*args): return _pygamma.gen_op_dim_LS(*args)
    def exp(*args): return _pygamma.gen_op_exp(*args)
    def Pow(*args): return _pygamma.gen_op_Pow(*args)
    def sim_trans(*args): return _pygamma.gen_op_sim_trans(*args)
    def sim_trans_ip(*args): return _pygamma.gen_op_sim_trans_ip(*args)
    def eigvals(*args): return _pygamma.gen_op_eigvals(*args)
    def get_bs(*args): return _pygamma.gen_op_get_bs(*args)
    def get_basis(*args): return _pygamma.gen_op_get_basis(*args)
    def put_bs(*args): return _pygamma.gen_op_put_bs(*args)
    def put_basis(*args): return _pygamma.gen_op_put_basis(*args)
    def __call__(*args): return _pygamma.gen_op___call__(*args)
    def get(*args): return _pygamma.gen_op_get(*args)
    def put(*args): return _pygamma.gen_op_put(*args)
    def name(*args): return _pygamma.gen_op_name(*args)
    def bsname(*args): return _pygamma.gen_op_bsname(*args)
    def exists(*args): return _pygamma.gen_op_exists(*args)
    def superket(*args): return _pygamma.gen_op_superket(*args)
    def desuperket(*args): return _pygamma.gen_op_desuperket(*args)
    def project_sub(*args): return _pygamma.gen_op_project_sub(*args)
    def test_EBR(*args): return _pygamma.gen_op_test_EBR(*args)
    def test_DBR(*args): return _pygamma.gen_op_test_DBR(*args)
    def in_EBR(*args): return _pygamma.gen_op_in_EBR(*args)
    def in_DBR(*args): return _pygamma.gen_op_in_DBR(*args)
    def set_DBR(*args): return _pygamma.gen_op_set_DBR(*args)
    def set_EBR(*args): return _pygamma.gen_op_set_EBR(*args)
    def Op_base(*args): return _pygamma.gen_op_Op_base(*args)
    def status(*args): return _pygamma.gen_op_status(*args)
    def setOnlyWBR(*args): return _pygamma.gen_op_setOnlyWBR(*args)
    def Op_priority(*args): return _pygamma.gen_op_Op_priority(*args)
    def SetLimits(*args): return _pygamma.gen_op_SetLimits(*args)
    def OpCheck(*args): return _pygamma.gen_op_OpCheck(*args)
    def LimCheck(*args): return _pygamma.gen_op_LimCheck(*args)
    def write(*args): return _pygamma.gen_op_write(*args)
    def read(*args): return _pygamma.gen_op_read(*args)
    def TestEigenSystem(*args): return _pygamma.gen_op_TestEigenSystem(*args)
    def is_symmetric(*args): return _pygamma.gen_op_is_symmetric(*args)
    def is_hermitian(*args): return _pygamma.gen_op_is_hermitian(*args)
    def is_unitary(*args): return _pygamma.gen_op_is_unitary(*args)
    def is_real(*args): return _pygamma.gen_op_is_real(*args)
    def is_imaginary(*args): return _pygamma.gen_op_is_imaginary(*args)
    def is_complex(*args): return _pygamma.gen_op_is_complex(*args)
    def is_zero(*args): return _pygamma.gen_op_is_zero(*args)
    def is_diagonal(*args): return _pygamma.gen_op_is_diagonal(*args)
    def is_square(*args): return _pygamma.gen_op_is_square(*args)
    def __eq__(*args): return _pygamma.gen_op___eq__(*args)
    def __ne__(*args): return _pygamma.gen_op___ne__(*args)
    def __lt__(*args): return _pygamma.gen_op___lt__(*args)
    def __gt__(*args): return _pygamma.gen_op___gt__(*args)
gen_op_swigregister = _pygamma.gen_op_swigregister
gen_op_swigregister(gen_op)

I_gen_op = _pygamma.I_gen_op
Hcs = _pygamma.Hcs
Hcs_lab = _pygamma.Hcs_lab
HJw = _pygamma.HJw
HJ = _pygamma.HJ
HJwh = _pygamma.HJwh
HJd = _pygamma.HJd
Ho = _pygamma.Ho
How = _pygamma.How
Ho_lab = _pygamma.Ho_lab
Hg = _pygamma.Hg
Hg_lab = _pygamma.Hg_lab
HAw = _pygamma.HAw
HQsec = _pygamma.HQsec
SOpCmpfatal = _pygamma.SOpCmpfatal
Iu = _pygamma.Iu
Ie = _pygamma.Ie
Iz = _pygamma.Iz
Ix = _pygamma.Ix
Iy = _pygamma.Iy
Ip = _pygamma.Ip
Im = _pygamma.Im
Ia = _pygamma.Ia
Ib = _pygamma.Ib
Ipol = _pygamma.Ipol
Fe_sp = _pygamma.Fe_sp
Fx_sp = _pygamma.Fx_sp
Fy_sp = _pygamma.Fy_sp
Fz_sp = _pygamma.Fz_sp
Fp_sp = _pygamma.Fp_sp
Fm_sp = _pygamma.Fm_sp
Fa_sp = _pygamma.Fa_sp
Fb_sp = _pygamma.Fb_sp
Fpol_sp = _pygamma.Fpol_sp
Faxis_sp = _pygamma.Faxis_sp
Fpol_gen = _pygamma.Fpol_gen
Ipdt = _pygamma.Ipdt
Fpdt = _pygamma.Fpdt
zero_mqc = _pygamma.zero_mqc
st_Op = _pygamma.st_Op
sqt_v = _pygamma.sqt_v
sort_super_op_basis = _pygamma.sort_super_op_basis
sort_LOp_basis = _pygamma.sort_LOp_basis
sort_Op_basis = _pygamma.sort_Op_basis
mqt_v = _pygamma.mqt_v
wavefunction = _pygamma.wavefunction
wavefunctions = _pygamma.wavefunctions
vecmax = _pygamma.vecmax
integral = _pygamma.integral
lwhh = _pygamma.lwhh
query_file1D = _pygamma.query_file1D
Ixpuls_sp = _pygamma.Ixpuls_sp
Iypuls_sp = _pygamma.Iypuls_sp
Ixypuls_sp = _pygamma.Ixypuls_sp
Ixpuls_sp_U = _pygamma.Ixpuls_sp_U
Iypuls_sp_U = _pygamma.Iypuls_sp_U
Ixypuls_U_sp = _pygamma.Ixypuls_U_sp
class basis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, basis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, basis, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_basis(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_basis
    __del__ = lambda self : None;
    def size(*args): return _pygamma.basis_size(*args)
    def dim(*args): return _pygamma.basis_dim(*args)
    def name(*args): return _pygamma.basis_name(*args)
    def dim_LS(*args): return _pygamma.basis_dim_LS(*args)
    def sub_N(*args): return _pygamma.basis_sub_N(*args)
    def sub_dim(*args): return _pygamma.basis_sub_dim(*args)
    def sub_anchor(*args): return _pygamma.basis_sub_anchor(*args)
    def sub_anchor_LS(*args): return _pygamma.basis_sub_anchor_LS(*args)
    def which_sub_LS(*args): return _pygamma.basis_which_sub_LS(*args)
    def __eq__(*args): return _pygamma.basis___eq__(*args)
    def __ne__(*args): return _pygamma.basis___ne__(*args)
    def isDefaultBasis(*args): return _pygamma.basis_isDefaultBasis(*args)
    def refs(*args): return _pygamma.basis_refs(*args)
    def check(*args): return _pygamma.basis_check(*args)
    def write(*args): return _pygamma.basis_write(*args)
    def read(*args): return _pygamma.basis_read(*args)
    def TestBasis(*args): return _pygamma.basis_TestBasis(*args)
basis_swigregister = _pygamma.basis_swigregister
basis_swigregister(basis)
Hz = _pygamma.Hz
H1 = _pygamma.H1
Heff = _pygamma.Heff
SOpCmperror = _pygamma.SOpCmperror
Fpol = _pygamma.Fpol
Fe = _pygamma.Fe
Fx = _pygamma.Fx
Fy = _pygamma.Fy
Fz = _pygamma.Fz
Fp = _pygamma.Fp
Fm = _pygamma.Fm
Fa = _pygamma.Fa
Fb = _pygamma.Fb
Faxis = _pygamma.Faxis
Fpol_gen_new = _pygamma.Fpol_gen_new
sigma_eq = _pygamma.sigma_eq
query_isotope = _pygamma.query_isotope
query_offset = _pygamma.query_offset
Ixpuls = _pygamma.Ixpuls
Iypuls = _pygamma.Iypuls
Ixypuls = _pygamma.Ixypuls
Ixpuls_U = _pygamma.Ixpuls_U
Iypuls_U = _pygamma.Iypuls_U
Ixypuls_U = _pygamma.Ixypuls_U

prop = _pygamma.prop
prop_ip = _pygamma.prop_ip
class HSprop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HSprop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HSprop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_HSprop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_HSprop
    __del__ = lambda self : None;
    def time(*args): return _pygamma.HSprop_time(*args)
    def length(*args): return _pygamma.HSprop_length(*args)
    def dim(*args): return _pygamma.HSprop_dim(*args)
    def Bs(*args): return _pygamma.HSprop_Bs(*args)
    def HS(*args): return _pygamma.HSprop_HS(*args)
    def LS(*args): return _pygamma.HSprop_LS(*args)
    def Op(*args): return _pygamma.HSprop_Op(*args)
    def H(*args): return _pygamma.HSprop_H(*args)
    def SetEBR(*args): return _pygamma.HSprop_SetEBR(*args)
    def SetBasis(*args): return _pygamma.HSprop_SetBasis(*args)
    def evolve(*args): return _pygamma.HSprop_evolve(*args)
    def __mul__(*args): return _pygamma.HSprop___mul__(*args)
    def __imul__(*args): return _pygamma.HSprop___imul__(*args)
    def __iand__(*args): return _pygamma.HSprop___iand__(*args)
    def sim_trans(*args): return _pygamma.HSprop_sim_trans(*args)
    def sim_trans_ip(*args): return _pygamma.HSprop_sim_trans_ip(*args)
    def Pow(*args): return _pygamma.HSprop_Pow(*args)
    def __eq__(*args): return _pygamma.HSprop___eq__(*args)
    def __ne__(*args): return _pygamma.HSprop___ne__(*args)
    def __lt__(*args): return _pygamma.HSprop___lt__(*args)
    def __gt__(*args): return _pygamma.HSprop___gt__(*args)
HSprop_swigregister = _pygamma.HSprop_swigregister
HSprop_swigregister(HSprop)
evolve = _pygamma.evolve
evolve_ip = _pygamma.evolve_ip

class spin_op(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_op, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spin_op, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_spin_op(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_spin_op
    __del__ = lambda self : None;
    def __neg__(*args): return _pygamma.spin_op___neg__(*args)
    def __add__(*args): return _pygamma.spin_op___add__(*args)
    def __iadd__(*args): return _pygamma.spin_op___iadd__(*args)
    def __isub__(*args): return _pygamma.spin_op___isub__(*args)
    def __imul__(*args): return _pygamma.spin_op___imul__(*args)
    def __idiv__(*args): return _pygamma.spin_op___idiv__(*args)
    def exp(*args): return _pygamma.spin_op_exp(*args)
    def adjoint(*args): return _pygamma.spin_op_adjoint(*args)
    def trace(*args): return _pygamma.spin_op_trace(*args)
    def spins(*args): return _pygamma.spin_op_spins(*args)
    def refs(*args): return _pygamma.spin_op_refs(*args)
    def HS(*args): return _pygamma.spin_op_HS(*args)
    def status(*args): return _pygamma.spin_op_status(*args)
    def FaxisStruct(*args): return _pygamma.spin_op_FaxisStruct(*args)
spin_op_swigregister = _pygamma.spin_op_swigregister
spin_op_swigregister(spin_op)

PulSfatality = _pygamma.PulSfatality
Spul_axis = _pygamma.Spul_axis
Spul_U_axis = _pygamma.Spul_U_axis
left = _pygamma.left
right = _pygamma.right
Hsuper = _pygamma.Hsuper
U_transform = _pygamma.U_transform
commutator = _pygamma.commutator
class super_op(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, super_op, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, super_op, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_super_op(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_super_op
    __del__ = lambda self : None;
    def __add__(*args): return _pygamma.super_op___add__(*args)
    def __iadd__(*args): return _pygamma.super_op___iadd__(*args)
    def __sub__(*args): return _pygamma.super_op___sub__(*args)
    def __neg__(*args): return _pygamma.super_op___neg__(*args)
    def __isub__(*args): return _pygamma.super_op___isub__(*args)
    def __mul__(*args): return _pygamma.super_op___mul__(*args)
    def __iand__(*args): return _pygamma.super_op___iand__(*args)
    def __imul__(*args): return _pygamma.super_op___imul__(*args)
    def __idiv__(*args): return _pygamma.super_op___idiv__(*args)
    def exp(*args): return _pygamma.super_op_exp(*args)
    def set_EBR(*args): return _pygamma.super_op_set_EBR(*args)
    def set_HBR(*args): return _pygamma.super_op_set_HBR(*args)
    def set_DBR(*args): return _pygamma.super_op_set_DBR(*args)
    def LOp_Hbase(*args): return _pygamma.super_op_LOp_Hbase(*args)
    def LOp_base(*args): return _pygamma.super_op_LOp_base(*args)
    def SetHSBaseOf(*args): return _pygamma.super_op_SetHSBaseOf(*args)
    def HS(*args): return _pygamma.super_op_HS(*args)
    def size(*args): return _pygamma.super_op_size(*args)
    def dim(*args): return _pygamma.super_op_dim(*args)
    def LS(*args): return _pygamma.super_op_LS(*args)
    def eigenvalues(*args): return _pygamma.super_op_eigenvalues(*args)
    def Bs(*args): return _pygamma.super_op_Bs(*args)
    def get_basis(*args): return _pygamma.super_op_get_basis(*args)
    def put_basis(*args): return _pygamma.super_op_put_basis(*args)
    def LBs(*args): return _pygamma.super_op_LBs(*args)
    def get_Lbasis(*args): return _pygamma.super_op_get_Lbasis(*args)
    def put_Lbasis(*args): return _pygamma.super_op_put_Lbasis(*args)
    def __call__(*args): return _pygamma.super_op___call__(*args)
    def put(*args): return _pygamma.super_op_put(*args)
    def get(*args): return _pygamma.super_op_get(*args)
    def checkLOp(*args): return _pygamma.super_op_checkLOp(*args)
    def status(*args): return _pygamma.super_op_status(*args)
    def __eq__(*args): return _pygamma.super_op___eq__(*args)
    def below(*args): return _pygamma.super_op_below(*args)
    def write(*args): return _pygamma.super_op_write(*args)
    def read(*args): return _pygamma.super_op_read(*args)
super_op_swigregister = _pygamma.super_op_swigregister
super_op_swigregister(super_op)
PulSerror = _pygamma.PulSerror
Sxpuls = _pygamma.Sxpuls
SxpulsB = _pygamma.SxpulsB
Sypuls = _pygamma.Sypuls
SypulsB = _pygamma.SypulsB
Sxpuls_U = _pygamma.Sxpuls_U
SxpulsB_U = _pygamma.SxpulsB_U
Sypuls_U = _pygamma.Sypuls_U
SypulsB_U = _pygamma.SypulsB_U
Sxypuls = _pygamma.Sxypuls
SxypulsB = _pygamma.SxypulsB
Sxypuls_U = _pygamma.Sxypuls_U
SxypulsB_U = _pygamma.SxypulsB_U
Spul_plane = _pygamma.Spul_plane
Spul_U_plane = _pygamma.Spul_U_plane
d_commutator = _pygamma.d_commutator

class sys_dynamic(spin_system):
    __swig_setmethods__ = {}
    for _s in [spin_system]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sys_dynamic, name, value)
    __swig_getmethods__ = {}
    for _s in [spin_system]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sys_dynamic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_sys_dynamic(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_sys_dynamic
    __del__ = lambda self : None;
    def shifts(*args): return _pygamma.sys_dynamic_shifts(*args)
    def shift(*args): return _pygamma.sys_dynamic_shift(*args)
    def offsetShifts(*args): return _pygamma.sys_dynamic_offsetShifts(*args)
    def PPM(*args): return _pygamma.sys_dynamic_PPM(*args)
    def delz(*args): return _pygamma.sys_dynamic_delz(*args)
    def Ceta(*args): return _pygamma.sys_dynamic_Ceta(*args)
    def TC(*args): return _pygamma.sys_dynamic_TC(*args)
    def xiC_vector(*args): return _pygamma.sys_dynamic_xiC_vector(*args)
    def xiC(*args): return _pygamma.sys_dynamic_xiC(*args)
    def CSA(*args): return _pygamma.sys_dynamic_CSA(*args)
    def coords(*args): return _pygamma.sys_dynamic_coords(*args)
    def Coord(*args): return _pygamma.sys_dynamic_Coord(*args)
    def DCC(*args): return _pygamma.sys_dynamic_DCC(*args)
    def Ddelz(*args): return _pygamma.sys_dynamic_Ddelz(*args)
    def Deta(*args): return _pygamma.sys_dynamic_Deta(*args)
    def AD(*args): return _pygamma.sys_dynamic_AD(*args)
    def dipoles(*args): return _pygamma.sys_dynamic_dipoles(*args)
    def dipole(*args): return _pygamma.sys_dynamic_dipole(*args)
    def xiD_matrix(*args): return _pygamma.sys_dynamic_xiD_matrix(*args)
    def Dip(*args): return _pygamma.sys_dynamic_Dip(*args)
    def QCC(*args): return _pygamma.sys_dynamic_QCC(*args)
    def Qdelz(*args): return _pygamma.sys_dynamic_Qdelz(*args)
    def Qeta(*args): return _pygamma.sys_dynamic_Qeta(*args)
    def TQ(*args): return _pygamma.sys_dynamic_TQ(*args)
    def xiQ_vector(*args): return _pygamma.sys_dynamic_xiQ_vector(*args)
    def xiQ(*args): return _pygamma.sys_dynamic_xiQ(*args)
    def Quad(*args): return _pygamma.sys_dynamic_Quad(*args)
    def TR(*args): return _pygamma.sys_dynamic_TR(*args)
    def tauR(*args): return _pygamma.sys_dynamic_tauR(*args)
    def xiR_vector(*args): return _pygamma.sys_dynamic_xiR_vector(*args)
    def xiR(*args): return _pygamma.sys_dynamic_xiR(*args)
    def setCoords(*args): return _pygamma.sys_dynamic_setCoords(*args)
    def setDip(*args): return _pygamma.sys_dynamic_setDip(*args)
    def SetCSA(*args): return _pygamma.sys_dynamic_SetCSA(*args)
    def setQuad(*args): return _pygamma.sys_dynamic_setQuad(*args)
    def setRand(*args): return _pygamma.sys_dynamic_setRand(*args)
    def setTaus(*args): return _pygamma.sys_dynamic_setTaus(*args)
    def setKs(*args): return _pygamma.sys_dynamic_setKs(*args)
    def write(*args): return _pygamma.sys_dynamic_write(*args)
    def read(*args): return _pygamma.sys_dynamic_read(*args)
    def ask_read(*args): return _pygamma.sys_dynamic_ask_read(*args)
    def taus(*args): return _pygamma.sys_dynamic_taus(*args)
    def taux(*args): return _pygamma.sys_dynamic_taux(*args)
    def tauy(*args): return _pygamma.sys_dynamic_tauy(*args)
    def tauz(*args): return _pygamma.sys_dynamic_tauz(*args)
    def Kex_zero(*args): return _pygamma.sys_dynamic_Kex_zero(*args)
    def Kex(*args): return _pygamma.sys_dynamic_Kex(*args)
    def MExProcs(*args): return _pygamma.sys_dynamic_MExProcs(*args)
    def PtStrings(*args): return _pygamma.sys_dynamic_PtStrings(*args)
    def AQStrings(*args): return _pygamma.sys_dynamic_AQStrings(*args)
sys_dynamic_swigregister = _pygamma.sys_dynamic_swigregister
sys_dynamic_swigregister(sys_dynamic)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _pygamma.StringVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _pygamma.StringVector___nonzero__(*args)
    def __len__(*args): return _pygamma.StringVector___len__(*args)
    def pop(*args): return _pygamma.StringVector_pop(*args)
    def __getslice__(*args): return _pygamma.StringVector___getslice__(*args)
    def __setslice__(*args): return _pygamma.StringVector___setslice__(*args)
    def __delslice__(*args): return _pygamma.StringVector___delslice__(*args)
    def __delitem__(*args): return _pygamma.StringVector___delitem__(*args)
    def __getitem__(*args): return _pygamma.StringVector___getitem__(*args)
    def __setitem__(*args): return _pygamma.StringVector___setitem__(*args)
    def append(*args): return _pygamma.StringVector_append(*args)
    def empty(*args): return _pygamma.StringVector_empty(*args)
    def size(*args): return _pygamma.StringVector_size(*args)
    def clear(*args): return _pygamma.StringVector_clear(*args)
    def swap(*args): return _pygamma.StringVector_swap(*args)
    def get_allocator(*args): return _pygamma.StringVector_get_allocator(*args)
    def begin(*args): return _pygamma.StringVector_begin(*args)
    def end(*args): return _pygamma.StringVector_end(*args)
    def rbegin(*args): return _pygamma.StringVector_rbegin(*args)
    def rend(*args): return _pygamma.StringVector_rend(*args)
    def pop_back(*args): return _pygamma.StringVector_pop_back(*args)
    def erase(*args): return _pygamma.StringVector_erase(*args)
    def __init__(self, *args): 
        this = _pygamma.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _pygamma.StringVector_push_back(*args)
    def front(*args): return _pygamma.StringVector_front(*args)
    def back(*args): return _pygamma.StringVector_back(*args)
    def assign(*args): return _pygamma.StringVector_assign(*args)
    def resize(*args): return _pygamma.StringVector_resize(*args)
    def insert(*args): return _pygamma.StringVector_insert(*args)
    def reserve(*args): return _pygamma.StringVector_reserve(*args)
    def capacity(*args): return _pygamma.StringVector_capacity(*args)
    __swig_destroy__ = _pygamma.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _pygamma.StringVector_swigregister
StringVector_swigregister(StringVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _pygamma.IntVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _pygamma.IntVector___nonzero__(*args)
    def __len__(*args): return _pygamma.IntVector___len__(*args)
    def pop(*args): return _pygamma.IntVector_pop(*args)
    def __getslice__(*args): return _pygamma.IntVector___getslice__(*args)
    def __setslice__(*args): return _pygamma.IntVector___setslice__(*args)
    def __delslice__(*args): return _pygamma.IntVector___delslice__(*args)
    def __delitem__(*args): return _pygamma.IntVector___delitem__(*args)
    def __getitem__(*args): return _pygamma.IntVector___getitem__(*args)
    def __setitem__(*args): return _pygamma.IntVector___setitem__(*args)
    def append(*args): return _pygamma.IntVector_append(*args)
    def empty(*args): return _pygamma.IntVector_empty(*args)
    def size(*args): return _pygamma.IntVector_size(*args)
    def clear(*args): return _pygamma.IntVector_clear(*args)
    def swap(*args): return _pygamma.IntVector_swap(*args)
    def get_allocator(*args): return _pygamma.IntVector_get_allocator(*args)
    def begin(*args): return _pygamma.IntVector_begin(*args)
    def end(*args): return _pygamma.IntVector_end(*args)
    def rbegin(*args): return _pygamma.IntVector_rbegin(*args)
    def rend(*args): return _pygamma.IntVector_rend(*args)
    def pop_back(*args): return _pygamma.IntVector_pop_back(*args)
    def erase(*args): return _pygamma.IntVector_erase(*args)
    def __init__(self, *args): 
        this = _pygamma.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _pygamma.IntVector_push_back(*args)
    def front(*args): return _pygamma.IntVector_front(*args)
    def back(*args): return _pygamma.IntVector_back(*args)
    def assign(*args): return _pygamma.IntVector_assign(*args)
    def resize(*args): return _pygamma.IntVector_resize(*args)
    def insert(*args): return _pygamma.IntVector_insert(*args)
    def reserve(*args): return _pygamma.IntVector_reserve(*args)
    def capacity(*args): return _pygamma.IntVector_capacity(*args)
    __swig_destroy__ = _pygamma.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _pygamma.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _pygamma.DoubleVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _pygamma.DoubleVector___nonzero__(*args)
    def __len__(*args): return _pygamma.DoubleVector___len__(*args)
    def pop(*args): return _pygamma.DoubleVector_pop(*args)
    def __getslice__(*args): return _pygamma.DoubleVector___getslice__(*args)
    def __setslice__(*args): return _pygamma.DoubleVector___setslice__(*args)
    def __delslice__(*args): return _pygamma.DoubleVector___delslice__(*args)
    def __delitem__(*args): return _pygamma.DoubleVector___delitem__(*args)
    def __getitem__(*args): return _pygamma.DoubleVector___getitem__(*args)
    def __setitem__(*args): return _pygamma.DoubleVector___setitem__(*args)
    def append(*args): return _pygamma.DoubleVector_append(*args)
    def empty(*args): return _pygamma.DoubleVector_empty(*args)
    def size(*args): return _pygamma.DoubleVector_size(*args)
    def clear(*args): return _pygamma.DoubleVector_clear(*args)
    def swap(*args): return _pygamma.DoubleVector_swap(*args)
    def get_allocator(*args): return _pygamma.DoubleVector_get_allocator(*args)
    def begin(*args): return _pygamma.DoubleVector_begin(*args)
    def end(*args): return _pygamma.DoubleVector_end(*args)
    def rbegin(*args): return _pygamma.DoubleVector_rbegin(*args)
    def rend(*args): return _pygamma.DoubleVector_rend(*args)
    def pop_back(*args): return _pygamma.DoubleVector_pop_back(*args)
    def erase(*args): return _pygamma.DoubleVector_erase(*args)
    def __init__(self, *args): 
        this = _pygamma.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _pygamma.DoubleVector_push_back(*args)
    def front(*args): return _pygamma.DoubleVector_front(*args)
    def back(*args): return _pygamma.DoubleVector_back(*args)
    def assign(*args): return _pygamma.DoubleVector_assign(*args)
    def resize(*args): return _pygamma.DoubleVector_resize(*args)
    def insert(*args): return _pygamma.DoubleVector_insert(*args)
    def reserve(*args): return _pygamma.DoubleVector_reserve(*args)
    def capacity(*args): return _pygamma.DoubleVector_capacity(*args)
    __swig_destroy__ = _pygamma.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _pygamma.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class TTable1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TTable1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TTable1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_TTable1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_TTable1D
    __del__ = lambda self : None;
    def center(*args): return _pygamma.TTable1D_center(*args)
    def offset(*args): return _pygamma.TTable1D_offset(*args)
    def FRscale(*args): return _pygamma.TTable1D_FRscale(*args)
    def BC(*args): return _pygamma.TTable1D_BC(*args)
    def Iscale(*args): return _pygamma.TTable1D_Iscale(*args)
    def Iremove(*args): return _pygamma.TTable1D_Iremove(*args)
    def broaden(*args): return _pygamma.TTable1D_broaden(*args)
    def resolution(*args): return _pygamma.TTable1D_resolution(*args)
    def T(*args): return _pygamma.TTable1D_T(*args)
    def Ts(*args): return _pygamma.TTable1D_Ts(*args)
    def TCutoffs(*args): return _pygamma.TTable1D_TCutoffs(*args)
    def F(*args): return _pygamma.TTable1D_F(*args)
    def Fs(*args): return _pygamma.TTable1D_Fs(*args)
    def FD(*args): return _pygamma.TTable1D_FD(*args)
    def pcorrect(*args): return _pygamma.TTable1D_pcorrect(*args)
    def R2(*args): return _pygamma.TTable1D_R2(*args)
    def Fr(*args): return _pygamma.TTable1D_Fr(*args)
    def I(*args): return _pygamma.TTable1D_I(*args)
    def Tr(*args): return _pygamma.TTable1D_Tr(*args)
    def LineWidths(*args): return _pygamma.TTable1D_LineWidths(*args)
    def Intensities(*args): return _pygamma.TTable1D_Intensities(*args)
    def Phases(*args): return _pygamma.TTable1D_Phases(*args)
    def size(*args): return _pygamma.TTable1D_size(*args)
    def FRmax(*args): return _pygamma.TTable1D_FRmax(*args)
    def FRmin(*args): return _pygamma.TTable1D_FRmin(*args)
    def Tdmin(*args): return _pygamma.TTable1D_Tdmin(*args)
    def LWmax(*args): return _pygamma.TTable1D_LWmax(*args)
    def LWmin(*args): return _pygamma.TTable1D_LWmin(*args)
    def Imax(*args): return _pygamma.TTable1D_Imax(*args)
    def Noisemax(*args): return _pygamma.TTable1D_Noisemax(*args)
    def Sort(*args): return _pygamma.TTable1D_Sort(*args)
    def readPSet(*args): return _pygamma.TTable1D_readPSet(*args)
    def setType(*args): return _pygamma.TTable1D_setType(*args)
    def setSort(*args): return _pygamma.TTable1D_setSort(*args)
    def setConv(*args): return _pygamma.TTable1D_setConv(*args)
    def setIcut(*args): return _pygamma.TTable1D_setIcut(*args)
    def setInorm(*args): return _pygamma.TTable1D_setInorm(*args)
    def setSN(*args): return _pygamma.TTable1D_setSN(*args)
    def setHprint(*args): return _pygamma.TTable1D_setHprint(*args)
    def setRprint(*args): return _pygamma.TTable1D_setRprint(*args)
    def setLWprint(*args): return _pygamma.TTable1D_setLWprint(*args)
    def setT2print(*args): return _pygamma.TTable1D_setT2print(*args)
    def setPHprint(*args): return _pygamma.TTable1D_setPHprint(*args)
    def setFreqRev(*args): return _pygamma.TTable1D_setFreqRev(*args)
    def getType(*args): return _pygamma.TTable1D_getType(*args)
    def getSort(*args): return _pygamma.TTable1D_getSort(*args)
    def getConv(*args): return _pygamma.TTable1D_getConv(*args)
    def getIcut(*args): return _pygamma.TTable1D_getIcut(*args)
    def getInorm(*args): return _pygamma.TTable1D_getInorm(*args)
    def getSN(*args): return _pygamma.TTable1D_getSN(*args)
    def getHprint(*args): return _pygamma.TTable1D_getHprint(*args)
    def getRprint(*args): return _pygamma.TTable1D_getRprint(*args)
    def getLWprint(*args): return _pygamma.TTable1D_getLWprint(*args)
    def getT2print(*args): return _pygamma.TTable1D_getT2print(*args)
    def getPHprint(*args): return _pygamma.TTable1D_getPHprint(*args)
    def getFreqRev(*args): return _pygamma.TTable1D_getFreqRev(*args)
    def printStrings(*args): return _pygamma.TTable1D_printStrings(*args)
    def write(*args): return _pygamma.TTable1D_write(*args)
    def dbwrite_old(*args): return _pygamma.TTable1D_dbwrite_old(*args)
    def dbwrite(*args): return _pygamma.TTable1D_dbwrite(*args)
    def calc_spectra(*args): return _pygamma.TTable1D_calc_spectra(*args)
    def read(*args): return _pygamma.TTable1D_read(*args)
TTable1D_swigregister = _pygamma.TTable1D_swigregister
TTable1D_swigregister(TTable1D)

class acquire1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, acquire1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, acquire1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_acquire1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_acquire1D
    __del__ = lambda self : None;
    def L(*args): return _pygamma.acquire1D_L(*args)
    def D(*args): return _pygamma.acquire1D_D(*args)
    def TTable(*args): return _pygamma.acquire1D_TTable(*args)
    def Detector(*args): return _pygamma.acquire1D_Detector(*args)
    def T(*args): return _pygamma.acquire1D_T(*args)
    def F(*args): return _pygamma.acquire1D_F(*args)
    def FD(*args): return _pygamma.acquire1D_FD(*args)
    def table(*args): return _pygamma.acquire1D_table(*args)
    def offset(*args): return _pygamma.acquire1D_offset(*args)
    def FRscale(*args): return _pygamma.acquire1D_FRscale(*args)
    def Iscale(*args): return _pygamma.acquire1D_Iscale(*args)
    def broaden(*args): return _pygamma.acquire1D_broaden(*args)
    def resolution(*args): return _pygamma.acquire1D_resolution(*args)
    def pcorrect(*args): return _pygamma.acquire1D_pcorrect(*args)
    def Wmax(*args): return _pygamma.acquire1D_Wmax(*args)
    def LWmax(*args): return _pygamma.acquire1D_LWmax(*args)
    def setSort(*args): return _pygamma.acquire1D_setSort(*args)
    def setConv(*args): return _pygamma.acquire1D_setConv(*args)
    def ls(*args): return _pygamma.acquire1D_ls(*args)
    def size(*args): return _pygamma.acquire1D_size(*args)
    def full_size(*args): return _pygamma.acquire1D_full_size(*args)
    def transitions(*args): return _pygamma.acquire1D_transitions(*args)
    def write(*args): return _pygamma.acquire1D_write(*args)
    def read(*args): return _pygamma.acquire1D_read(*args)
acquire1D_swigregister = _pygamma.acquire1D_swigregister
acquire1D_swigregister(acquire1D)

class PulWaveform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulWaveform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PulWaveform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_PulWaveform(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_PulWaveform
    __del__ = lambda self : None;
    def name(*args): return _pygamma.PulWaveform_name(*args)
    def values(*args): return _pygamma.PulWaveform_values(*args)
    def lengths(*args): return _pygamma.PulWaveform_lengths(*args)
    def strength(*args): return _pygamma.PulWaveform_strength(*args)
    def phase(*args): return _pygamma.PulWaveform_phase(*args)
    def length(*args): return _pygamma.PulWaveform_length(*args)
    def value(*args): return _pygamma.PulWaveform_value(*args)
    def maxlength(*args): return _pygamma.PulWaveform_maxlength(*args)
    def minlength(*args): return _pygamma.PulWaveform_minlength(*args)
    def maxgamB1(*args): return _pygamma.PulWaveform_maxgamB1(*args)
    def mingamB1(*args): return _pygamma.PulWaveform_mingamB1(*args)
    def gamB1const(*args): return _pygamma.PulWaveform_gamB1const(*args)
    def phaseconst(*args): return _pygamma.PulWaveform_phaseconst(*args)
    def timeconst(*args): return _pygamma.PulWaveform_timeconst(*args)
    def steps(*args): return _pygamma.PulWaveform_steps(*args)
    def fullsteps(*args): return _pygamma.PulWaveform_fullsteps(*args)
    def WFs(*args): return _pygamma.PulWaveform_WFs(*args)
    def fullWFs(*args): return _pygamma.PulWaveform_fullWFs(*args)
    def sumlength(*args): return _pygamma.PulWaveform_sumlength(*args)
    def scalegB1(*args): return _pygamma.PulWaveform_scalegB1(*args)
    def getIdeal(*args): return _pygamma.PulWaveform_getIdeal(*args)
    def IvsT(*args): return _pygamma.PulWaveform_IvsT(*args)
    def PvsT(*args): return _pygamma.PulWaveform_PvsT(*args)
    def GP(*args): return _pygamma.PulWaveform_GP(*args)
    def FM(*args): return _pygamma.PulWaveform_FM(*args)
PulWaveform_swigregister = _pygamma.PulWaveform_swigregister
PulWaveform_swigregister(PulWaveform)
Kex = _pygamma.Kex

class PulComposite(PulWaveform):
    __swig_setmethods__ = {}
    for _s in [PulWaveform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulComposite, name, value)
    __swig_getmethods__ = {}
    for _s in [PulWaveform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PulComposite, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_PulComposite(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_PulComposite
    __del__ = lambda self : None;
    def GetH(*args): return _pygamma.PulComposite_GetH(*args)
    def L0(*args): return _pygamma.PulComposite_L0(*args)
    def GetL0(*args): return _pygamma.PulComposite_GetL0(*args)
    def Leff(*args): return _pygamma.PulComposite_Leff(*args)
    def GetLeff(*args): return _pygamma.PulComposite_GetLeff(*args)
    def GetU(*args): return _pygamma.PulComposite_GetU(*args)
    def GetUsum(*args): return _pygamma.PulComposite_GetUsum(*args)
    def GetUmult(*args): return _pygamma.PulComposite_GetUmult(*args)
    def channel(*args): return _pygamma.PulComposite_channel(*args)
    def FZ(*args): return _pygamma.PulComposite_FZ(*args)
    def ROp(*args): return _pygamma.PulComposite_ROp(*args)
    def Precision(*args): return _pygamma.PulComposite_Precision(*args)
    def scalegB1(*args): return _pygamma.PulComposite_scalegB1(*args)
    def setRelax(*args): return _pygamma.PulComposite_setRelax(*args)
    def FIDheader(*args): return _pygamma.PulComposite_FIDheader(*args)
    def FIDpoint(*args): return _pygamma.PulComposite_FIDpoint(*args)
    def FIDvalue(*args): return _pygamma.PulComposite_FIDvalue(*args)
    def FIDtell(*args): return _pygamma.PulComposite_FIDtell(*args)
    def FIDsync(*args): return _pygamma.PulComposite_FIDsync(*args)
    def FIDtest(*args): return _pygamma.PulComposite_FIDtest(*args)
    def FIDsynchWF(*args): return _pygamma.PulComposite_FIDsynchWF(*args)
    def FIDsynchST(*args): return _pygamma.PulComposite_FIDsynchST(*args)
    def FIDsynchFR(*args): return _pygamma.PulComposite_FIDsynchFR(*args)
    def FID(*args): return _pygamma.PulComposite_FID(*args)
    def FIDRsynchWF(*args): return _pygamma.PulComposite_FIDRsynchWF(*args)
    def FIDRsynchST(*args): return _pygamma.PulComposite_FIDRsynchST(*args)
    def FIDRsynchFR(*args): return _pygamma.PulComposite_FIDRsynchFR(*args)
    def FIDR(*args): return _pygamma.PulComposite_FIDR(*args)
PulComposite_swigregister = _pygamma.PulComposite_swigregister
PulComposite_swigregister(PulComposite)



