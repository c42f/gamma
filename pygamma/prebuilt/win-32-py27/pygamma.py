# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pygamma', [dirname(__file__)])
        except ImportError:
            import _pygamma
            return _pygamma
        if fp is not None:
            try:
                _mod = imp.load_module('_pygamma', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pygamma = swig_import_helper()
    del swig_import_helper
else:
    import _pygamma
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pygamma.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pygamma.SwigPyIterator_value(self)
    def incr(self, n=1): return _pygamma.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pygamma.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pygamma.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pygamma.SwigPyIterator_equal(self, *args)
    def copy(self): return _pygamma.SwigPyIterator_copy(self)
    def next(self): return _pygamma.SwigPyIterator_next(self)
    def __next__(self): return _pygamma.SwigPyIterator___next__(self)
    def previous(self): return _pygamma.SwigPyIterator_previous(self)
    def advance(self, *args): return _pygamma.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pygamma.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pygamma.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pygamma.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pygamma.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pygamma.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pygamma.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ParameterSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterSet, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pygamma.new_ParameterSet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_ParameterSet
    __del__ = lambda self : None;
ParameterSet_swigregister = _pygamma.ParameterSet_swigregister
ParameterSet_swigregister(ParameterSet)
cvar = _pygamma.cvar
GamSParInit = cvar.GamSParInit
GamIntVecInit = cvar.GamIntVecInit

class SinglePar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SinglePar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SinglePar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_SinglePar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_SinglePar
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.SinglePar___assign__(self, *args)
    def SPerror(self, *args): return _pygamma.SinglePar_SPerror(self, *args)
    def SPfatality(self, *args): return _pygamma.SinglePar_SPfatality(self, *args)
    def setCoord(self, *args): return _pygamma.SinglePar_setCoord(self, *args)
    def data(self, *args): return _pygamma.SinglePar_data(self, *args)
    def type(self, *args): return _pygamma.SinglePar_type(self, *args)
    def name(self, *args): return _pygamma.SinglePar_name(self, *args)
    def state(self, *args): return _pygamma.SinglePar_state(self, *args)
    def GetNS(self, *args): return _pygamma.SinglePar_GetNS(self, *args)
    def parse(self, *args): return _pygamma.SinglePar_parse(self, *args)
    def printStrings(self): return _pygamma.SinglePar_printStrings(self)
    def __eq__(self, *args): return _pygamma.SinglePar___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.SinglePar___ne__(self, *args)
    def __lt__(self, *args): return _pygamma.SinglePar___lt__(self, *args)
    def __gt__(self, *args): return _pygamma.SinglePar___gt__(self, *args)
SinglePar_swigregister = _pygamma.SinglePar_swigregister
SinglePar_swigregister(SinglePar)

class Isotope(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Isotope, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Isotope, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_Isotope(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_Isotope
    __del__ = lambda self : None;
    def qn(self): return _pygamma.Isotope_qn(self)
    def HS(self): return _pygamma.Isotope_HS(self)
    def momentum(self): return _pygamma.Isotope_momentum(self)
    def symbol(self): return _pygamma.Isotope_symbol(self)
    def name(self): return _pygamma.Isotope_name(self)
    def element(self): return _pygamma.Isotope_element(self)
    def number(self): return _pygamma.Isotope_number(self)
    def mass(self): return _pygamma.Isotope_mass(self)
    def weight(self): return _pygamma.Isotope_weight(self)
    def gamma(self): return _pygamma.Isotope_gamma(self)
    def receptivity(self): return _pygamma.Isotope_receptivity(self)
    def relative_frequency(self): return _pygamma.Isotope_relative_frequency(self)
    def electron(self): return _pygamma.Isotope_electron(self)
    def read(self, *args): return _pygamma.Isotope_read(self, *args)
    def printStrings(self, hdr=True): return _pygamma.Isotope_printStrings(self, hdr)
    def seek(self, *args): return _pygamma.Isotope_seek(self, *args)
    def exists(self, *args): return _pygamma.Isotope_exists(self, *args)
    __swig_getmethods__["known"] = lambda x: _pygamma.Isotope_known
    if _newclass:known = staticmethod(_pygamma.Isotope_known)
    __swig_getmethods__["size"] = lambda x: _pygamma.Isotope_size
    if _newclass:size = staticmethod(_pygamma.Isotope_size)
    __swig_getmethods__["PrintListStrings"] = lambda x: _pygamma.Isotope_PrintListStrings
    if _newclass:PrintListStrings = staticmethod(_pygamma.Isotope_PrintListStrings)
    __swig_getmethods__["AddIsotope"] = lambda x: _pygamma.Isotope_AddIsotope
    if _newclass:AddIsotope = staticmethod(_pygamma.Isotope_AddIsotope)
    def __eq__(self, *args): return _pygamma.Isotope___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.Isotope___ne__(self, *args)
    def __lt__(self, *args): return _pygamma.Isotope___lt__(self, *args)
    def __gt__(self, *args): return _pygamma.Isotope___gt__(self, *args)
    def nepair(self, *args): return _pygamma.Isotope_nepair(self, *args)
    def enpair(self, *args): return _pygamma.Isotope_enpair(self, *args)
    def eepair(self, *args): return _pygamma.Isotope_eepair(self, *args)
    def nnpair(self, *args): return _pygamma.Isotope_nnpair(self, *args)
Isotope_swigregister = _pygamma.Isotope_swigregister
Isotope_swigregister(Isotope)

def Isotope_known(*args):
  return _pygamma.Isotope_known(*args)
Isotope_known = _pygamma.Isotope_known

def Isotope_size():
  return _pygamma.Isotope_size()
Isotope_size = _pygamma.Isotope_size

def Isotope_PrintListStrings():
  return _pygamma.Isotope_PrintListStrings()
Isotope_PrintListStrings = _pygamma.Isotope_PrintListStrings

def Isotope_AddIsotope(*args):
  return _pygamma.Isotope_AddIsotope(*args)
Isotope_AddIsotope = _pygamma.Isotope_AddIsotope

PI = _pygamma.PI
PI2 = _pygamma.PI2

def query_parameter(*args):
  return _pygamma.query_parameter(*args)
query_parameter = _pygamma.query_parameter

def ask_set(*args):
  return _pygamma.ask_set(*args)
ask_set = _pygamma.ask_set

def GAMMAerror(*args):
  return _pygamma.GAMMAerror(*args)
GAMMAerror = _pygamma.GAMMAerror

def GAMMAfatal():
  return _pygamma.GAMMAfatal()
GAMMAfatal = _pygamma.GAMMAfatal
class IsotopeData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotopeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IsotopeData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_IsotopeData(*args)
        try: self.this.append(this)
        except: self.this = this
    def __assign__(self, *args): return _pygamma.IsotopeData___assign__(self, *args)
    __swig_destroy__ = _pygamma.delete_IsotopeData
    __del__ = lambda self : None;
    def qn(self): return _pygamma.IsotopeData_qn(self)
    def HS(self): return _pygamma.IsotopeData_HS(self)
    def momentum(self): return _pygamma.IsotopeData_momentum(self)
    def symbol(self): return _pygamma.IsotopeData_symbol(self)
    def name(self): return _pygamma.IsotopeData_name(self)
    def element(self): return _pygamma.IsotopeData_element(self)
    def number(self): return _pygamma.IsotopeData_number(self)
    def mass(self): return _pygamma.IsotopeData_mass(self)
    def weight(self): return _pygamma.IsotopeData_weight(self)
    def recept(self): return _pygamma.IsotopeData_recept(self)
    def electron(self): return _pygamma.IsotopeData_electron(self)
    def rel_freq(self): return _pygamma.IsotopeData_rel_freq(self)
    def printStrings(self, hdr=True): return _pygamma.IsotopeData_printStrings(self, hdr)
IsotopeData_swigregister = _pygamma.IsotopeData_swigregister
IsotopeData_swigregister(IsotopeData)
PIx2 = cvar.PIx2
DEG2RAD = cvar.DEG2RAD
RAD2DEG = cvar.RAD2DEG
HZ2RAD = cvar.HZ2RAD
RAD2HZ = cvar.RAD2HZ
HZ2GAUSS = cvar.HZ2GAUSS
GAUSS2HZ = cvar.GAUSS2HZ
GHZ2GAUSS = cvar.GHZ2GAUSS
GAUSS2GHZ = cvar.GAUSS2GHZ
MU_E = cvar.MU_E
BOHRMAG = cvar.BOHRMAG
GFREE = cvar.GFREE
GAMMAe = cvar.GAMMAe
GAMMA1H = cvar.GAMMA1H
DEFISO = cvar.DEFISO
PLANCK = cvar.PLANCK
HBAR = cvar.HBAR


def cutWhite(*args):
  return _pygamma.cutWhite(*args)
cutWhite = _pygamma.cutWhite

def cutString(*args):
  return _pygamma.cutString(*args)
cutString = _pygamma.cutString

def cutParBlks(*args):
  return _pygamma.cutParBlks(*args)
cutParBlks = _pygamma.cutParBlks

def cutBlksXBlks(*args):
  return _pygamma.cutBlksXBlks(*args)
cutBlksXBlks = _pygamma.cutBlksXBlks

def cutDouble(*args):
  return _pygamma.cutDouble(*args)
cutDouble = _pygamma.cutDouble

def cutInt(*args):
  return _pygamma.cutInt(*args)
cutInt = _pygamma.cutInt

def Gitoa(*args):
  return _pygamma.Gitoa(*args)
Gitoa = _pygamma.Gitoa

def Gdec2(*args):
  return _pygamma.Gdec2(*args)
Gdec2 = _pygamma.Gdec2

def Gdec(*args):
  return _pygamma.Gdec(*args)
Gdec = _pygamma.Gdec

def Gform(*args):
  return _pygamma.Gform(*args)
Gform = _pygamma.Gform

def CenterString(*args):
  return _pygamma.CenterString(*args)
CenterString = _pygamma.CenterString

def enable_blockdiag():
  return _pygamma.enable_blockdiag()
enable_blockdiag = _pygamma.enable_blockdiag

def disable_blockdiag():
  return _pygamma.disable_blockdiag()
disable_blockdiag = _pygamma.disable_blockdiag
class matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_matrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_matrix
    __del__ = lambda self : None;
    def __call__(self, *args): return _pygamma.matrix___call__(self, *args)
    def elem(self, *args): return _pygamma.matrix_elem(self, *args)
    def get(self, *args): return _pygamma.matrix_get(self, *args)
    def getRe(self, *args): return _pygamma.matrix_getRe(self, *args)
    def getIm(self, *args): return _pygamma.matrix_getIm(self, *args)
    def put(self, *args): return _pygamma.matrix_put(self, *args)
    def put_h(self, *args): return _pygamma.matrix_put_h(self, *args)
    def get_block(self, *args): return _pygamma.matrix_get_block(self, *args)
    def put_block(self, *args): return _pygamma.matrix_put_block(self, *args)
    def stored_hermitian(self): return _pygamma.matrix_stored_hermitian(self)
    def check_hermitian(self, *args): return _pygamma.matrix_check_hermitian(self, *args)
    def set_hermitian(self, *args): return _pygamma.matrix_set_hermitian(self, *args)
    def test_hermitian(self, *args): return _pygamma.matrix_test_hermitian(self, *args)
    def stored_type(self): return _pygamma.matrix_stored_type(self)
    def test_type(self, *args): return _pygamma.matrix_test_type(self, *args)
    def set_type(self, *args): return _pygamma.matrix_set_type(self, *args)
    def check_type(self, *args): return _pygamma.matrix_check_type(self, *args)
    def mxtype(self): return _pygamma.matrix_mxtype(self)
    def cols(self): return _pygamma.matrix_cols(self)
    def rows(self): return _pygamma.matrix_rows(self)
    def refs(self): return _pygamma.matrix_refs(self)
    def pts(self): return _pygamma.matrix_pts(self)
    def is_symmetric(self, *args): return _pygamma.matrix_is_symmetric(self, *args)
    def is_hermitian(self, *args): return _pygamma.matrix_is_hermitian(self, *args)
    def is_unitary(self, *args): return _pygamma.matrix_is_unitary(self, *args)
    def is_real(self, *args): return _pygamma.matrix_is_real(self, *args)
    def is_imaginary(self, *args): return _pygamma.matrix_is_imaginary(self, *args)
    def is_complex(self, *args): return _pygamma.matrix_is_complex(self, *args)
    def is_zero(self, *args): return _pygamma.matrix_is_zero(self, *args)
    def is_diagonal(self, *args): return _pygamma.matrix_is_diagonal(self, *args)
    def is_square(self): return _pygamma.matrix_is_square(self)
    def __add__(self, *args): return _pygamma.matrix___add__(self, *args)
    def __sub__(self, *args): return _pygamma.matrix___sub__(self, *args)
    def __mul__(self, *args): return _pygamma.matrix___mul__(self, *args)
    def __div__(self, *args): return _pygamma.matrix___div__(self, *args)
    def __iadd__(self, *args): return _pygamma.matrix___iadd__(self, *args)
    def __isub__(self, *args): return _pygamma.matrix___isub__(self, *args)
    def __imul__(self, *args): return _pygamma.matrix___imul__(self, *args)
    def __idiv__(self, *args): return _pygamma.matrix___idiv__(self, *args)
    def __neg__(self): return _pygamma.matrix___neg__(self)
    def Re(self): return _pygamma.matrix_Re(self)
    def Im(self): return _pygamma.matrix_Im(self)
    def conj(self): return _pygamma.matrix_conj(self)
    def transpose(self): return _pygamma.matrix_transpose(self)
    def adjoint(self): return _pygamma.matrix_adjoint(self)
    def exp(self): return _pygamma.matrix_exp(self)
    def swaprows(self, *args): return _pygamma.matrix_swaprows(self, *args)
    def swapcols(self, *args): return _pygamma.matrix_swapcols(self, *args)
    def permute(self, *args): return _pygamma.matrix_permute(self, *args)
    def maxRe(self): return _pygamma.matrix_maxRe(self)
    def maxIm(self): return _pygamma.matrix_maxIm(self)
    def maxZ(self): return _pygamma.matrix_maxZ(self)
    def minRe(self): return _pygamma.matrix_minRe(self)
    def minIm(self): return _pygamma.matrix_minIm(self)
    def minZ(self): return _pygamma.matrix_minZ(self)
    def trace(self, *args): return _pygamma.matrix_trace(self, *args)
    def det(self): return _pygamma.matrix_det(self)
    def FFT(self): return _pygamma.matrix_FFT(self)
    def IFFT(self): return _pygamma.matrix_IFFT(self)
    __swig_getmethods__["Header"] = lambda x: _pygamma.matrix_Header
    if _newclass:Header = staticmethod(_pygamma.matrix_Header)
    __swig_getmethods__["PrintRI"] = lambda x: _pygamma.matrix_PrintRI
    if _newclass:PrintRI = staticmethod(_pygamma.matrix_PrintRI)
    __swig_getmethods__["PrintAll"] = lambda x: _pygamma.matrix_PrintAll
    if _newclass:PrintAll = staticmethod(_pygamma.matrix_PrintAll)
    __swig_getmethods__["PictDim"] = lambda x: _pygamma.matrix_PictDim
    if _newclass:PictDim = staticmethod(_pygamma.matrix_PictDim)
    __swig_getmethods__["PrintVal"] = lambda x: _pygamma.matrix_PrintVal
    if _newclass:PrintVal = staticmethod(_pygamma.matrix_PrintVal)
    __swig_getmethods__["PrintCols"] = lambda x: _pygamma.matrix_PrintCols
    if _newclass:PrintCols = staticmethod(_pygamma.matrix_PrintCols)
    __swig_getmethods__["PrintRows"] = lambda x: _pygamma.matrix_PrintRows
    if _newclass:PrintRows = staticmethod(_pygamma.matrix_PrintRows)
    def ask(self, *args): return _pygamma.matrix_ask(self, *args)
    def resize(self, *args): return _pygamma.matrix_resize(self, *args)
    def diagonal_form(self): return _pygamma.matrix_diagonal_form(self)
    def same_reference_as(self, *args): return _pygamma.matrix_same_reference_as(self, *args)
    def status(self, full=0): return _pygamma.matrix_status(self, full)
    def BlockDiag(self, *args): return _pygamma.matrix_BlockDiag(self, *args)
    def SymTriDiag(self, *args): return _pygamma.matrix_SymTriDiag(self, *args)
    def HermTriDiag(self, *args): return _pygamma.matrix_HermTriDiag(self, *args)
    def SymDiag(self, *args): return _pygamma.matrix_SymDiag(self, *args)
    def Diagonalize(self, *args): return _pygamma.matrix_Diagonalize(self, *args)
    def TestEigenSystem(self, pf=1): return _pygamma.matrix_TestEigenSystem(self, pf)
    def TestTransform(self, *args): return _pygamma.matrix_TestTransform(self, *args)
    def ColumnNorms(self): return _pygamma.matrix_ColumnNorms(self)
    def TestIdentity(self, *args): return _pygamma.matrix_TestIdentity(self, *args)
    def TestUnitary(self, *args): return _pygamma.matrix_TestUnitary(self, *args)
    def TestUTransform(self, *args): return _pygamma.matrix_TestUTransform(self, *args)
    def __eq__(self, *args): return _pygamma.matrix___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.matrix___ne__(self, *args)
    def __lt__(self, *args): return _pygamma.matrix___lt__(self, *args)
    def __gt__(self, *args): return _pygamma.matrix___gt__(self, *args)
matrix_swigregister = _pygamma.matrix_swigregister
matrix_swigregister(matrix)

def matrix_Header(*args):
  return _pygamma.matrix_Header(*args)
matrix_Header = _pygamma.matrix_Header

def matrix_PrintRI(*args):
  return _pygamma.matrix_PrintRI(*args)
matrix_PrintRI = _pygamma.matrix_PrintRI

def matrix_PrintAll(*args):
  return _pygamma.matrix_PrintAll(*args)
matrix_PrintAll = _pygamma.matrix_PrintAll

def matrix_PictDim(*args):
  return _pygamma.matrix_PictDim(*args)
matrix_PictDim = _pygamma.matrix_PictDim

def matrix_PrintVal(*args):
  return _pygamma.matrix_PrintVal(*args)
matrix_PrintVal = _pygamma.matrix_PrintVal

def matrix_PrintCols(*args):
  return _pygamma.matrix_PrintCols(*args)
matrix_PrintCols = _pygamma.matrix_PrintCols

def matrix_PrintRows(*args):
  return _pygamma.matrix_PrintRows(*args)
matrix_PrintRows = _pygamma.matrix_PrintRows

class row_vector(matrix):
    __swig_setmethods__ = {}
    for _s in [matrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, row_vector, name, value)
    __swig_getmethods__ = {}
    for _s in [matrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, row_vector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_row_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_row_vector
    __del__ = lambda self : None;
    def __call__(self, *args): return _pygamma.row_vector___call__(self, *args)
    def get(self, *args): return _pygamma.row_vector_get(self, *args)
    def getRe(self, *args): return _pygamma.row_vector_getRe(self, *args)
    def getIm(self, *args): return _pygamma.row_vector_getIm(self, *args)
    def put(self, *args): return _pygamma.row_vector_put(self, *args)
    def elements(self): return _pygamma.row_vector_elements(self)
    def size(self): return _pygamma.row_vector_size(self)
    def __add__(self, *args): return _pygamma.row_vector___add__(self, *args)
    def __sub__(self, *args): return _pygamma.row_vector___sub__(self, *args)
    def __mul__(self, *args): return _pygamma.row_vector___mul__(self, *args)
    def __iadd__(self, *args): return _pygamma.row_vector___iadd__(self, *args)
    def __isub__(self, *args): return _pygamma.row_vector___isub__(self, *args)
    def __imul__(self, *args): return _pygamma.row_vector___imul__(self, *args)
    def __idiv__(self, *args): return _pygamma.row_vector___idiv__(self, *args)
    def differential(self): return _pygamma.row_vector_differential(self)
    def norm(self): return _pygamma.row_vector_norm(self)
    def maxRe(self): return _pygamma.row_vector_maxRe(self)
    def maxIm(self): return _pygamma.row_vector_maxIm(self)
    def maxZ(self): return _pygamma.row_vector_maxZ(self)
    def minRe(self): return _pygamma.row_vector_minRe(self)
    def minIm(self): return _pygamma.row_vector_minIm(self)
    def minZ(self): return _pygamma.row_vector_minZ(self)
    def max(self, type=0): return _pygamma.row_vector_max(self, type)
    def min(self, type=0): return _pygamma.row_vector_min(self, type)
    def flip(self): return _pygamma.row_vector_flip(self)
    def sum(self, *args): return _pygamma.row_vector_sum(self, *args)
    def zero(self): return _pygamma.row_vector_zero(self)
    def sort(self, type=0): return _pygamma.row_vector_sort(self, type)
    def product(self, *args): return _pygamma.row_vector_product(self, *args)
    def scalar_product(self, *args): return _pygamma.row_vector_scalar_product(self, *args)
    def hdrString(self): return _pygamma.row_vector_hdrString(self)
    SMIS = _pygamma.row_vector_SMIS
    SIEMENS = _pygamma.row_vector_SIEMENS
    SIEMENS_NOHDR = _pygamma.row_vector_SIEMENS_NOHDR
    PLAIN_ASCII = _pygamma.row_vector_PLAIN_ASCII
    ASCII_MT_DEG = _pygamma.row_vector_ASCII_MT_DEG
    SVS = _pygamma.row_vector_SVS
    __swig_getmethods__["read_pulse"] = lambda x: _pygamma.row_vector_read_pulse
    if _newclass:read_pulse = staticmethod(_pygamma.row_vector_read_pulse)
    def ask(self): return _pygamma.row_vector_ask(self)
row_vector_swigregister = _pygamma.row_vector_swigregister
row_vector_swigregister(row_vector)

def row_vector_read_pulse(*args):
  return _pygamma.row_vector_read_pulse(*args)
row_vector_read_pulse = _pygamma.row_vector_read_pulse

class col_vector(matrix):
    __swig_setmethods__ = {}
    for _s in [matrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, col_vector, name, value)
    __swig_getmethods__ = {}
    for _s in [matrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, col_vector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_col_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_col_vector
    __del__ = lambda self : None;
    def __call__(self, *args): return _pygamma.col_vector___call__(self, *args)
    def get(self, *args): return _pygamma.col_vector_get(self, *args)
    def getRe(self, *args): return _pygamma.col_vector_getRe(self, *args)
    def getIm(self, *args): return _pygamma.col_vector_getIm(self, *args)
    def put(self, *args): return _pygamma.col_vector_put(self, *args)
    def elements(self): return _pygamma.col_vector_elements(self)
    def size(self): return _pygamma.col_vector_size(self)
    def __add__(self, *args): return _pygamma.col_vector___add__(self, *args)
    def __sub__(self, *args): return _pygamma.col_vector___sub__(self, *args)
    def __mul__(self, *args): return _pygamma.col_vector___mul__(self, *args)
    def __iadd__(self, *args): return _pygamma.col_vector___iadd__(self, *args)
    def __isub__(self, *args): return _pygamma.col_vector___isub__(self, *args)
    def __imul__(self, *args): return _pygamma.col_vector___imul__(self, *args)
    def __idiv__(self, *args): return _pygamma.col_vector___idiv__(self, *args)
    def adjoint(self): return _pygamma.col_vector_adjoint(self)
    def transpose(self): return _pygamma.col_vector_transpose(self)
    def trace(self): return _pygamma.col_vector_trace(self)
    def differential(self): return _pygamma.col_vector_differential(self)
    def norm(self): return _pygamma.col_vector_norm(self)
    def maxRe(self): return _pygamma.col_vector_maxRe(self)
    def maxIm(self): return _pygamma.col_vector_maxIm(self)
    def maxZ(self): return _pygamma.col_vector_maxZ(self)
    def minRe(self): return _pygamma.col_vector_minRe(self)
    def minIm(self): return _pygamma.col_vector_minIm(self)
    def minZ(self): return _pygamma.col_vector_minZ(self)
    def max(self, type=0): return _pygamma.col_vector_max(self, type)
    def min(self, type=0): return _pygamma.col_vector_min(self, type)
    def flip(self): return _pygamma.col_vector_flip(self)
    def sum(self, *args): return _pygamma.col_vector_sum(self, *args)
    def zero(self): return _pygamma.col_vector_zero(self)
    def sort(self, type=0): return _pygamma.col_vector_sort(self, type)
    def product(self, *args): return _pygamma.col_vector_product(self, *args)
    def scalar_product(self, *args): return _pygamma.col_vector_scalar_product(self, *args)
    def hdrString(self): return _pygamma.col_vector_hdrString(self)
    def ask(self): return _pygamma.col_vector_ask(self)
col_vector_swigregister = _pygamma.col_vector_swigregister
col_vector_swigregister(col_vector)

class complex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, complex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, complex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_complex(*args)
        try: self.this.append(this)
        except: self.this = this
    def Relem(self): return _pygamma.complex_Relem(self)
    def Ielem(self): return _pygamma.complex_Ielem(self)
    def Rec(self): return _pygamma.complex_Rec(self)
    def Imc(self): return _pygamma.complex_Imc(self)
    def real(self): return _pygamma.complex_real(self)
    def imag(self): return _pygamma.complex_imag(self)
    def __add__(self, *args): return _pygamma.complex___add__(self, *args)
    def __iadd__(self, *args): return _pygamma.complex___iadd__(self, *args)
    def __sub__(self, *args): return _pygamma.complex___sub__(self, *args)
    def __isub__(self, *args): return _pygamma.complex___isub__(self, *args)
    def __mul__(self, *args): return _pygamma.complex___mul__(self, *args)
    def __imul__(self, *args): return _pygamma.complex___imul__(self, *args)
    def __div__(self, *args): return _pygamma.complex___div__(self, *args)
    def __idiv__(self, *args): return _pygamma.complex___idiv__(self, *args)
    def conj(self): return _pygamma.complex_conj(self)
    def conj_times(self, *args): return _pygamma.complex_conj_times(self, *args)
    def Zexp(self): return _pygamma.complex_Zexp(self)
    def Zsin(self): return _pygamma.complex_Zsin(self)
    def Zcos(self): return _pygamma.complex_Zcos(self)
    def Ztan(self): return _pygamma.complex_Ztan(self)
    def Zasin(self): return _pygamma.complex_Zasin(self)
    def Zacos(self): return _pygamma.complex_Zacos(self)
    def Zatan(self): return _pygamma.complex_Zatan(self)
    def Zsinh(self): return _pygamma.complex_Zsinh(self)
    def Zcosh(self): return _pygamma.complex_Zcosh(self)
    def Ztanh(self): return _pygamma.complex_Ztanh(self)
    def Zasinh(self): return _pygamma.complex_Zasinh(self)
    def Zacosh(self): return _pygamma.complex_Zacosh(self)
    def Zatanh(self): return _pygamma.complex_Zatanh(self)
    __swig_getmethods__["Reiphi"] = lambda x: _pygamma.complex_Reiphi
    if _newclass:Reiphi = staticmethod(_pygamma.complex_Reiphi)
    __swig_getmethods__["delim"] = lambda x: _pygamma.complex_delim
    if _newclass:delim = staticmethod(_pygamma.complex_delim)
    __swig_getmethods__["scinot"] = lambda x: _pygamma.complex_scinot
    if _newclass:scinot = staticmethod(_pygamma.complex_scinot)
    __swig_getmethods__["digits"] = lambda x: _pygamma.complex_digits
    if _newclass:digits = staticmethod(_pygamma.complex_digits)
    __swig_getmethods__["dadp"] = lambda x: _pygamma.complex_dadp
    if _newclass:dadp = staticmethod(_pygamma.complex_dadp)
    __swig_getmethods__["dlength"] = lambda x: _pygamma.complex_dlength
    if _newclass:dlength = staticmethod(_pygamma.complex_dlength)
    __swig_getmethods__["dformat"] = lambda x: _pygamma.complex_dformat
    if _newclass:dformat = staticmethod(_pygamma.complex_dformat)
    __swig_getmethods__["zlength"] = lambda x: _pygamma.complex_zlength
    if _newclass:zlength = staticmethod(_pygamma.complex_zlength)
    __swig_getmethods__["normphase"] = lambda x: _pygamma.complex_normphase
    if _newclass:normphase = staticmethod(_pygamma.complex_normphase)
    __swig_getmethods__["complex_getf"] = lambda x: _pygamma.complex_complex_getf
    if _newclass:complex_getf = staticmethod(_pygamma.complex_complex_getf)
    def printString(self): return _pygamma.complex_printString(self)
    def write(self, *args): return _pygamma.complex_write(self, *args)
    def read(self, *args): return _pygamma.complex_read(self, *args)
    def __eq__(self, *args): return _pygamma.complex___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.complex___ne__(self, *args)
    def __lt__(self, *args): return _pygamma.complex___lt__(self, *args)
    def __gt__(self, *args): return _pygamma.complex___gt__(self, *args)
    __swig_destroy__ = _pygamma.delete_complex
    __del__ = lambda self : None;
complex_swigregister = _pygamma.complex_swigregister
complex_swigregister(complex)

def Swap(*args):
  return _pygamma.Swap(*args)
Swap = _pygamma.Swap

def complex_Reiphi(*args):
  return _pygamma.complex_Reiphi(*args)
complex_Reiphi = _pygamma.complex_Reiphi

def complex_delim(*args):
  return _pygamma.complex_delim(*args)
complex_delim = _pygamma.complex_delim

def complex_scinot(*args):
  return _pygamma.complex_scinot(*args)
complex_scinot = _pygamma.complex_scinot

def complex_digits(*args):
  return _pygamma.complex_digits(*args)
complex_digits = _pygamma.complex_digits

def complex_dadp(*args):
  return _pygamma.complex_dadp(*args)
complex_dadp = _pygamma.complex_dadp

def complex_dlength():
  return _pygamma.complex_dlength()
complex_dlength = _pygamma.complex_dlength

def complex_dformat():
  return _pygamma.complex_dformat()
complex_dformat = _pygamma.complex_dformat

def complex_zlength():
  return _pygamma.complex_zlength()
complex_zlength = _pygamma.complex_zlength

def complex_normphase():
  return _pygamma.complex_normphase()
complex_normphase = _pygamma.complex_normphase

def complex_complex_getf(*args):
  return _pygamma.complex_complex_getf(*args)
complex_complex_getf = _pygamma.complex_complex_getf


def DoubleMag(*args):
  return _pygamma.DoubleMag(*args)
DoubleMag = _pygamma.DoubleMag

def SecUnits(*args):
  return _pygamma.SecUnits(*args)
SecUnits = _pygamma.SecUnits

def HzUnits(*args):
  return _pygamma.HzUnits(*args)
HzUnits = _pygamma.HzUnits

def Mo_vector(*args):
  return _pygamma.Mo_vector(*args)
Mo_vector = _pygamma.Mo_vector

def analyze(*args):
  return _pygamma.analyze(*args)
analyze = _pygamma.analyze

def TrajTiming(*args):
  return _pygamma.TrajTiming(*args)
TrajTiming = _pygamma.TrajTiming
class BlochSys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlochSys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlochSys, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_BlochSys(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_BlochSys
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.BlochSys___assign__(self, *args)
    def NIso(self): return _pygamma.BlochSys_NIso(self)
    def IsoMaxLength(self): return _pygamma.BlochSys_IsoMaxLength(self)
    def NSpins(self): return _pygamma.BlochSys_NSpins(self)
    def R1(self, *args): return _pygamma.BlochSys_R1(self, *args)
    def T1(self, *args): return _pygamma.BlochSys_T1(self, *args)
    def R2(self, *args): return _pygamma.BlochSys_R2(self, *args)
    def T2(self, *args): return _pygamma.BlochSys_T2(self, *args)
    def LW(self, *args): return _pygamma.BlochSys_LW(self, *args)
    def MaxExchange(self): return _pygamma.BlochSys_MaxExchange(self)
    def Norms(self, *args): return _pygamma.BlochSys_Norms(self, *args)
    def Norm(self, *args): return _pygamma.BlochSys_Norm(self, *args)
    def H(self, *args): return _pygamma.BlochSys_H(self, *args)
    def B(self, *args): return _pygamma.BlochSys_B(self, *args)
    def R(self): return _pygamma.BlochSys_R(self)
    def K(self): return _pygamma.BlochSys_K(self)
    def Meq(self): return _pygamma.BlochSys_Meq(self)
    def Mo(self): return _pygamma.BlochSys_Mo(self)
    def Mx(self): return _pygamma.BlochSys_Mx(self)
    def My(self): return _pygamma.BlochSys_My(self)
    def Mz(self): return _pygamma.BlochSys_Mz(self)
    def Mss(self, *args): return _pygamma.BlochSys_Mss(self, *args)
    def DetectMu(self, *args): return _pygamma.BlochSys_DetectMu(self, *args)
    def DetectMx(self, *args): return _pygamma.BlochSys_DetectMx(self, *args)
    def DetectMy(self, *args): return _pygamma.BlochSys_DetectMy(self, *args)
    def DetectMz(self, *args): return _pygamma.BlochSys_DetectMz(self, *args)
    def size(self): return _pygamma.BlochSys_size(self)
    def read(self, *args): return _pygamma.BlochSys_read(self, *args)
    def ask_read(self, *args): return _pygamma.BlochSys_ask_read(self, *args)
BlochSys_swigregister = _pygamma.BlochSys_swigregister
BlochSys_swigregister(BlochSys)
complex0 = cvar.complex0
complex1 = cvar.complex1
complexi = cvar.complexi

class MagVec(col_vector):
    __swig_setmethods__ = {}
    for _s in [col_vector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagVec, name, value)
    __swig_getmethods__ = {}
    for _s in [col_vector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MagVec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_MagVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def __add__(self, *args): return _pygamma.MagVec___add__(self, *args)
    def __iadd__(self, *args): return _pygamma.MagVec___iadd__(self, *args)
    def __sub__(self, *args): return _pygamma.MagVec___sub__(self, *args)
    def __isub__(self, *args): return _pygamma.MagVec___isub__(self, *args)
    def NComps(self): return _pygamma.MagVec_NComps(self)
    def x(self, cmp=0): return _pygamma.MagVec_x(self, cmp)
    def y(self, cmp=0): return _pygamma.MagVec_y(self, cmp)
    def z(self, cmp=0): return _pygamma.MagVec_z(self, cmp)
    def norm(self, cmp=0): return _pygamma.MagVec_norm(self, cmp)
    def theta(self, cmp=0): return _pygamma.MagVec_theta(self, cmp)
    def phi(self, cmp=0): return _pygamma.MagVec_phi(self, cmp)
    def Norms(self, *args): return _pygamma.MagVec_Norms(self, *args)
    def Norm(self, *args): return _pygamma.MagVec_Norm(self, *args)
    def PSetAdd(self, *args): return _pygamma.MagVec_PSetAdd(self, *args)
    def write(self, *args): return _pygamma.MagVec_write(self, *args)
    def read(self, *args): return _pygamma.MagVec_read(self, *args)
    def ask_read(self, *args): return _pygamma.MagVec_ask_read(self, *args)
    def printStrings(self): return _pygamma.MagVec_printStrings(self)
    def Mx(self, *args): return _pygamma.MagVec_Mx(self, *args)
    def My(self, *args): return _pygamma.MagVec_My(self, *args)
    def Mz(self, *args): return _pygamma.MagVec_Mz(self, *args)
    def MxVec(self, *args): return _pygamma.MagVec_MxVec(self, *args)
    def MyVec(self, *args): return _pygamma.MagVec_MyVec(self, *args)
    def MzVec(self, *args): return _pygamma.MagVec_MzVec(self, *args)
    __swig_destroy__ = _pygamma.delete_MagVec
    __del__ = lambda self : None;
MagVec_swigregister = _pygamma.MagVec_swigregister
MagVec_swigregister(MagVec)

class BlochAcq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlochAcq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlochAcq, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_BlochAcq(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_BlochAcq
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.BlochAcq___assign__(self, *args)
    def T(self, *args): return _pygamma.BlochAcq_T(self, *args)
    def F(self, *args): return _pygamma.BlochAcq_F(self, *args)
    def table(self, *args): return _pygamma.BlochAcq_table(self, *args)
    def full_size(self): return _pygamma.BlochAcq_full_size(self)
BlochAcq_swigregister = _pygamma.BlochAcq_swigregister
BlochAcq_swigregister(BlochAcq)


def T_D(*args):
  return _pygamma.T_D(*args)
T_D = _pygamma.T_D

def T_CSA(*args):
  return _pygamma.T_CSA(*args)
T_CSA = _pygamma.T_CSA

def T_CS2(*args):
  return _pygamma.T_CS2(*args)
T_CS2 = _pygamma.T_CS2

def T_CS(*args):
  return _pygamma.T_CS(*args)
T_CS = _pygamma.T_CS

def T_RF(*args):
  return _pygamma.T_RF(*args)
T_RF = _pygamma.T_RF

def T_Q(*args):
  return _pygamma.T_Q(*args)
T_Q = _pygamma.T_Q

def T1(*args):
  return _pygamma.T1(*args)
T1 = _pygamma.T1

def T10(*args):
  return _pygamma.T10(*args)
T10 = _pygamma.T10

def T11(*args):
  return _pygamma.T11(*args)
T11 = _pygamma.T11

def T22wh(*args):
  return _pygamma.T22wh(*args)
T22wh = _pygamma.T22wh

def T22SSirr(*args):
  return _pygamma.T22SSirr(*args)
T22SSirr = _pygamma.T22SSirr

def T2(*args):
  return _pygamma.T2(*args)
T2 = _pygamma.T2

def T20(*args):
  return _pygamma.T20(*args)
T20 = _pygamma.T20

def T21(*args):
  return _pygamma.T21(*args)
T21 = _pygamma.T21

def T22(*args):
  return _pygamma.T22(*args)
T22 = _pygamma.T22

def T2SS(*args):
  return _pygamma.T2SS(*args)
T2SS = _pygamma.T2SS

def T20SS(*args):
  return _pygamma.T20SS(*args)
T20SS = _pygamma.T20SS

def T21SS(*args):
  return _pygamma.T21SS(*args)
T21SS = _pygamma.T21SS

def T22SS(*args):
  return _pygamma.T22SS(*args)
T22SS = _pygamma.T22SS

def T_prod(*args):
  return _pygamma.T_prod(*args)
T_prod = _pygamma.T_prod

def Clebsch_Gordan(*args):
  return _pygamma.Clebsch_Gordan(*args)
Clebsch_Gordan = _pygamma.Clebsch_Gordan

def Wigner_3j(*args):
  return _pygamma.Wigner_3j(*args)
Wigner_3j = _pygamma.Wigner_3j
class spin_T(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_T, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spin_T, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_spin_T(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_spin_T
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.spin_T___assign__(self, *args)
    def component(self, *args): return _pygamma.spin_T_component(self, *args)
    def rotate(self, *args): return _pygamma.spin_T_rotate(self, *args)
    def Rank(self): return _pygamma.spin_T_Rank(self)
spin_T_swigregister = _pygamma.spin_T_swigregister
spin_T_swigregister(spin_T)


def Rmx(*args):
  return _pygamma.Rmx(*args)
Rmx = _pygamma.Rmx
class coord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coord, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_coord(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_coord
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.coord___assign__(self, *args)
    def get(self, *args): return _pygamma.coord_get(self, *args)
    def x(self, *args): return _pygamma.coord_x(self, *args)
    def y(self, *args): return _pygamma.coord_y(self, *args)
    def z(self, *args): return _pygamma.coord_z(self, *args)
    def xyz(self, *args): return _pygamma.coord_xyz(self, *args)
    def norm(self): return _pygamma.coord_norm(self)
    def Rad(self, *args): return _pygamma.coord_Rad(self, *args)
    def theta(self, *args): return _pygamma.coord_theta(self, *args)
    def phi(self, *args): return _pygamma.coord_phi(self, *args)
    def invert(self): return _pygamma.coord_invert(self)
    __swig_getmethods__["Rz"] = lambda x: _pygamma.coord_Rz
    if _newclass:Rz = staticmethod(_pygamma.coord_Rz)
    __swig_getmethods__["Rx"] = lambda x: _pygamma.coord_Rx
    if _newclass:Rx = staticmethod(_pygamma.coord_Rx)
    __swig_getmethods__["Ry"] = lambda x: _pygamma.coord_Ry
    if _newclass:Ry = staticmethod(_pygamma.coord_Ry)
    def xrotate(self, *args): return _pygamma.coord_xrotate(self, *args)
    def yrotate(self, *args): return _pygamma.coord_yrotate(self, *args)
    def zrotate(self, *args): return _pygamma.coord_zrotate(self, *args)
    def Ralpha(self, *args): return _pygamma.coord_Ralpha(self, *args)
    def Rbeta(self, *args): return _pygamma.coord_Rbeta(self, *args)
    def Rgamma(self, *args): return _pygamma.coord_Rgamma(self, *args)
    def REuler(self, *args): return _pygamma.coord_REuler(self, *args)
    def rotate(self, *args): return _pygamma.coord_rotate(self, *args)
    def trans_x(self, *args): return _pygamma.coord_trans_x(self, *args)
    def trans_x_ip(self, *args): return _pygamma.coord_trans_x_ip(self, *args)
    def trans_y(self, *args): return _pygamma.coord_trans_y(self, *args)
    def trans_y_ip(self, *args): return _pygamma.coord_trans_y_ip(self, *args)
    def trans_z(self, *args): return _pygamma.coord_trans_z(self, *args)
    def trans_z_ip(self, *args): return _pygamma.coord_trans_z_ip(self, *args)
    def translate(self, *args): return _pygamma.coord_translate(self, *args)
    def translate_ip(self, *args): return _pygamma.coord_translate_ip(self, *args)
    def __add__(self, *args): return _pygamma.coord___add__(self, *args)
    def __sub__(self, *args): return _pygamma.coord___sub__(self, *args)
    def __iadd__(self, *args): return _pygamma.coord___iadd__(self, *args)
    def __isub__(self, *args): return _pygamma.coord___isub__(self, *args)
    def __mul__(self, *args): return _pygamma.coord___mul__(self, *args)
    def __imul__(self, *args): return _pygamma.coord___imul__(self, *args)
    def __div__(self, *args): return _pygamma.coord___div__(self, *args)
    def __idiv__(self, *args): return _pygamma.coord___idiv__(self, *args)
    def __eq__(self, *args): return _pygamma.coord___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.coord___ne__(self, *args)
    def __gt__(self, *args): return _pygamma.coord___gt__(self, *args)
    def __lt__(self, *args): return _pygamma.coord___lt__(self, *args)
    def param(self, *args): return _pygamma.coord_param(self, *args)
    def read(self, *args): return _pygamma.coord_read(self, *args)
    __swig_getmethods__["length"] = lambda x: _pygamma.coord_length
    if _newclass:length = staticmethod(_pygamma.coord_length)
    def Cart2Sph(self, rad=1): return _pygamma.coord_Cart2Sph(self, rad)
    def Sph2Cart(self, rad=1): return _pygamma.coord_Sph2Cart(self, rad)
    def Cart2Cyl(self, rad=1): return _pygamma.coord_Cart2Cyl(self, rad)
    def Cyl2Cart(self, rad=1): return _pygamma.coord_Cyl2Cart(self, rad)
    def Sph2Cyl(self, rad=1): return _pygamma.coord_Sph2Cyl(self, rad)
    def Cyl2Sph(self, rad=1): return _pygamma.coord_Cyl2Sph(self, rad)
    __swig_getmethods__["getDefCoord"] = lambda x: _pygamma.coord_getDefCoord
    if _newclass:getDefCoord = staticmethod(_pygamma.coord_getDefCoord)
    __swig_getmethods__["setDefCoord"] = lambda x: _pygamma.coord_setDefCoord
    if _newclass:setDefCoord = staticmethod(_pygamma.coord_setDefCoord)
    __swig_getmethods__["SetCutoff"] = lambda x: _pygamma.coord_SetCutoff
    if _newclass:SetCutoff = staticmethod(_pygamma.coord_SetCutoff)
coord_swigregister = _pygamma.coord_swigregister
coord_swigregister(coord)

def coord_Rz(*args):
  return _pygamma.coord_Rz(*args)
coord_Rz = _pygamma.coord_Rz

def coord_Rx(*args):
  return _pygamma.coord_Rx(*args)
coord_Rx = _pygamma.coord_Rx

def coord_Ry(*args):
  return _pygamma.coord_Ry(*args)
coord_Ry = _pygamma.coord_Ry

def coord_length():
  return _pygamma.coord_length()
coord_length = _pygamma.coord_length

def coord_getDefCoord():
  return _pygamma.coord_getDefCoord()
coord_getDefCoord = _pygamma.coord_getDefCoord

def coord_setDefCoord(*args):
  return _pygamma.coord_setDefCoord(*args)
coord_setDefCoord = _pygamma.coord_setDefCoord

def coord_SetCutoff(*args):
  return _pygamma.coord_SetCutoff(*args)
coord_SetCutoff = _pygamma.coord_SetCutoff

class coord_vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coord_vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coord_vec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_coord_vec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_coord_vec
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.coord_vec___assign__(self, *args)
    def xrotate(self, *args): return _pygamma.coord_vec_xrotate(self, *args)
    def yrotate(self, *args): return _pygamma.coord_vec_yrotate(self, *args)
    def zrotate(self, *args): return _pygamma.coord_vec_zrotate(self, *args)
    def rotate(self, *args): return _pygamma.coord_vec_rotate(self, *args)
    def rotate_ip(self, *args): return _pygamma.coord_vec_rotate_ip(self, *args)
    def translate(self, *args): return _pygamma.coord_vec_translate(self, *args)
    def translate_ip(self, *args): return _pygamma.coord_vec_translate_ip(self, *args)
    def trans_x(self, *args): return _pygamma.coord_vec_trans_x(self, *args)
    def trans_y(self, *args): return _pygamma.coord_vec_trans_y(self, *args)
    def trans_z(self, *args): return _pygamma.coord_vec_trans_z(self, *args)
    def trans_x_ip(self, *args): return _pygamma.coord_vec_trans_x_ip(self, *args)
    def trans_y_ip(self, *args): return _pygamma.coord_vec_trans_y_ip(self, *args)
    def trans_z_ip(self, *args): return _pygamma.coord_vec_trans_z_ip(self, *args)
    def project(self, *args): return _pygamma.coord_vec_project(self, *args)
    def __mul__(self, *args): return _pygamma.coord_vec___mul__(self, *args)
    def __imul__(self, *args): return _pygamma.coord_vec___imul__(self, *args)
    def __div__(self, *args): return _pygamma.coord_vec___div__(self, *args)
    def __idiv__(self, *args): return _pygamma.coord_vec___idiv__(self, *args)
    def __add__(self, *args): return _pygamma.coord_vec___add__(self, *args)
    def __iadd__(self, *args): return _pygamma.coord_vec___iadd__(self, *args)
    def __sub__(self, *args): return _pygamma.coord_vec___sub__(self, *args)
    def __isub__(self, *args): return _pygamma.coord_vec___isub__(self, *args)
    def size(self): return _pygamma.coord_vec_size(self)
    def max_x(self): return _pygamma.coord_vec_max_x(self)
    def max_y(self): return _pygamma.coord_vec_max_y(self)
    def max_z(self): return _pygamma.coord_vec_max_z(self)
    def maxima(self, *args): return _pygamma.coord_vec_maxima(self, *args)
    def max_R(self, *args): return _pygamma.coord_vec_max_R(self, *args)
    def vectors(self): return _pygamma.coord_vec_vectors(self)
    def vectors_f(self): return _pygamma.coord_vec_vectors_f(self)
    def distance(self, *args): return _pygamma.coord_vec_distance(self, *args)
    def distances(self, Angs=0): return _pygamma.coord_vec_distances(self, Angs)
    def thetas(self, deg=0): return _pygamma.coord_vec_thetas(self, deg)
    def phis(self, deg=0): return _pygamma.coord_vec_phis(self, deg)
    def __call__(self, *args): return _pygamma.coord_vec___call__(self, *args)
    def put(self, *args): return _pygamma.coord_vec_put(self, *args)
    def get(self, *args): return _pygamma.coord_vec_get(self, *args)
    def x(self, *args): return _pygamma.coord_vec_x(self, *args)
    def y(self, *args): return _pygamma.coord_vec_y(self, *args)
    def z(self, *args): return _pygamma.coord_vec_z(self, *args)
    def get_block(self, *args): return _pygamma.coord_vec_get_block(self, *args)
    def put_block(self, *args): return _pygamma.coord_vec_put_block(self, *args)
    def PSetAdd(self, *args): return _pygamma.coord_vec_PSetAdd(self, *args)
    def is_zero(self): return _pygamma.coord_vec_is_zero(self)
    def ask_read(self, *args): return _pygamma.coord_vec_ask_read(self, *args)
    def read(self, *args): return _pygamma.coord_vec_read(self, *args)
    def Cart2Sph(self, rad=1): return _pygamma.coord_vec_Cart2Sph(self, rad)
    def Sph2Cart(self, rad=1): return _pygamma.coord_vec_Sph2Cart(self, rad)
    def Cart2Cyl(self, rad=1): return _pygamma.coord_vec_Cart2Cyl(self, rad)
    def Cyl2Cart(self, rad=1): return _pygamma.coord_vec_Cyl2Cart(self, rad)
    def Sph2Cyl(self, rad=1): return _pygamma.coord_vec_Sph2Cyl(self, rad)
    def Cyl2Sph(self, rad=1): return _pygamma.coord_vec_Cyl2Sph(self, rad)
coord_vec_swigregister = _pygamma.coord_vec_swigregister
coord_vec_swigregister(coord_vec)
UnitX = cvar.UnitX
UnitY = cvar.UnitY
UnitZ = cvar.UnitZ
coord0 = cvar.coord0


def Exponential(*args):
  return _pygamma.Exponential(*args)
Exponential = _pygamma.Exponential

def DExponential(*args):
  return _pygamma.DExponential(*args)
DExponential = _pygamma.DExponential

def Exponen_cut(*args):
  return _pygamma.Exponen_cut(*args)
Exponen_cut = _pygamma.Exponen_cut
class ExchProcM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExchProcM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExchProcM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["KRate"] = _pygamma.ExchProcM_KRate_set
    __swig_getmethods__["KRate"] = _pygamma.ExchProcM_KRate_get
    if _newclass:KRate = _swig_property(_pygamma.ExchProcM_KRate_get, _pygamma.ExchProcM_KRate_set)
    __swig_setmethods__["Spins"] = _pygamma.ExchProcM_Spins_set
    __swig_getmethods__["Spins"] = _pygamma.ExchProcM_Spins_get
    if _newclass:Spins = _swig_property(_pygamma.ExchProcM_Spins_get, _pygamma.ExchProcM_Spins_set)
    def XPerror(self, *args): return _pygamma.ExchProcM_XPerror(self, *args)
    def XPfatal(self, *args): return _pygamma.ExchProcM_XPfatal(self, *args)
    def getExch(self, *args): return _pygamma.ExchProcM_getExch(self, *args)
    def parseExch(self, *args): return _pygamma.ExchProcM_parseExch(self, *args)
    def getComps(self, *args): return _pygamma.ExchProcM_getComps(self, *args)
    def getRate(self, *args): return _pygamma.ExchProcM_getRate(self, *args)
    def getXP(self, *args): return _pygamma.ExchProcM_getXP(self, *args)
    def setXP(self, *args): return _pygamma.ExchProcM_setXP(self, *args)
    def CCheck(self, *args): return _pygamma.ExchProcM_CCheck(self, *args)
    def FCheck(self, warn=True): return _pygamma.ExchProcM_FCheck(self, warn)
    def __init__(self, *args): 
        this = _pygamma.new_ExchProcM(*args)
        try: self.this.append(this)
        except: self.this = this
    def __assign__(self, *args): return _pygamma.ExchProcM___assign__(self, *args)
    __swig_destroy__ = _pygamma.delete_ExchProcM
    __del__ = lambda self : None;
    def Kex(self, *args): return _pygamma.ExchProcM_Kex(self, *args)
    def NComps(self): return _pygamma.ExchProcM_NComps(self)
    def NSpins(self): return _pygamma.ExchProcM_NSpins(self)
    def Comp(self, *args): return _pygamma.ExchProcM_Comp(self, *args)
    def mixes(self, *args): return _pygamma.ExchProcM_mixes(self, *args)
    def involves(self, *args): return _pygamma.ExchProcM_involves(self, *args)
    def read(self, *args): return _pygamma.ExchProcM_read(self, *args)
    def ExchStr(self): return _pygamma.ExchProcM_ExchStr(self)
ExchProcM_swigregister = _pygamma.ExchProcM_swigregister
ExchProcM_swigregister(ExchProcM)


def Lorentz_cut(*args):
  return _pygamma.Lorentz_cut(*args)
Lorentz_cut = _pygamma.Lorentz_cut

def Lorentz_int(*args):
  return _pygamma.Lorentz_int(*args)
Lorentz_int = _pygamma.Lorentz_int

def ask_Lorentzian(*args):
  return _pygamma.ask_Lorentzian(*args)
ask_Lorentzian = _pygamma.ask_Lorentzian

def read_Lorentzian(*args):
  return _pygamma.read_Lorentzian(*args)
read_Lorentzian = _pygamma.read_Lorentzian

def DLorentzian(*args):
  return _pygamma.DLorentzian(*args)
DLorentzian = _pygamma.DLorentzian

def A1(*args):
  return _pygamma.A1(*args)
A1 = _pygamma.A1

def A11(*args):
  return _pygamma.A11(*args)
A11 = _pygamma.A11

def SphA1(*args):
  return _pygamma.SphA1(*args)
SphA1 = _pygamma.SphA1

def A2(*args):
  return _pygamma.A2(*args)
A2 = _pygamma.A2

def A20(*args):
  return _pygamma.A20(*args)
A20 = _pygamma.A20

def A21(*args):
  return _pygamma.A21(*args)
A21 = _pygamma.A21

def A22(*args):
  return _pygamma.A22(*args)
A22 = _pygamma.A22

def T_comp(*args):
  return _pygamma.T_comp(*args)
T_comp = _pygamma.T_comp

def T_mult(*args):
  return _pygamma.T_mult(*args)
T_mult = _pygamma.T_mult

def T_rot(*args):
  return _pygamma.T_rot(*args)
T_rot = _pygamma.T_rot
class space_T(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, space_T, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, space_T, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_space_T(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_space_T
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.space_T___assign__(self, *args)
    def PASys(self): return _pygamma.space_T_PASys(self)
    def PASys_EA(self): return _pygamma.space_T_PASys_EA(self)
    def iso(self, *args): return _pygamma.space_T_iso(self, *args)
    def delz(self, *args): return _pygamma.space_T_delz(self, *args)
    def eta(self, *args): return _pygamma.space_T_eta(self, *args)
    def alpha(self): return _pygamma.space_T_alpha(self)
    def beta(self): return _pygamma.space_T_beta(self)
    def gamma(self): return _pygamma.space_T_gamma(self)
    def exists(self, *args): return _pygamma.space_T_exists(self, *args)
    def Rank(self): return _pygamma.space_T_Rank(self)
    def component(self, *args): return _pygamma.space_T_component(self, *args)
    def Ccomponent(self, *args): return _pygamma.space_T_Ccomponent(self, *args)
    def rotate(self, *args): return _pygamma.space_T_rotate(self, *args)
    def param(self, *args): return _pygamma.space_T_param(self, *args)
    def write(self, *args): return _pygamma.space_T_write(self, *args)
    def read(self, *args): return _pygamma.space_T_read(self, *args)
space_T_swigregister = _pygamma.space_T_swigregister
space_T_swigregister(space_T)


def Y_error(*args):
  return _pygamma.Y_error(*args)
Y_error = _pygamma.Y_error

def Y_fatality(*args):
  return _pygamma.Y_fatality(*args)
Y_fatality = _pygamma.Y_fatality

def Y00rad():
  return _pygamma.Y00rad()
Y00rad = _pygamma.Y00rad

def Y10rad(*args):
  return _pygamma.Y10rad(*args)
Y10rad = _pygamma.Y10rad

def Y11rad(*args):
  return _pygamma.Y11rad(*args)
Y11rad = _pygamma.Y11rad

def Y1m1rad(*args):
  return _pygamma.Y1m1rad(*args)
Y1m1rad = _pygamma.Y1m1rad

def Y20rad(*args):
  return _pygamma.Y20rad(*args)
Y20rad = _pygamma.Y20rad

def Y21rad(*args):
  return _pygamma.Y21rad(*args)
Y21rad = _pygamma.Y21rad

def Y2m1rad(*args):
  return _pygamma.Y2m1rad(*args)
Y2m1rad = _pygamma.Y2m1rad

def Y22rad(*args):
  return _pygamma.Y22rad(*args)
Y22rad = _pygamma.Y22rad

def Y2m2rad(*args):
  return _pygamma.Y2m2rad(*args)
Y2m2rad = _pygamma.Y2m2rad

def Y30rad(*args):
  return _pygamma.Y30rad(*args)
Y30rad = _pygamma.Y30rad

def Y31rad(*args):
  return _pygamma.Y31rad(*args)
Y31rad = _pygamma.Y31rad

def Y3m1rad(*args):
  return _pygamma.Y3m1rad(*args)
Y3m1rad = _pygamma.Y3m1rad

def Y32rad(*args):
  return _pygamma.Y32rad(*args)
Y32rad = _pygamma.Y32rad

def Y3m2rad(*args):
  return _pygamma.Y3m2rad(*args)
Y3m2rad = _pygamma.Y3m2rad

def Y33rad(*args):
  return _pygamma.Y33rad(*args)
Y33rad = _pygamma.Y33rad

def Y3m3rad(*args):
  return _pygamma.Y3m3rad(*args)
Y3m3rad = _pygamma.Y3m3rad

def Ylmrad(*args):
  return _pygamma.Ylmrad(*args)
Ylmrad = _pygamma.Ylmrad

def Y00():
  return _pygamma.Y00()
Y00 = _pygamma.Y00

def Y10(*args):
  return _pygamma.Y10(*args)
Y10 = _pygamma.Y10

def Y11(*args):
  return _pygamma.Y11(*args)
Y11 = _pygamma.Y11

def Y1m1(*args):
  return _pygamma.Y1m1(*args)
Y1m1 = _pygamma.Y1m1

def Y20(*args):
  return _pygamma.Y20(*args)
Y20 = _pygamma.Y20

def Y21(*args):
  return _pygamma.Y21(*args)
Y21 = _pygamma.Y21

def Y2m1(*args):
  return _pygamma.Y2m1(*args)
Y2m1 = _pygamma.Y2m1

def Y22(*args):
  return _pygamma.Y22(*args)
Y22 = _pygamma.Y22

def Y2m2(*args):
  return _pygamma.Y2m2(*args)
Y2m2 = _pygamma.Y2m2

def Y30(*args):
  return _pygamma.Y30(*args)
Y30 = _pygamma.Y30

def Y31(*args):
  return _pygamma.Y31(*args)
Y31 = _pygamma.Y31

def Y3m1(*args):
  return _pygamma.Y3m1(*args)
Y3m1 = _pygamma.Y3m1

def Y32(*args):
  return _pygamma.Y32(*args)
Y32 = _pygamma.Y32

def Y3m2(*args):
  return _pygamma.Y3m2(*args)
Y3m2 = _pygamma.Y3m2

def Y33(*args):
  return _pygamma.Y33(*args)
Y33 = _pygamma.Y33

def Y3m3(*args):
  return _pygamma.Y3m3(*args)
Y3m3 = _pygamma.Y3m3

def Ylm(*args):
  return _pygamma.Ylm(*args)
Ylm = _pygamma.Ylm

def Wigner_error(*args):
  return _pygamma.Wigner_error(*args)
Wigner_error = _pygamma.Wigner_error

def Wigner_fatality(*args):
  return _pygamma.Wigner_fatality(*args)
Wigner_fatality = _pygamma.Wigner_fatality

def d0():
  return _pygamma.d0()
d0 = _pygamma.d0

def dm1half(*args):
  return _pygamma.dm1half(*args)
dm1half = _pygamma.dm1half

def d1half(*args):
  return _pygamma.d1half(*args)
d1half = _pygamma.d1half

def d11(*args):
  return _pygamma.d11(*args)
d11 = _pygamma.d11

def d10(*args):
  return _pygamma.d10(*args)
d10 = _pygamma.d10

def d1m1(*args):
  return _pygamma.d1m1(*args)
d1m1 = _pygamma.d1m1

def d1(*args):
  return _pygamma.d1(*args)
d1 = _pygamma.d1

def d22(*args):
  return _pygamma.d22(*args)
d22 = _pygamma.d22

def d21(*args):
  return _pygamma.d21(*args)
d21 = _pygamma.d21

def d20(*args):
  return _pygamma.d20(*args)
d20 = _pygamma.d20

def d2m1(*args):
  return _pygamma.d2m1(*args)
d2m1 = _pygamma.d2m1

def d2m2(*args):
  return _pygamma.d2m2(*args)
d2m2 = _pygamma.d2m2

def d2(*args):
  return _pygamma.d2(*args)
d2 = _pygamma.d2

def fact(*args):
  return _pygamma.fact(*args)
fact = _pygamma.fact

def dJ_int(*args):
  return _pygamma.dJ_int(*args)
dJ_int = _pygamma.dJ_int

def dJ_half_int(*args):
  return _pygamma.dJ_half_int(*args)
dJ_half_int = _pygamma.dJ_half_int

def dJ(*args):
  return _pygamma.dJ(*args)
dJ = _pygamma.dJ

def D0():
  return _pygamma.D0()
D0 = _pygamma.D0

def D1half(*args):
  return _pygamma.D1half(*args)
D1half = _pygamma.D1half

def D1(*args):
  return _pygamma.D1(*args)
D1 = _pygamma.D1

def D2(*args):
  return _pygamma.D2(*args)
D2 = _pygamma.D2

def DJ(*args):
  return _pygamma.DJ(*args)
DJ = _pygamma.DJ

def exponential_multiply(*args):
  return _pygamma.exponential_multiply(*args)
exponential_multiply = _pygamma.exponential_multiply

def exponential(*args):
  return _pygamma.exponential(*args)
exponential = _pygamma.exponential

def Gaussian(*args):
  return _pygamma.Gaussian(*args)
Gaussian = _pygamma.Gaussian

def Hamming(*args):
  return _pygamma.Hamming(*args)
Hamming = _pygamma.Hamming

def Hanning(*args):
  return _pygamma.Hanning(*args)
Hanning = _pygamma.Hanning

def hyperbol_sec(*args):
  return _pygamma.hyperbol_sec(*args)
hyperbol_sec = _pygamma.hyperbol_sec

def Kaiser(*args):
  return _pygamma.Kaiser(*args)
Kaiser = _pygamma.Kaiser

def Lorentzian(*args):
  return _pygamma.Lorentzian(*args)
Lorentzian = _pygamma.Lorentzian

def sin_square(*args):
  return _pygamma.sin_square(*args)
sin_square = _pygamma.sin_square

def sinc(*args):
  return _pygamma.sinc(*args)
sinc = _pygamma.sinc

def square_wave(*args):
  return _pygamma.square_wave(*args)
square_wave = _pygamma.square_wave

def Noise(*args):
  return _pygamma.Noise(*args)
Noise = _pygamma.Noise
class spin_sys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_sys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spin_sys, name)
    __repr__ = _swig_repr
    def check_spin(self, *args): return _pygamma.spin_sys_check_spin(self, *args)
    def check_spins(self, *args): return _pygamma.spin_sys_check_spins(self, *args)
    def __init__(self, *args): 
        this = _pygamma.new_spin_sys(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_spin_sys
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.spin_sys___assign__(self, *args)
    def spins(self): return _pygamma.spin_sys_spins(self)
    def spinpairs(self): return _pygamma.spin_sys_spinpairs(self)
    def HS(self, *args): return _pygamma.spin_sys_HS(self, *args)
    def isotope(self, *args): return _pygamma.spin_sys_isotope(self, *args)
    def weight(self, *args): return _pygamma.spin_sys_weight(self, *args)
    def symbol(self, *args): return _pygamma.spin_sys_symbol(self, *args)
    def qn(self, *args): return _pygamma.spin_sys_qn(self, *args)
    def element(self, *args): return _pygamma.spin_sys_element(self, *args)
    def momentum(self, *args): return _pygamma.spin_sys_momentum(self, *args)
    def gamma(self, *args): return _pygamma.spin_sys_gamma(self, *args)
    def HSvect(self): return _pygamma.spin_sys_HSvect(self)
    def qState(self, *args): return _pygamma.spin_sys_qState(self, *args)
    def qnState(self, *args): return _pygamma.spin_sys_qnState(self, *args)
    def qnStates(self): return _pygamma.spin_sys_qnStates(self)
    def qnDist(self): return _pygamma.spin_sys_qnDist(self)
    def CoherDist(self): return _pygamma.spin_sys_CoherDist(self)
    def homonuclear(self): return _pygamma.spin_sys_homonuclear(self)
    def heteronuclear(self): return _pygamma.spin_sys_heteronuclear(self)
    def electron(self, *args): return _pygamma.spin_sys_electron(self, *args)
    def nucleon(self, *args): return _pygamma.spin_sys_nucleon(self, *args)
    def spinhalf(self): return _pygamma.spin_sys_spinhalf(self)
    def electrons(self): return _pygamma.spin_sys_electrons(self)
    def nucleons(self): return _pygamma.spin_sys_nucleons(self)
    def nepair(self, *args): return _pygamma.spin_sys_nepair(self, *args)
    def enpair(self, *args): return _pygamma.spin_sys_enpair(self, *args)
    def eepair(self, *args): return _pygamma.spin_sys_eepair(self, *args)
    def nnpair(self, *args): return _pygamma.spin_sys_nnpair(self, *args)
    def pairidx(self, *args): return _pygamma.spin_sys_pairidx(self, *args)
    def isotopes(self, *args): return _pygamma.spin_sys_isotopes(self, *args)
    def SetFlag(self, *args): return _pygamma.spin_sys_SetFlag(self, *args)
    def SetFlags(self, *args): return _pygamma.spin_sys_SetFlags(self, *args)
    def GetFlag(self, *args): return _pygamma.spin_sys_GetFlag(self, *args)
    def name(self, *args): return _pygamma.spin_sys_name(self, *args)
    def warnings(self, *args): return _pygamma.spin_sys_warnings(self, *args)
    def IsoDefault(self, *args): return _pygamma.spin_sys_IsoDefault(self, *args)
    def PSetAdd(self, *args): return _pygamma.spin_sys_PSetAdd(self, *args)
    def getSpins(self, *args): return _pygamma.spin_sys_getSpins(self, *args)
    def setName(self, *args): return _pygamma.spin_sys_setName(self, *args)
    def setIs(self, *args): return _pygamma.spin_sys_setIs(self, *args)
    def ask_read(self, *args): return _pygamma.spin_sys_ask_read(self, *args)
    def get_basis(self): return _pygamma.spin_sys_get_basis(self)
    def printstrings(self): return _pygamma.spin_sys_printstrings(self)
    def SYSStrings(self, w1=10, w2=5, w3=1): return _pygamma.spin_sys_SYSStrings(self, w1, w2, w3)
    def SIStrings(self, colwd=10): return _pygamma.spin_sys_SIStrings(self, colwd)
    def SYMStrings(self, colwd=10): return _pygamma.spin_sys_SYMStrings(self, colwd)
    def SAMStrings(self, colwd=10): return _pygamma.spin_sys_SAMStrings(self, colwd)
spin_sys_swigregister = _pygamma.spin_sys_swigregister
spin_sys_swigregister(spin_sys)

class spin_system(spin_sys):
    __swig_setmethods__ = {}
    for _s in [spin_sys]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_system, name, value)
    __swig_getmethods__ = {}
    for _s in [spin_sys]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, spin_system, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_spin_system(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_spin_system
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.spin_system___assign__(self, *args)
    def shifts(self, shift=0): return _pygamma.spin_system_shifts(self, shift)
    def shift(self, *args): return _pygamma.spin_system_shift(self, *args)
    def maxShift(self, *args): return _pygamma.spin_system_maxShift(self, *args)
    def minShift(self, *args): return _pygamma.spin_system_minShift(self, *args)
    def medianShift(self): return _pygamma.spin_system_medianShift(self)
    def lab_shift(self, *args): return _pygamma.spin_system_lab_shift(self, *args)
    def offsetShifts(self, *args): return _pygamma.spin_system_offsetShifts(self, *args)
    def PPM(self, *args): return _pygamma.spin_system_PPM(self, *args)
    def gfactor(self, *args): return _pygamma.spin_system_gfactor(self, *args)
    def eshift(self, *args): return _pygamma.spin_system_eshift(self, *args)
    def lab_eshift(self, *args): return _pygamma.spin_system_lab_eshift(self, *args)
    def efield(self, *args): return _pygamma.spin_system_efield(self, *args)
    def efield_lab(self, *args): return _pygamma.spin_system_efield_lab(self, *args)
    def Js(self, Jval=0): return _pygamma.spin_system_Js(self, Jval)
    def J(self, *args): return _pygamma.spin_system_J(self, *args)
    def As(self, Aval=0): return _pygamma.spin_system_As(self, Aval)
    def A(self, *args): return _pygamma.spin_system_A(self, *args)
    def AHz(self, *args): return _pygamma.spin_system_AHz(self, *args)
    def Omega(self, *args): return _pygamma.spin_system_Omega(self, *args)
    def Bo(self): return _pygamma.spin_system_Bo(self)
    def OmegaAdjust(self, *args): return _pygamma.spin_system_OmegaAdjust(self, *args)
    def FieldAdjust(self, *args): return _pygamma.spin_system_FieldAdjust(self, *args)
    def spectrometer_frequency(self, *args): return _pygamma.spin_system_spectrometer_frequency(self, *args)
    def spflags(self, *args): return _pygamma.spin_system_spflags(self, *args)
    def spflag(self, *args): return _pygamma.spin_system_spflag(self, *args)
    def center(self, spin=0): return _pygamma.spin_system_center(self, spin)
    def Nyquist(self, *args): return _pygamma.spin_system_Nyquist(self, *args)
    def PSetAdd(self, *args): return _pygamma.spin_system_PSetAdd(self, *args)
    def setJs(self, *args): return _pygamma.spin_system_setJs(self, *args)
    def setAs(self, *args): return _pygamma.spin_system_setAs(self, *args)
    def setShifts(self, *args): return _pygamma.spin_system_setShifts(self, *args)
    def setGs(self, *args): return _pygamma.spin_system_setGs(self, *args)
    def write(self, *args): return _pygamma.spin_system_write(self, *args)
    def read(self, *args): return _pygamma.spin_system_read(self, *args)
    def ask_read(self, *args): return _pygamma.spin_system_ask_read(self, *args)
    def SYSStrings(self, w1=10, w2=12, w3=1): return _pygamma.spin_system_SYSStrings(self, w1, w2, w3)
    def VStrings(self, colwd=12, digs=2): return _pygamma.spin_system_VStrings(self, colwd, digs)
    def PPMStrings(self, colwd=12, digs=2): return _pygamma.spin_system_PPMStrings(self, colwd, digs)
    def GFStrings(self, colwd=12, digs=2): return _pygamma.spin_system_GFStrings(self, colwd, digs)
    def BeStrings(self, colwd=12, digs=2): return _pygamma.spin_system_BeStrings(self, colwd, digs)
    def JStrings(self, colwd=12, digs=2): return _pygamma.spin_system_JStrings(self, colwd, digs)
    def AStrings(self, colwd=12, digs=2): return _pygamma.spin_system_AStrings(self, colwd, digs)
    def OmStrings(self, colwd=12, digs=2): return _pygamma.spin_system_OmStrings(self, colwd, digs)
spin_system_swigregister = _pygamma.spin_system_swigregister
spin_system_swigregister(spin_system)

class gen_op(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gen_op, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gen_op, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_gen_op(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_gen_op
    __del__ = lambda self : None;
    def __add__(self, *args): return _pygamma.gen_op___add__(self, *args)
    def __sub__(self, *args): return _pygamma.gen_op___sub__(self, *args)
    def __neg__(self): return _pygamma.gen_op___neg__(self)
    def __mul__(self, *args): return _pygamma.gen_op___mul__(self, *args)
    def __iand__(self, *args): return _pygamma.gen_op___iand__(self, *args)
    def __iadd__(self, *args): return _pygamma.gen_op___iadd__(self, *args)
    def __isub__(self, *args): return _pygamma.gen_op___isub__(self, *args)
    def __imul__(self, *args): return _pygamma.gen_op___imul__(self, *args)
    def __idiv__(self, *args): return _pygamma.gen_op___idiv__(self, *args)
    def det(self): return _pygamma.gen_op_det(self)
    def trace(self, *args): return _pygamma.gen_op_trace(self, *args)
    def proj(self, *args): return _pygamma.gen_op_proj(self, *args)
    def dim(self): return _pygamma.gen_op_dim(self)
    def HS(self): return _pygamma.gen_op_HS(self)
    def LS(self): return _pygamma.gen_op_LS(self)
    def dim_LS(self): return _pygamma.gen_op_dim_LS(self)
    def exp(self, *args): return _pygamma.gen_op_exp(self, *args)
    def Pow(self, *args): return _pygamma.gen_op_Pow(self, *args)
    def sim_trans(self, *args): return _pygamma.gen_op_sim_trans(self, *args)
    def sim_trans_ip(self, *args): return _pygamma.gen_op_sim_trans_ip(self, *args)
    def eigvals(self, *args): return _pygamma.gen_op_eigvals(self, *args)
    def get_bs(self): return _pygamma.gen_op_get_bs(self)
    def get_basis(self): return _pygamma.gen_op_get_basis(self)
    def put_bs(self, *args): return _pygamma.gen_op_put_bs(self, *args)
    def put_basis(self, *args): return _pygamma.gen_op_put_basis(self, *args)
    def __call__(self, *args): return _pygamma.gen_op___call__(self, *args)
    def get(self, *args): return _pygamma.gen_op_get(self, *args)
    def put(self, *args): return _pygamma.gen_op_put(self, *args)
    def name(self, *args): return _pygamma.gen_op_name(self, *args)
    def bsname(self, *args): return _pygamma.gen_op_bsname(self, *args)
    def exists(self): return _pygamma.gen_op_exists(self)
    def superket(self): return _pygamma.gen_op_superket(self)
    def desuperket(self, *args): return _pygamma.gen_op_desuperket(self, *args)
    def project_sub(self, *args): return _pygamma.gen_op_project_sub(self, *args)
    def test_EBR(self): return _pygamma.gen_op_test_EBR(self)
    def test_DBR(self): return _pygamma.gen_op_test_DBR(self)
    def in_EBR(self): return _pygamma.gen_op_in_EBR(self)
    def in_DBR(self): return _pygamma.gen_op_in_DBR(self)
    def set_DBR(self): return _pygamma.gen_op_set_DBR(self)
    def set_EBR(self): return _pygamma.gen_op_set_EBR(self)
    def Op_base(self, *args): return _pygamma.gen_op_Op_base(self, *args)
    def status(self, pf=0): return _pygamma.gen_op_status(self, pf)
    def setOnlyWBR(self): return _pygamma.gen_op_setOnlyWBR(self)
    def Op_priority(self, *args): return _pygamma.gen_op_Op_priority(self, *args)
    def SetLimits(self, *args): return _pygamma.gen_op_SetLimits(self, *args)
    def OpCheck(self, *args): return _pygamma.gen_op_OpCheck(self, *args)
    def LimCheck(self, *args): return _pygamma.gen_op_LimCheck(self, *args)
    def write(self, *args): return _pygamma.gen_op_write(self, *args)
    def read(self, *args): return _pygamma.gen_op_read(self, *args)
    def TestEigenSystem(self, pf=0): return _pygamma.gen_op_TestEigenSystem(self, pf)
    def is_symmetric(self, *args): return _pygamma.gen_op_is_symmetric(self, *args)
    def is_hermitian(self, *args): return _pygamma.gen_op_is_hermitian(self, *args)
    def is_unitary(self, *args): return _pygamma.gen_op_is_unitary(self, *args)
    def is_real(self, *args): return _pygamma.gen_op_is_real(self, *args)
    def is_imaginary(self, *args): return _pygamma.gen_op_is_imaginary(self, *args)
    def is_complex(self, *args): return _pygamma.gen_op_is_complex(self, *args)
    def is_zero(self, *args): return _pygamma.gen_op_is_zero(self, *args)
    def is_diagonal(self, *args): return _pygamma.gen_op_is_diagonal(self, *args)
    def is_square(self): return _pygamma.gen_op_is_square(self)
    def __eq__(self, *args): return _pygamma.gen_op___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.gen_op___ne__(self, *args)
    def __lt__(self, *args): return _pygamma.gen_op___lt__(self, *args)
    def __gt__(self, *args): return _pygamma.gen_op___gt__(self, *args)
gen_op_swigregister = _pygamma.gen_op_swigregister
gen_op_swigregister(gen_op)


def I_gen_op(*args):
  return _pygamma.I_gen_op(*args)
I_gen_op = _pygamma.I_gen_op

def HJw(*args):
  return _pygamma.HJw(*args)
HJw = _pygamma.HJw

def HJwh(*args):
  return _pygamma.HJwh(*args)
HJwh = _pygamma.HJwh

def HJd(*args):
  return _pygamma.HJd(*args)
HJd = _pygamma.HJd

def How(*args):
  return _pygamma.How(*args)
How = _pygamma.How

def Ho_lab(*args):
  return _pygamma.Ho_lab(*args)
Ho_lab = _pygamma.Ho_lab

def Hz(*args):
  return _pygamma.Hz(*args)
Hz = _pygamma.Hz

def H1(*args):
  return _pygamma.H1(*args)
H1 = _pygamma.H1

def Heff(*args):
  return _pygamma.Heff(*args)
Heff = _pygamma.Heff

def Hg(*args):
  return _pygamma.Hg(*args)
Hg = _pygamma.Hg

def Hg_lab(*args):
  return _pygamma.Hg_lab(*args)
Hg_lab = _pygamma.Hg_lab

def HAw(*args):
  return _pygamma.HAw(*args)
HAw = _pygamma.HAw

def HQsec(*args):
  return _pygamma.HQsec(*args)
HQsec = _pygamma.HQsec

def SOpCmperror(*args):
  return _pygamma.SOpCmperror(*args)
SOpCmperror = _pygamma.SOpCmperror

def SOpCmpfatal(*args):
  return _pygamma.SOpCmpfatal(*args)
SOpCmpfatal = _pygamma.SOpCmpfatal

def Iu(*args):
  return _pygamma.Iu(*args)
Iu = _pygamma.Iu

def Ia(*args):
  return _pygamma.Ia(*args)
Ia = _pygamma.Ia

def Ib(*args):
  return _pygamma.Ib(*args)
Ib = _pygamma.Ib

def Ipol(*args):
  return _pygamma.Ipol(*args)
Ipol = _pygamma.Ipol

def Fpol(*args):
  return _pygamma.Fpol(*args)
Fpol = _pygamma.Fpol

def Fa(*args):
  return _pygamma.Fa(*args)
Fa = _pygamma.Fa

def Fb(*args):
  return _pygamma.Fb(*args)
Fb = _pygamma.Fb

def Fe_sp(*args):
  return _pygamma.Fe_sp(*args)
Fe_sp = _pygamma.Fe_sp

def Fx_sp(*args):
  return _pygamma.Fx_sp(*args)
Fx_sp = _pygamma.Fx_sp

def Fy_sp(*args):
  return _pygamma.Fy_sp(*args)
Fy_sp = _pygamma.Fy_sp

def Fz_sp(*args):
  return _pygamma.Fz_sp(*args)
Fz_sp = _pygamma.Fz_sp

def Fa_sp(*args):
  return _pygamma.Fa_sp(*args)
Fa_sp = _pygamma.Fa_sp

def Fb_sp(*args):
  return _pygamma.Fb_sp(*args)
Fb_sp = _pygamma.Fb_sp

def Fpol_sp(*args):
  return _pygamma.Fpol_sp(*args)
Fpol_sp = _pygamma.Fpol_sp

def Faxis_sp(*args):
  return _pygamma.Faxis_sp(*args)
Faxis_sp = _pygamma.Faxis_sp

def Faxis(*args):
  return _pygamma.Faxis(*args)
Faxis = _pygamma.Faxis

def Fpol_gen_new(*args):
  return _pygamma.Fpol_gen_new(*args)
Fpol_gen_new = _pygamma.Fpol_gen_new

def Fpol_gen(*args):
  return _pygamma.Fpol_gen(*args)
Fpol_gen = _pygamma.Fpol_gen

def Ipdt(*args):
  return _pygamma.Ipdt(*args)
Ipdt = _pygamma.Ipdt

def Fpdt(*args):
  return _pygamma.Fpdt(*args)
Fpdt = _pygamma.Fpdt

def zero_mqc(*args):
  return _pygamma.zero_mqc(*args)
zero_mqc = _pygamma.zero_mqc

def st_Op(*args):
  return _pygamma.st_Op(*args)
st_Op = _pygamma.st_Op

def sqt_v(*args):
  return _pygamma.sqt_v(*args)
sqt_v = _pygamma.sqt_v

def sort_super_op_basis(*args):
  return _pygamma.sort_super_op_basis(*args)
sort_super_op_basis = _pygamma.sort_super_op_basis

def sort_LOp_basis(*args):
  return _pygamma.sort_LOp_basis(*args)
sort_LOp_basis = _pygamma.sort_LOp_basis

def sort_Op_basis(*args):
  return _pygamma.sort_Op_basis(*args)
sort_Op_basis = _pygamma.sort_Op_basis

def mqt_v(*args):
  return _pygamma.mqt_v(*args)
mqt_v = _pygamma.mqt_v

def wavefunction(*args):
  return _pygamma.wavefunction(*args)
wavefunction = _pygamma.wavefunction

def vecmax(*args):
  return _pygamma.vecmax(*args)
vecmax = _pygamma.vecmax

def integral(*args):
  return _pygamma.integral(*args)
integral = _pygamma.integral

def lwhh(*args):
  return _pygamma.lwhh(*args)
lwhh = _pygamma.lwhh

def query_isotope(*args):
  return _pygamma.query_isotope(*args)
query_isotope = _pygamma.query_isotope

def query_offset(*args):
  return _pygamma.query_offset(*args)
query_offset = _pygamma.query_offset

def query_file1D(*args):
  return _pygamma.query_file1D(*args)
query_file1D = _pygamma.query_file1D

def Ixpuls(*args):
  return _pygamma.Ixpuls(*args)
Ixpuls = _pygamma.Ixpuls

def Ixpuls_sp(*args):
  return _pygamma.Ixpuls_sp(*args)
Ixpuls_sp = _pygamma.Ixpuls_sp

def Iypuls_sp(*args):
  return _pygamma.Iypuls_sp(*args)
Iypuls_sp = _pygamma.Iypuls_sp

def Ixypuls(*args):
  return _pygamma.Ixypuls(*args)
Ixypuls = _pygamma.Ixypuls

def Ixypuls_sp(*args):
  return _pygamma.Ixypuls_sp(*args)
Ixypuls_sp = _pygamma.Ixypuls_sp

def Ixpuls_sp_U(*args):
  return _pygamma.Ixpuls_sp_U(*args)
Ixpuls_sp_U = _pygamma.Ixpuls_sp_U

def Iypuls_sp_U(*args):
  return _pygamma.Iypuls_sp_U(*args)
Iypuls_sp_U = _pygamma.Iypuls_sp_U

def Ixypuls_U_sp(*args):
  return _pygamma.Ixypuls_U_sp(*args)
Ixypuls_U_sp = _pygamma.Ixypuls_U_sp
class basis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, basis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, basis, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_basis(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_basis
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.basis___assign__(self, *args)
    def size(self): return _pygamma.basis_size(self)
    def dim(self): return _pygamma.basis_dim(self)
    def name(self, *args): return _pygamma.basis_name(self, *args)
    def dim_LS(self): return _pygamma.basis_dim_LS(self)
    def sub_N(self): return _pygamma.basis_sub_N(self)
    def sub_dim(self, *args): return _pygamma.basis_sub_dim(self, *args)
    def sub_anchor(self, *args): return _pygamma.basis_sub_anchor(self, *args)
    def sub_anchor_LS(self, *args): return _pygamma.basis_sub_anchor_LS(self, *args)
    def which_sub_LS(self, *args): return _pygamma.basis_which_sub_LS(self, *args)
    def __eq__(self, *args): return _pygamma.basis___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.basis___ne__(self, *args)
    def isDefaultBasis(self): return _pygamma.basis_isDefaultBasis(self)
    def refs(self): return _pygamma.basis_refs(self)
    def check(self, *args): return _pygamma.basis_check(self, *args)
    def write(self, *args): return _pygamma.basis_write(self, *args)
    def read(self, *args): return _pygamma.basis_read(self, *args)
    def TestBasis(self, pf=0): return _pygamma.basis_TestBasis(self, pf)
basis_swigregister = _pygamma.basis_swigregister
basis_swigregister(basis)


def prop(*args):
  return _pygamma.prop(*args)
prop = _pygamma.prop

def prop_ip(*args):
  return _pygamma.prop_ip(*args)
prop_ip = _pygamma.prop_ip

def evolve_ip(*args):
  return _pygamma.evolve_ip(*args)
evolve_ip = _pygamma.evolve_ip
class HSprop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HSprop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HSprop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_HSprop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_HSprop
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.HSprop___assign__(self, *args)
    def time(self): return _pygamma.HSprop_time(self)
    def length(self): return _pygamma.HSprop_length(self)
    def dim(self): return _pygamma.HSprop_dim(self)
    def Bs(self): return _pygamma.HSprop_Bs(self)
    def HS(self): return _pygamma.HSprop_HS(self)
    def LS(self): return _pygamma.HSprop_LS(self)
    def Op(self): return _pygamma.HSprop_Op(self)
    def H(self): return _pygamma.HSprop_H(self)
    def SetEBR(self): return _pygamma.HSprop_SetEBR(self)
    def SetBasis(self, *args): return _pygamma.HSprop_SetBasis(self, *args)
    def evolve(self, *args): return _pygamma.HSprop_evolve(self, *args)
    def __mul__(self, *args): return _pygamma.HSprop___mul__(self, *args)
    def __imul__(self, *args): return _pygamma.HSprop___imul__(self, *args)
    def __iand__(self, *args): return _pygamma.HSprop___iand__(self, *args)
    def sim_trans(self, *args): return _pygamma.HSprop_sim_trans(self, *args)
    def sim_trans_ip(self, *args): return _pygamma.HSprop_sim_trans_ip(self, *args)
    def Pow(self, *args): return _pygamma.HSprop_Pow(self, *args)
    def __eq__(self, *args): return _pygamma.HSprop___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.HSprop___ne__(self, *args)
    def __lt__(self, *args): return _pygamma.HSprop___lt__(self, *args)
    def __gt__(self, *args): return _pygamma.HSprop___gt__(self, *args)
HSprop_swigregister = _pygamma.HSprop_swigregister
HSprop_swigregister(HSprop)

class spin_op(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_op, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spin_op, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_spin_op(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_spin_op
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.spin_op___assign__(self, *args)
    def __neg__(self): return _pygamma.spin_op___neg__(self)
    def __add__(self, *args): return _pygamma.spin_op___add__(self, *args)
    def __isub__(self, *args): return _pygamma.spin_op___isub__(self, *args)
    def __iadd__(self, *args): return _pygamma.spin_op___iadd__(self, *args)
    def __imul__(self, *args): return _pygamma.spin_op___imul__(self, *args)
    def __idiv__(self, *args): return _pygamma.spin_op___idiv__(self, *args)
    def exp(self): return _pygamma.spin_op_exp(self)
    def adjoint(self): return _pygamma.spin_op_adjoint(self)
    def trace(self): return _pygamma.spin_op_trace(self)
    def spins(self): return _pygamma.spin_op_spins(self)
    def refs(self, *args): return _pygamma.spin_op_refs(self, *args)
    def HS(self): return _pygamma.spin_op_HS(self)
    def status(self, full=1): return _pygamma.spin_op_status(self, full)
    def FaxisStruct(self, *args): return _pygamma.spin_op_FaxisStruct(self, *args)
spin_op_swigregister = _pygamma.spin_op_swigregister
spin_op_swigregister(spin_op)


def PulSerror(*args):
  return _pygamma.PulSerror(*args)
PulSerror = _pygamma.PulSerror

def PulSfatality(*args):
  return _pygamma.PulSfatality(*args)
PulSfatality = _pygamma.PulSfatality

def Sxpuls(*args):
  return _pygamma.Sxpuls(*args)
Sxpuls = _pygamma.Sxpuls

def SxpulsB(*args):
  return _pygamma.SxpulsB(*args)
SxpulsB = _pygamma.SxpulsB

def Sypuls(*args):
  return _pygamma.Sypuls(*args)
Sypuls = _pygamma.Sypuls

def SypulsB(*args):
  return _pygamma.SypulsB(*args)
SypulsB = _pygamma.SypulsB

def SxpulsB_U(*args):
  return _pygamma.SxpulsB_U(*args)
SxpulsB_U = _pygamma.SxpulsB_U

def SypulsB_U(*args):
  return _pygamma.SypulsB_U(*args)
SypulsB_U = _pygamma.SypulsB_U

def Sxypuls(*args):
  return _pygamma.Sxypuls(*args)
Sxypuls = _pygamma.Sxypuls

def SxypulsB(*args):
  return _pygamma.SxypulsB(*args)
SxypulsB = _pygamma.SxypulsB

def Sxypuls_U(*args):
  return _pygamma.Sxypuls_U(*args)
Sxypuls_U = _pygamma.Sxypuls_U

def SxypulsB_U(*args):
  return _pygamma.SxypulsB_U(*args)
SxypulsB_U = _pygamma.SxypulsB_U

def Spul_axis(*args):
  return _pygamma.Spul_axis(*args)
Spul_axis = _pygamma.Spul_axis

def Spul_U_axis(*args):
  return _pygamma.Spul_U_axis(*args)
Spul_U_axis = _pygamma.Spul_U_axis

def Spul_plane(*args):
  return _pygamma.Spul_plane(*args)
Spul_plane = _pygamma.Spul_plane

def Spul_U_plane(*args):
  return _pygamma.Spul_U_plane(*args)
Spul_U_plane = _pygamma.Spul_U_plane

def qStatel(*args):
  return _pygamma.qStatel(*args)
qStatel = _pygamma.qStatel

def tref_labels(*args):
  return _pygamma.tref_labels(*args)
tref_labels = _pygamma.tref_labels

def tran_types(*args):
  return _pygamma.tran_types(*args)
tran_types = _pygamma.tran_types

def trev_labels(*args):
  return _pygamma.trev_labels(*args)
trev_labels = _pygamma.trev_labels

def ev_select(*args):
  return _pygamma.ev_select(*args)
ev_select = _pygamma.ev_select

def tr_select(*args):
  return _pygamma.tr_select(*args)
tr_select = _pygamma.tr_select

def PulSherror(*args):
  return _pygamma.PulSherror(*args)
PulSherror = _pygamma.PulSherror

def PulShfatality(*args):
  return _pygamma.PulShfatality(*args)
PulShfatality = _pygamma.PulShfatality

def Shxpuls(*args):
  return _pygamma.Shxpuls(*args)
Shxpuls = _pygamma.Shxpuls

def Shxpuls_U(*args):
  return _pygamma.Shxpuls_U(*args)
Shxpuls_U = _pygamma.Shxpuls_U

def Shypuls(*args):
  return _pygamma.Shypuls(*args)
Shypuls = _pygamma.Shypuls

def Shypuls_U(*args):
  return _pygamma.Shypuls_U(*args)
Shypuls_U = _pygamma.Shypuls_U

def Shxypuls(*args):
  return _pygamma.Shxypuls(*args)
Shxypuls = _pygamma.Shxypuls

def Shxypuls_U(*args):
  return _pygamma.Shxypuls_U(*args)
Shxypuls_U = _pygamma.Shxypuls_U

def ShxpulsB(*args):
  return _pygamma.ShxpulsB(*args)
ShxpulsB = _pygamma.ShxpulsB

def ShxpulsB_U(*args):
  return _pygamma.ShxpulsB_U(*args)
ShxpulsB_U = _pygamma.ShxpulsB_U

def ShypulsB(*args):
  return _pygamma.ShypulsB(*args)
ShypulsB = _pygamma.ShypulsB

def ShypulsB_U(*args):
  return _pygamma.ShypulsB_U(*args)
ShypulsB_U = _pygamma.ShypulsB_U

def ShxypulsB(*args):
  return _pygamma.ShxypulsB(*args)
ShxypulsB = _pygamma.ShxypulsB

def ShxypulsB_U(*args):
  return _pygamma.ShxypulsB_U(*args)
ShxypulsB_U = _pygamma.ShxypulsB_U

def Shpul_axis(*args):
  return _pygamma.Shpul_axis(*args)
Shpul_axis = _pygamma.Shpul_axis

def Shpul_U_axis(*args):
  return _pygamma.Shpul_U_axis(*args)
Shpul_U_axis = _pygamma.Shpul_U_axis

def Shpul_plane(*args):
  return _pygamma.Shpul_plane(*args)
Shpul_plane = _pygamma.Shpul_plane

def Shpul_U_plane(*args):
  return _pygamma.Shpul_U_plane(*args)
Shpul_U_plane = _pygamma.Shpul_U_plane

def Prod_base_dec(*args):
  return _pygamma.Prod_base_dec(*args)
Prod_base_dec = _pygamma.Prod_base_dec
class genoprep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, genoprep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, genoprep, name)
    __repr__ = _swig_repr
    __swig_setmethods__["RepMx"] = _pygamma.genoprep_RepMx_set
    __swig_getmethods__["RepMx"] = _pygamma.genoprep_RepMx_get
    if _newclass:RepMx = _swig_property(_pygamma.genoprep_RepMx_get, _pygamma.genoprep_RepMx_set)
    __swig_setmethods__["RepBs"] = _pygamma.genoprep_RepBs_set
    __swig_getmethods__["RepBs"] = _pygamma.genoprep_RepBs_get
    if _newclass:RepBs = _swig_property(_pygamma.genoprep_RepBs_get, _pygamma.genoprep_RepBs_set)
    __swig_setmethods__["RepPty"] = _pygamma.genoprep_RepPty_set
    __swig_getmethods__["RepPty"] = _pygamma.genoprep_RepPty_get
    if _newclass:RepPty = _swig_property(_pygamma.genoprep_RepPty_get, _pygamma.genoprep_RepPty_set)
    __swig_setmethods__["BSPrnt"] = _pygamma.genoprep_BSPrnt_set
    __swig_getmethods__["BSPrnt"] = _pygamma.genoprep_BSPrnt_get
    if _newclass:BSPrnt = _swig_property(_pygamma.genoprep_BSPrnt_get, _pygamma.genoprep_BSPrnt_set)
    def OpReperror(self, *args): return _pygamma.genoprep_OpReperror(self, *args)
    def OpRepfatal(self, *args): return _pygamma.genoprep_OpRepfatal(self, *args)
    def __init__(self, *args): 
        this = _pygamma.new_genoprep(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_genoprep
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.genoprep___assign__(self, *args)
    def OpRepCheck(self, warn=2): return _pygamma.genoprep_OpRepCheck(self, warn)
    def write(self, *args): return _pygamma.genoprep_write(self, *args)
    def read(self, *args): return _pygamma.genoprep_read(self, *args)
    def __eq__(self, *args): return _pygamma.genoprep___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.genoprep___ne__(self, *args)
    def __lt__(self, *args): return _pygamma.genoprep___lt__(self, *args)
    def __gt__(self, *args): return _pygamma.genoprep___gt__(self, *args)
genoprep_swigregister = _pygamma.genoprep_swigregister
genoprep_swigregister(genoprep)
alphabeta = cvar.alphabeta


def GenericD(*args):
  return _pygamma.GenericD(*args)
GenericD = _pygamma.GenericD

def detector(*args):
  return _pygamma.detector(*args)
detector = _pygamma.detector

def Mxy(*args):
  return _pygamma.Mxy(*args)
Mxy = _pygamma.Mxy

def detector_sp(*args):
  return _pygamma.detector_sp(*args)
detector_sp = _pygamma.detector_sp

def Mxy_sp(*args):
  return _pygamma.Mxy_sp(*args)
Mxy_sp = _pygamma.Mxy_sp

def Rx(*args):
  return _pygamma.Rx(*args)
Rx = _pygamma.Rx

def Rx_sp(*args):
  return _pygamma.Rx_sp(*args)
Rx_sp = _pygamma.Rx_sp

def Ry(*args):
  return _pygamma.Ry(*args)
Ry = _pygamma.Ry

def Ry_sp(*args):
  return _pygamma.Ry_sp(*args)
Ry_sp = _pygamma.Ry_sp

def Rz_sp(*args):
  return _pygamma.Rz_sp(*args)
Rz_sp = _pygamma.Rz_sp

def Raxis_sp(*args):
  return _pygamma.Raxis_sp(*args)
Raxis_sp = _pygamma.Raxis_sp

def Rxy(*args):
  return _pygamma.Rxy(*args)
Rxy = _pygamma.Rxy

def Rxy_sp(*args):
  return _pygamma.Rxy_sp(*args)
Rxy_sp = _pygamma.Rxy_sp

def Ryz(*args):
  return _pygamma.Ryz(*args)
Ryz = _pygamma.Ryz

def Ryz_sp(*args):
  return _pygamma.Ryz_sp(*args)
Ryz_sp = _pygamma.Ryz_sp

def Rzx(*args):
  return _pygamma.Rzx(*args)
Rzx = _pygamma.Rzx

def Rzx_sp(*args):
  return _pygamma.Rzx_sp(*args)
Rzx_sp = _pygamma.Rzx_sp

def Rplane(*args):
  return _pygamma.Rplane(*args)
Rplane = _pygamma.Rplane

def Rplane_sp(*args):
  return _pygamma.Rplane_sp(*args)
Rplane_sp = _pygamma.Rplane_sp

def Rxyz(*args):
  return _pygamma.Rxyz(*args)
Rxyz = _pygamma.Rxyz

def Rxyz_sp(*args):
  return _pygamma.Rxyz_sp(*args)
Rxyz_sp = _pygamma.Rxyz_sp

def Rspace(*args):
  return _pygamma.Rspace(*args)
Rspace = _pygamma.Rspace

def R_Euler(*args):
  return _pygamma.R_Euler(*args)
R_Euler = _pygamma.R_Euler

def R_Euler_sp(*args):
  return _pygamma.R_Euler_sp(*args)
R_Euler_sp = _pygamma.R_Euler_sp

def R_Euler_plane(*args):
  return _pygamma.R_Euler_plane(*args)
R_Euler_plane = _pygamma.R_Euler_plane

def Ixy(*args):
  return _pygamma.Ixy(*args)
Ixy = _pygamma.Ixy

def Fxy(*args):
  return _pygamma.Fxy(*args)
Fxy = _pygamma.Fxy

def Fxy_sp(*args):
  return _pygamma.Fxy_sp(*args)
Fxy_sp = _pygamma.Fxy_sp

def Fp_sp(*args):
  return _pygamma.Fp_sp(*args)
Fp_sp = _pygamma.Fp_sp

def Fm_sp(*args):
  return _pygamma.Fm_sp(*args)
Fm_sp = _pygamma.Fm_sp

def Fplane(*args):
  return _pygamma.Fplane(*args)
Fplane = _pygamma.Fplane

def RotSpinOp(*args):
  return _pygamma.RotSpinOp(*args)
RotSpinOp = _pygamma.RotSpinOp

def Ie(*args):
  return _pygamma.Ie(*args)
Ie = _pygamma.Ie

def Ix(*args):
  return _pygamma.Ix(*args)
Ix = _pygamma.Ix

def Iy(*args):
  return _pygamma.Iy(*args)
Iy = _pygamma.Iy

def Iz(*args):
  return _pygamma.Iz(*args)
Iz = _pygamma.Iz

def Ip(*args):
  return _pygamma.Ip(*args)
Ip = _pygamma.Ip

def Im(*args):
  return _pygamma.Im(*args)
Im = _pygamma.Im

def Raxis(*args):
  return _pygamma.Raxis(*args)
Raxis = _pygamma.Raxis

def left(*args):
  return _pygamma.left(*args)
left = _pygamma.left

def right(*args):
  return _pygamma.right(*args)
right = _pygamma.right

def U_transform(*args):
  return _pygamma.U_transform(*args)
U_transform = _pygamma.U_transform

def commutator(*args):
  return _pygamma.commutator(*args)
commutator = _pygamma.commutator

def d_commutator(*args):
  return _pygamma.d_commutator(*args)
d_commutator = _pygamma.d_commutator
class super_op(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, super_op, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, super_op, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_super_op(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_super_op
    __del__ = lambda self : None;
    def __add__(self, *args): return _pygamma.super_op___add__(self, *args)
    def __iadd__(self, *args): return _pygamma.super_op___iadd__(self, *args)
    def __sub__(self, *args): return _pygamma.super_op___sub__(self, *args)
    def __isub__(self, *args): return _pygamma.super_op___isub__(self, *args)
    def __mul__(self, *args): return _pygamma.super_op___mul__(self, *args)
    def __iand__(self, *args): return _pygamma.super_op___iand__(self, *args)
    def __imul__(self, *args): return _pygamma.super_op___imul__(self, *args)
    def __idiv__(self, *args): return _pygamma.super_op___idiv__(self, *args)
    def exp(self, *args): return _pygamma.super_op_exp(self, *args)
    def set_EBR(self): return _pygamma.super_op_set_EBR(self)
    def set_HBR(self): return _pygamma.super_op_set_HBR(self)
    def set_DBR(self): return _pygamma.super_op_set_DBR(self)
    def LOp_Hbase(self, *args): return _pygamma.super_op_LOp_Hbase(self, *args)
    def LOp_base(self, *args): return _pygamma.super_op_LOp_base(self, *args)
    def SetHSBaseOf(self, *args): return _pygamma.super_op_SetHSBaseOf(self, *args)
    def HS(self): return _pygamma.super_op_HS(self)
    def size(self): return _pygamma.super_op_size(self)
    def dim(self): return _pygamma.super_op_dim(self)
    def LS(self): return _pygamma.super_op_LS(self)
    def eigenvalues(self, nc=4, ri=0): return _pygamma.super_op_eigenvalues(self, nc, ri)
    def Bs(self): return _pygamma.super_op_Bs(self)
    def get_basis(self): return _pygamma.super_op_get_basis(self)
    def put_basis(self, *args): return _pygamma.super_op_put_basis(self, *args)
    def LBs(self): return _pygamma.super_op_LBs(self)
    def get_Lbasis(self): return _pygamma.super_op_get_Lbasis(self)
    def put_Lbasis(self, *args): return _pygamma.super_op_put_Lbasis(self, *args)
    def __call__(self, *args): return _pygamma.super_op___call__(self, *args)
    def put(self, *args): return _pygamma.super_op_put(self, *args)
    def get(self, *args): return _pygamma.super_op_get(self, *args)
    def checkLOp(self, *args): return _pygamma.super_op_checkLOp(self, *args)
    def status(self): return _pygamma.super_op_status(self)
    def __eq__(self, *args): return _pygamma.super_op___eq__(self, *args)
    def below(self, *args): return _pygamma.super_op_below(self, *args)
    def write(self, *args): return _pygamma.super_op_write(self, *args)
    def read(self, *args): return _pygamma.super_op_read(self, *args)
super_op_swigregister = _pygamma.super_op_swigregister
super_op_swigregister(super_op)

class sys_dynamic(spin_system,coord_vec):
    __swig_setmethods__ = {}
    for _s in [spin_system,coord_vec]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sys_dynamic, name, value)
    __swig_getmethods__ = {}
    for _s in [spin_system,coord_vec]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sys_dynamic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_sys_dynamic(*args)
        try: self.this.append(this)
        except: self.this = this
    def __assign__(self, *args): return _pygamma.sys_dynamic___assign__(self, *args)
    __swig_destroy__ = _pygamma.delete_sys_dynamic
    __del__ = lambda self : None;
    def shifts(self, shift=0): return _pygamma.sys_dynamic_shifts(self, shift)
    def shift(self, *args): return _pygamma.sys_dynamic_shift(self, *args)
    def offsetShifts(self, *args): return _pygamma.sys_dynamic_offsetShifts(self, *args)
    def PPM(self, *args): return _pygamma.sys_dynamic_PPM(self, *args)
    def delz(self, *args): return _pygamma.sys_dynamic_delz(self, *args)
    def Ceta(self, *args): return _pygamma.sys_dynamic_Ceta(self, *args)
    def TC(self, *args): return _pygamma.sys_dynamic_TC(self, *args)
    def xiC_vector(self): return _pygamma.sys_dynamic_xiC_vector(self)
    def xiC(self, *args): return _pygamma.sys_dynamic_xiC(self, *args)
    def CSA(self): return _pygamma.sys_dynamic_CSA(self)
    def coords(self, *args): return _pygamma.sys_dynamic_coords(self, *args)
    def Coord(self): return _pygamma.sys_dynamic_Coord(self)
    def DCC(self, *args): return _pygamma.sys_dynamic_DCC(self, *args)
    def Ddelz(self, *args): return _pygamma.sys_dynamic_Ddelz(self, *args)
    def Deta(self, *args): return _pygamma.sys_dynamic_Deta(self, *args)
    def AD(self, *args): return _pygamma.sys_dynamic_AD(self, *args)
    def dipoles(self): return _pygamma.sys_dynamic_dipoles(self)
    def dipole(self, *args): return _pygamma.sys_dynamic_dipole(self, *args)
    def xiD_matrix(self): return _pygamma.sys_dynamic_xiD_matrix(self)
    def Dip(self): return _pygamma.sys_dynamic_Dip(self)
    def QCC(self, *args): return _pygamma.sys_dynamic_QCC(self, *args)
    def Qdelz(self, *args): return _pygamma.sys_dynamic_Qdelz(self, *args)
    def Qeta(self, *args): return _pygamma.sys_dynamic_Qeta(self, *args)
    def TQ(self, *args): return _pygamma.sys_dynamic_TQ(self, *args)
    def xiQ_vector(self): return _pygamma.sys_dynamic_xiQ_vector(self)
    def xiQ(self, *args): return _pygamma.sys_dynamic_xiQ(self, *args)
    def Quad(self): return _pygamma.sys_dynamic_Quad(self)
    def TR(self, *args): return _pygamma.sys_dynamic_TR(self, *args)
    def tauR(self): return _pygamma.sys_dynamic_tauR(self)
    def xiR_vector(self): return _pygamma.sys_dynamic_xiR_vector(self)
    def xiR(self, *args): return _pygamma.sys_dynamic_xiR(self, *args)
    def setCoords(self, *args): return _pygamma.sys_dynamic_setCoords(self, *args)
    def setDip(self): return _pygamma.sys_dynamic_setDip(self)
    def SetCSA(self, *args): return _pygamma.sys_dynamic_SetCSA(self, *args)
    def setQuad(self, *args): return _pygamma.sys_dynamic_setQuad(self, *args)
    def setRand(self, *args): return _pygamma.sys_dynamic_setRand(self, *args)
    def setTaus(self, *args): return _pygamma.sys_dynamic_setTaus(self, *args)
    def setKs(self, *args): return _pygamma.sys_dynamic_setKs(self, *args)
    def write(self, *args): return _pygamma.sys_dynamic_write(self, *args)
    def read(self, *args): return _pygamma.sys_dynamic_read(self, *args)
    def ask_read(self, *args): return _pygamma.sys_dynamic_ask_read(self, *args)
    def taus(self): return _pygamma.sys_dynamic_taus(self)
    def taux(self, *args): return _pygamma.sys_dynamic_taux(self, *args)
    def tauy(self, *args): return _pygamma.sys_dynamic_tauy(self, *args)
    def tauz(self, *args): return _pygamma.sys_dynamic_tauz(self, *args)
    def Kex_zero(self): return _pygamma.sys_dynamic_Kex_zero(self)
    def Kex(self, *args): return _pygamma.sys_dynamic_Kex(self, *args)
    def MExProcs(self): return _pygamma.sys_dynamic_MExProcs(self)
    def PtStrings(self, w1=10, w2=12, digs=2): return _pygamma.sys_dynamic_PtStrings(self, w1, w2, digs)
    def AQStrings(self, w1=10, w2=12, digs=2): return _pygamma.sys_dynamic_AQStrings(self, w1, w2, digs)
sys_dynamic_swigregister = _pygamma.sys_dynamic_swigregister
sys_dynamic_swigregister(sys_dynamic)


def SigmaEq(*args):
  return _pygamma.SigmaEq(*args)
SigmaEq = _pygamma.SigmaEq

def SigmaSS(*args):
  return _pygamma.SigmaSS(*args)
SigmaSS = _pygamma.SigmaSS
class densop(gen_op):
    __swig_setmethods__ = {}
    for _s in [gen_op]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, densop, name, value)
    __swig_getmethods__ = {}
    for _s in [gen_op]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, densop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_densop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_densop
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.densop___assign__(self, *args)
    def length(self): return _pygamma.densop_length(self)
    def SetTrace(self, *args): return _pygamma.densop_SetTrace(self, *args)
densop_swigregister = _pygamma.densop_swigregister
densop_swigregister(densop)


def R_prop(*args):
  return _pygamma.R_prop(*args)
R_prop = _pygamma.R_prop
class LSprop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LSprop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LSprop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_LSprop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_LSprop
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.LSprop___assign__(self, *args)
    def time(self): return _pygamma.LSprop_time(self)
    def dim(self): return _pygamma.LSprop_dim(self)
    def HS(self): return _pygamma.LSprop_HS(self)
    def LS(self): return _pygamma.LSprop_LS(self)
    def LOp(self): return _pygamma.LSprop_LOp(self)
    def L(self, *args): return _pygamma.LSprop_L(self, *args)
    def length(self, *args): return _pygamma.LSprop_length(self, *args)
    def SetEBR(self): return _pygamma.LSprop_SetEBR(self)
    def SetBasis(self, *args): return _pygamma.LSprop_SetBasis(self, *args)
    def evolve(self, *args): return _pygamma.LSprop_evolve(self, *args)
    def __mul__(self, *args): return _pygamma.LSprop___mul__(self, *args)
    def __imul__(self, *args): return _pygamma.LSprop___imul__(self, *args)
    def __iand__(self, *args): return _pygamma.LSprop___iand__(self, *args)
LSprop_swigregister = _pygamma.LSprop_swigregister
LSprop_swigregister(LSprop)


def FIDx(*args):
  return _pygamma.FIDx(*args)
FIDx = _pygamma.FIDx

def FIDrot(*args):
  return _pygamma.FIDrot(*args)
FIDrot = _pygamma.FIDrot

def wf_labels(*args):
  return _pygamma.wf_labels(*args)
wf_labels = _pygamma.wf_labels

def ev_labels(*args):
  return _pygamma.ev_labels(*args)
ev_labels = _pygamma.ev_labels

def wavefunctions(*args):
  return _pygamma.wavefunctions(*args)
wavefunctions = _pygamma.wavefunctions

def eigensystem(*args):
  return _pygamma.eigensystem(*args)
eigensystem = _pygamma.eigensystem

def lsprint(*args):
  return _pygamma.lsprint(*args)
lsprint = _pygamma.lsprint

def eigenvalues(*args):
  return _pygamma.eigenvalues(*args)
eigenvalues = _pygamma.eigenvalues

def UOrderMQC(*args):
  return _pygamma.UOrderMQC(*args)
UOrderMQC = _pygamma.UOrderMQC

def OrderMQC(*args):
  return _pygamma.OrderMQC(*args)
OrderMQC = _pygamma.OrderMQC

def solve_it(*args):
  return _pygamma.solve_it(*args)
solve_it = _pygamma.solve_it

def invert_it(*args):
  return _pygamma.invert_it(*args)
invert_it = _pygamma.invert_it

def LU_decomp(*args):
  return _pygamma.LU_decomp(*args)
LU_decomp = _pygamma.LU_decomp

def LU_backsub(*args):
  return _pygamma.LU_backsub(*args)
LU_backsub = _pygamma.LU_backsub

def LU_invert(*args):
  return _pygamma.LU_invert(*args)
LU_invert = _pygamma.LU_invert
class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pygamma.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pygamma.StringVector___nonzero__(self)
    def __bool__(self): return _pygamma.StringVector___bool__(self)
    def __len__(self): return _pygamma.StringVector___len__(self)
    def pop(self): return _pygamma.StringVector_pop(self)
    def __getslice__(self, *args): return _pygamma.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pygamma.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pygamma.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pygamma.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pygamma.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pygamma.StringVector___setitem__(self, *args)
    def append(self, *args): return _pygamma.StringVector_append(self, *args)
    def empty(self): return _pygamma.StringVector_empty(self)
    def size(self): return _pygamma.StringVector_size(self)
    def clear(self): return _pygamma.StringVector_clear(self)
    def swap(self, *args): return _pygamma.StringVector_swap(self, *args)
    def get_allocator(self): return _pygamma.StringVector_get_allocator(self)
    def begin(self): return _pygamma.StringVector_begin(self)
    def end(self): return _pygamma.StringVector_end(self)
    def rbegin(self): return _pygamma.StringVector_rbegin(self)
    def rend(self): return _pygamma.StringVector_rend(self)
    def pop_back(self): return _pygamma.StringVector_pop_back(self)
    def erase(self, *args): return _pygamma.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pygamma.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pygamma.StringVector_push_back(self, *args)
    def front(self): return _pygamma.StringVector_front(self)
    def back(self): return _pygamma.StringVector_back(self)
    def assign(self, *args): return _pygamma.StringVector_assign(self, *args)
    def resize(self, *args): return _pygamma.StringVector_resize(self, *args)
    def insert(self, *args): return _pygamma.StringVector_insert(self, *args)
    def reserve(self, *args): return _pygamma.StringVector_reserve(self, *args)
    def capacity(self): return _pygamma.StringVector_capacity(self)
    __swig_destroy__ = _pygamma.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _pygamma.StringVector_swigregister
StringVector_swigregister(StringVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pygamma.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pygamma.IntVector___nonzero__(self)
    def __bool__(self): return _pygamma.IntVector___bool__(self)
    def __len__(self): return _pygamma.IntVector___len__(self)
    def pop(self): return _pygamma.IntVector_pop(self)
    def __getslice__(self, *args): return _pygamma.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pygamma.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pygamma.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pygamma.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pygamma.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pygamma.IntVector___setitem__(self, *args)
    def append(self, *args): return _pygamma.IntVector_append(self, *args)
    def empty(self): return _pygamma.IntVector_empty(self)
    def size(self): return _pygamma.IntVector_size(self)
    def clear(self): return _pygamma.IntVector_clear(self)
    def swap(self, *args): return _pygamma.IntVector_swap(self, *args)
    def get_allocator(self): return _pygamma.IntVector_get_allocator(self)
    def begin(self): return _pygamma.IntVector_begin(self)
    def end(self): return _pygamma.IntVector_end(self)
    def rbegin(self): return _pygamma.IntVector_rbegin(self)
    def rend(self): return _pygamma.IntVector_rend(self)
    def pop_back(self): return _pygamma.IntVector_pop_back(self)
    def erase(self, *args): return _pygamma.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pygamma.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pygamma.IntVector_push_back(self, *args)
    def front(self): return _pygamma.IntVector_front(self)
    def back(self): return _pygamma.IntVector_back(self)
    def assign(self, *args): return _pygamma.IntVector_assign(self, *args)
    def resize(self, *args): return _pygamma.IntVector_resize(self, *args)
    def insert(self, *args): return _pygamma.IntVector_insert(self, *args)
    def reserve(self, *args): return _pygamma.IntVector_reserve(self, *args)
    def capacity(self): return _pygamma.IntVector_capacity(self)
    __swig_destroy__ = _pygamma.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _pygamma.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pygamma.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pygamma.DoubleVector___nonzero__(self)
    def __bool__(self): return _pygamma.DoubleVector___bool__(self)
    def __len__(self): return _pygamma.DoubleVector___len__(self)
    def pop(self): return _pygamma.DoubleVector_pop(self)
    def __getslice__(self, *args): return _pygamma.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pygamma.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pygamma.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pygamma.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pygamma.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pygamma.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _pygamma.DoubleVector_append(self, *args)
    def empty(self): return _pygamma.DoubleVector_empty(self)
    def size(self): return _pygamma.DoubleVector_size(self)
    def clear(self): return _pygamma.DoubleVector_clear(self)
    def swap(self, *args): return _pygamma.DoubleVector_swap(self, *args)
    def get_allocator(self): return _pygamma.DoubleVector_get_allocator(self)
    def begin(self): return _pygamma.DoubleVector_begin(self)
    def end(self): return _pygamma.DoubleVector_end(self)
    def rbegin(self): return _pygamma.DoubleVector_rbegin(self)
    def rend(self): return _pygamma.DoubleVector_rend(self)
    def pop_back(self): return _pygamma.DoubleVector_pop_back(self)
    def erase(self, *args): return _pygamma.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pygamma.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pygamma.DoubleVector_push_back(self, *args)
    def front(self): return _pygamma.DoubleVector_front(self)
    def back(self): return _pygamma.DoubleVector_back(self)
    def assign(self, *args): return _pygamma.DoubleVector_assign(self, *args)
    def resize(self, *args): return _pygamma.DoubleVector_resize(self, *args)
    def insert(self, *args): return _pygamma.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _pygamma.DoubleVector_reserve(self, *args)
    def capacity(self): return _pygamma.DoubleVector_capacity(self)
    __swig_destroy__ = _pygamma.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _pygamma.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class TTable1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TTable1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TTable1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_TTable1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_TTable1D
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.TTable1D___assign__(self, *args)
    def center(self, wa=True): return _pygamma.TTable1D_center(self, wa)
    def offset(self, *args): return _pygamma.TTable1D_offset(self, *args)
    def FRscale(self, *args): return _pygamma.TTable1D_FRscale(self, *args)
    def BC(self, *args): return _pygamma.TTable1D_BC(self, *args)
    def Iscale(self, *args): return _pygamma.TTable1D_Iscale(self, *args)
    def Iremove(self, *args): return _pygamma.TTable1D_Iremove(self, *args)
    def broaden(self, *args): return _pygamma.TTable1D_broaden(self, *args)
    def resolution(self, *args): return _pygamma.TTable1D_resolution(self, *args)
    def T(self, *args): return _pygamma.TTable1D_T(self, *args)
    def Ts(self, *args): return _pygamma.TTable1D_Ts(self, *args)
    def TCutoffs(self, *args): return _pygamma.TTable1D_TCutoffs(self, *args)
    def F(self, *args): return _pygamma.TTable1D_F(self, *args)
    def Fs(self, *args): return _pygamma.TTable1D_Fs(self, *args)
    def FD(self, *args): return _pygamma.TTable1D_FD(self, *args)
    def pcorrect(self, *args): return _pygamma.TTable1D_pcorrect(self, *args)
    def R2(self, *args): return _pygamma.TTable1D_R2(self, *args)
    def Fr(self, *args): return _pygamma.TTable1D_Fr(self, *args)
    def I(self, *args): return _pygamma.TTable1D_I(self, *args)
    def Tr(self, *args): return _pygamma.TTable1D_Tr(self, *args)
    def LineWidths(self): return _pygamma.TTable1D_LineWidths(self)
    def Intensities(self): return _pygamma.TTable1D_Intensities(self)
    def Phases(self): return _pygamma.TTable1D_Phases(self)
    def size(self): return _pygamma.TTable1D_size(self)
    def FRmax(self): return _pygamma.TTable1D_FRmax(self)
    def FRmin(self): return _pygamma.TTable1D_FRmin(self)
    def Tdmin(self): return _pygamma.TTable1D_Tdmin(self)
    def LWmax(self): return _pygamma.TTable1D_LWmax(self)
    def LWmin(self): return _pygamma.TTable1D_LWmin(self)
    def Imax(self): return _pygamma.TTable1D_Imax(self)
    def Noisemax(self): return _pygamma.TTable1D_Noisemax(self)
    def Sort(self, *args): return _pygamma.TTable1D_Sort(self, *args)
    def readPSet(self, *args): return _pygamma.TTable1D_readPSet(self, *args)
    def setType(self, *args): return _pygamma.TTable1D_setType(self, *args)
    def setSort(self, *args): return _pygamma.TTable1D_setSort(self, *args)
    def setConv(self, *args): return _pygamma.TTable1D_setConv(self, *args)
    def setIcut(self, *args): return _pygamma.TTable1D_setIcut(self, *args)
    def setInorm(self, inorm=0.0): return _pygamma.TTable1D_setInorm(self, inorm)
    def setSN(self, *args): return _pygamma.TTable1D_setSN(self, *args)
    def setHprint(self, *args): return _pygamma.TTable1D_setHprint(self, *args)
    def setRprint(self, *args): return _pygamma.TTable1D_setRprint(self, *args)
    def setLWprint(self, *args): return _pygamma.TTable1D_setLWprint(self, *args)
    def setT2print(self, *args): return _pygamma.TTable1D_setT2print(self, *args)
    def setPHprint(self, *args): return _pygamma.TTable1D_setPHprint(self, *args)
    def setFreqRev(self): return _pygamma.TTable1D_setFreqRev(self)
    def getType(self): return _pygamma.TTable1D_getType(self)
    def getSort(self): return _pygamma.TTable1D_getSort(self)
    def getConv(self): return _pygamma.TTable1D_getConv(self)
    def getIcut(self): return _pygamma.TTable1D_getIcut(self)
    def getInorm(self): return _pygamma.TTable1D_getInorm(self)
    def getSN(self): return _pygamma.TTable1D_getSN(self)
    def getHprint(self): return _pygamma.TTable1D_getHprint(self)
    def getRprint(self): return _pygamma.TTable1D_getRprint(self)
    def getLWprint(self): return _pygamma.TTable1D_getLWprint(self)
    def getT2print(self): return _pygamma.TTable1D_getT2print(self)
    def getPHprint(self): return _pygamma.TTable1D_getPHprint(self)
    def getFreqRev(self): return _pygamma.TTable1D_getFreqRev(self)
    def printStrings(self): return _pygamma.TTable1D_printStrings(self)
    def write(self, *args): return _pygamma.TTable1D_write(self, *args)
    def dbwrite_old(self, *args): return _pygamma.TTable1D_dbwrite_old(self, *args)
    def dbwrite(self, *args): return _pygamma.TTable1D_dbwrite(self, *args)
    def calc_spectra(self, *args): return _pygamma.TTable1D_calc_spectra(self, *args)
    def read(self, *args): return _pygamma.TTable1D_read(self, *args)
TTable1D_swigregister = _pygamma.TTable1D_swigregister
TTable1D_swigregister(TTable1D)

class acquire1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, acquire1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, acquire1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_acquire1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_acquire1D
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.acquire1D___assign__(self, *args)
    def L(self): return _pygamma.acquire1D_L(self)
    def D(self): return _pygamma.acquire1D_D(self)
    def TTable(self): return _pygamma.acquire1D_TTable(self)
    def Detector(self, *args): return _pygamma.acquire1D_Detector(self, *args)
    def T(self, *args): return _pygamma.acquire1D_T(self, *args)
    def F(self, *args): return _pygamma.acquire1D_F(self, *args)
    def FD(self, *args): return _pygamma.acquire1D_FD(self, *args)
    def table(self, *args): return _pygamma.acquire1D_table(self, *args)
    def table_snapshot(self, *args): return _pygamma.acquire1D_table_snapshot(self, *args)
    def offset(self, *args): return _pygamma.acquire1D_offset(self, *args)
    def FRscale(self, *args): return _pygamma.acquire1D_FRscale(self, *args)
    def Iscale(self, *args): return _pygamma.acquire1D_Iscale(self, *args)
    def broaden(self, *args): return _pygamma.acquire1D_broaden(self, *args)
    def resolution(self, *args): return _pygamma.acquire1D_resolution(self, *args)
    def pcorrect(self, *args): return _pygamma.acquire1D_pcorrect(self, *args)
    def Wmax(self): return _pygamma.acquire1D_Wmax(self)
    def LWmax(self): return _pygamma.acquire1D_LWmax(self)
    def setSort(self, *args): return _pygamma.acquire1D_setSort(self, *args)
    def setConv(self, *args): return _pygamma.acquire1D_setConv(self, *args)
    def ls(self): return _pygamma.acquire1D_ls(self)
    def size(self): return _pygamma.acquire1D_size(self)
    def full_size(self): return _pygamma.acquire1D_full_size(self)
    def transitions(self): return _pygamma.acquire1D_transitions(self)
    def write(self, *args): return _pygamma.acquire1D_write(self, *args)
    def read(self, *args): return _pygamma.acquire1D_read(self, *args)
acquire1D_swigregister = _pygamma.acquire1D_swigregister
acquire1D_swigregister(acquire1D)


def Kex(*args):
  return _pygamma.Kex(*args)
Kex = _pygamma.Kex
class RBasic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RBasic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RBasic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_RBasic(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_RBasic
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.RBasic___assign__(self, *args)
    def spins(self): return _pygamma.RBasic_spins(self)
    def HS(self): return _pygamma.RBasic_HS(self)
    def T1(self, *args): return _pygamma.RBasic_T1(self, *args)
    def T2(self, *args): return _pygamma.RBasic_T2(self, *args)
    def R1(self, *args): return _pygamma.RBasic_R1(self, *args)
    def R2(self, *args): return _pygamma.RBasic_R2(self, *args)
    def LW(self, *args): return _pygamma.RBasic_LW(self, *args)
    def RB(self, *args): return _pygamma.RBasic_RB(self, *args)
    def T1s(self): return _pygamma.RBasic_T1s(self)
    def T2s(self): return _pygamma.RBasic_T2s(self)
    def R1s(self): return _pygamma.RBasic_R1s(self)
    def R2s(self): return _pygamma.RBasic_R2s(self)
    def LWs(self): return _pygamma.RBasic_LWs(self)
    def RBRates(self, *args): return _pygamma.RBasic_RBRates(self, *args)
    def SetSystem(self, *args): return _pygamma.RBasic_SetSystem(self, *args)
    def SetH0(self, *args): return _pygamma.RBasic_SetH0(self, *args)
    def SetDet(self, *args): return _pygamma.RBasic_SetDet(self, *args)
    def SetSigInf(self, *args): return _pygamma.RBasic_SetSigInf(self, *args)
    def R2Mx(self): return _pygamma.RBasic_R2Mx(self)
    def R2LOp(self): return _pygamma.RBasic_R2LOp(self)
    def R1LOp(self): return _pygamma.RBasic_R1LOp(self)
    def SigmaT1(self, *args): return _pygamma.RBasic_SigmaT1(self, *args)
    def SigmaT2(self, *args): return _pygamma.RBasic_SigmaT2(self, *args)
    def SigmaC(self, *args): return _pygamma.RBasic_SigmaC(self, *args)
    def SigmaCEq(self, *args): return _pygamma.RBasic_SigmaCEq(self, *args)
    def RC(self): return _pygamma.RBasic_RC(self)
    def HC(self, *args): return _pygamma.RBasic_HC(self, *args)
    def Sigma(self, *args): return _pygamma.RBasic_Sigma(self, *args)
    def ReadT2(self, *args): return _pygamma.RBasic_ReadT2(self, *args)
    def ReadT1(self, *args): return _pygamma.RBasic_ReadT1(self, *args)
    def ReadLW(self, *args): return _pygamma.RBasic_ReadLW(self, *args)
    def ReadR2(self, *args): return _pygamma.RBasic_ReadR2(self, *args)
    def ReadR1(self, *args): return _pygamma.RBasic_ReadR1(self, *args)
    def ReadPar(self, *args): return _pygamma.RBasic_ReadPar(self, *args)
    def ReadT2s(self, *args): return _pygamma.RBasic_ReadT2s(self, *args)
    def ReadT1s(self, *args): return _pygamma.RBasic_ReadT1s(self, *args)
    def ReadLWs(self, *args): return _pygamma.RBasic_ReadLWs(self, *args)
    def ReadR2s(self, *args): return _pygamma.RBasic_ReadR2s(self, *args)
    def ReadR1s(self, *args): return _pygamma.RBasic_ReadR1s(self, *args)
    def ReadPars(self, *args): return _pygamma.RBasic_ReadPars(self, *args)
    def read(self, *args): return _pygamma.RBasic_read(self, *args)
    def Evolve(self, *args): return _pygamma.RBasic_Evolve(self, *args)
    def FID(self, *args): return _pygamma.RBasic_FID(self, *args)
    def FzCoeffs(self, *args): return _pygamma.RBasic_FzCoeffs(self, *args)
RBasic_swigregister = _pygamma.RBasic_swigregister
RBasic_swigregister(RBasic)

class quatern(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, quatern, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, quatern, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_quatern(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_quatern
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.quatern___assign__(self, *args)
    def A(self): return _pygamma.quatern_A(self)
    def B(self): return _pygamma.quatern_B(self)
    def C(self): return _pygamma.quatern_C(self)
    def D(self): return _pygamma.quatern_D(self)
    def alpha(self): return _pygamma.quatern_alpha(self)
    def beta(self): return _pygamma.quatern_beta(self)
    def gamma(self): return _pygamma.quatern_gamma(self)
    def EA(self): return _pygamma.quatern_EA(self)
    def ABG(self): return _pygamma.quatern_ABG(self)
    def __mul__(self, *args): return _pygamma.quatern___mul__(self, *args)
    def __imul__(self, *args): return _pygamma.quatern___imul__(self, *args)
    def __iand__(self, *args): return _pygamma.quatern___iand__(self, *args)
    def composite(self, *args): return _pygamma.quatern_composite(self, *args)
    def RotMx(self): return _pygamma.quatern_RotMx(self)
    def RMx(self): return _pygamma.quatern_RMx(self)
    def norm(self): return _pygamma.quatern_norm(self)
    def inverse(self): return _pygamma.quatern_inverse(self)
    def __eq__(self, *args): return _pygamma.quatern___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.quatern___ne__(self, *args)
    def __lt__(self, *args): return _pygamma.quatern___lt__(self, *args)
    def __gt__(self, *args): return _pygamma.quatern___gt__(self, *args)
    def param(self, *args): return _pygamma.quatern_param(self, *args)
    def PSetAdd(self, *args): return _pygamma.quatern_PSetAdd(self, *args)
    def write(self, *args): return _pygamma.quatern_write(self, *args)
    def read(self, *args): return _pygamma.quatern_read(self, *args)
    __swig_getmethods__["ASinPos"] = lambda x: _pygamma.quatern_ASinPos
    if _newclass:ASinPos = staticmethod(_pygamma.quatern_ASinPos)
    __swig_getmethods__["ACosPos"] = lambda x: _pygamma.quatern_ACosPos
    if _newclass:ACosPos = staticmethod(_pygamma.quatern_ACosPos)
    __swig_getmethods__["ATanPos"] = lambda x: _pygamma.quatern_ATanPos
    if _newclass:ATanPos = staticmethod(_pygamma.quatern_ATanPos)
    def ShowConversion(self): return _pygamma.quatern_ShowConversion(self)
    __swig_getmethods__["ValidRMx"] = lambda x: _pygamma.quatern_ValidRMx
    if _newclass:ValidRMx = staticmethod(_pygamma.quatern_ValidRMx)
quatern_swigregister = _pygamma.quatern_swigregister
quatern_swigregister(quatern)

def quatern_ASinPos():
  return _pygamma.quatern_ASinPos()
quatern_ASinPos = _pygamma.quatern_ASinPos

def quatern_ACosPos():
  return _pygamma.quatern_ACosPos()
quatern_ACosPos = _pygamma.quatern_ACosPos

def quatern_ATanPos():
  return _pygamma.quatern_ATanPos()
quatern_ATanPos = _pygamma.quatern_ATanPos

def quatern_ValidRMx(*args):
  return _pygamma.quatern_ValidRMx(*args)
quatern_ValidRMx = _pygamma.quatern_ValidRMx


def composite(*args):
  return _pygamma.composite(*args)
composite = _pygamma.composite
class EAngles(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EAngles, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EAngles, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_EAngles(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_EAngles
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.EAngles___assign__(self, *args)
    def alpha(self, *args): return _pygamma.EAngles_alpha(self, *args)
    def beta(self, *args): return _pygamma.EAngles_beta(self, *args)
    def gamma(self, *args): return _pygamma.EAngles_gamma(self, *args)
    def __mul__(self, *args): return _pygamma.EAngles___mul__(self, *args)
    def __imul__(self, *args): return _pygamma.EAngles___imul__(self, *args)
    def __iand__(self, *args): return _pygamma.EAngles___iand__(self, *args)
    def composite(self, *args): return _pygamma.EAngles_composite(self, *args)
    def param(self, *args): return _pygamma.EAngles_param(self, *args)
    def PSetAdd(self, *args): return _pygamma.EAngles_PSetAdd(self, *args)
    def write(self, *args): return _pygamma.EAngles_write(self, *args)
    def read(self, *args): return _pygamma.EAngles_read(self, *args)
    __swig_getmethods__["SetCutoff"] = lambda x: _pygamma.EAngles_SetCutoff
    if _newclass:SetCutoff = staticmethod(_pygamma.EAngles_SetCutoff)
    def __eq__(self, *args): return _pygamma.EAngles___eq__(self, *args)
    def __ne__(self, *args): return _pygamma.EAngles___ne__(self, *args)
    def __lt__(self, *args): return _pygamma.EAngles___lt__(self, *args)
    def __gt__(self, *args): return _pygamma.EAngles___gt__(self, *args)
    def equal(self, *args): return _pygamma.EAngles_equal(self, *args)
    def inverse(self): return _pygamma.EAngles_inverse(self)
    def RMx(self, inv=False): return _pygamma.EAngles_RMx(self, inv)
    def Rmx(self): return _pygamma.EAngles_Rmx(self)
    def invRmx(self): return _pygamma.EAngles_invRmx(self)
EAngles_swigregister = _pygamma.EAngles_swigregister
EAngles_swigregister(EAngles)

def EAngles_SetCutoff(*args):
  return _pygamma.EAngles_SetCutoff(*args)
EAngles_SetCutoff = _pygamma.EAngles_SetCutoff

class decomp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, decomp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, decomp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_decomp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_decomp
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.decomp___assign__(self, *args)
    def decompose(self, *args): return _pygamma.decomp_decompose(self, *args)
    def size(self): return _pygamma.decomp_size(self)
    def LS(self): return _pygamma.decomp_LS(self)
    def HS(self): return _pygamma.decomp_HS(self)
    def Names(self, *args): return _pygamma.decomp_Names(self, *args)
    def Name(self, *args): return _pygamma.decomp_Name(self, *args)
    def OpName(self, *args): return _pygamma.decomp_OpName(self, *args)
    def AltOpName(self, *args): return _pygamma.decomp_AltOpName(self, *args)
    def MaxOpNameLen(self): return _pygamma.decomp_MaxOpNameLen(self)
    def MaxOpAltNameLen(self): return _pygamma.decomp_MaxOpAltNameLen(self)
    def Coherence(self, *args): return _pygamma.decomp_Coherence(self, *args)
    def MaxCoherence(self): return _pygamma.decomp_MaxCoherence(self)
    def Op(self, *args): return _pygamma.decomp_Op(self, *args)
    def values(self, *args): return _pygamma.decomp_values(self, *args)
    def value(self, *args): return _pygamma.decomp_value(self, *args)
    def bcoefficient(self, *args): return _pygamma.decomp_bcoefficient(self, *args)
    def index(self, *args): return _pygamma.decomp_index(self, *args)
    def SortBySpins(self): return _pygamma.decomp_SortBySpins(self)
decomp_swigregister = _pygamma.decomp_swigregister
decomp_swigregister(decomp)


def PB_dec(*args):
  return _pygamma.PB_dec(*args)
PB_dec = _pygamma.PB_dec
class PulWaveform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulWaveform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PulWaveform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_PulWaveform(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_PulWaveform
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.PulWaveform___assign__(self, *args)
    def name(self): return _pygamma.PulWaveform_name(self)
    def values(self): return _pygamma.PulWaveform_values(self)
    def lengths(self): return _pygamma.PulWaveform_lengths(self)
    def strength(self, *args): return _pygamma.PulWaveform_strength(self, *args)
    def phase(self, *args): return _pygamma.PulWaveform_phase(self, *args)
    def length(self, *args): return _pygamma.PulWaveform_length(self, *args)
    def value(self, *args): return _pygamma.PulWaveform_value(self, *args)
    def maxlength(self): return _pygamma.PulWaveform_maxlength(self)
    def minlength(self, cutoff=1.e-13): return _pygamma.PulWaveform_minlength(self, cutoff)
    def maxgamB1(self): return _pygamma.PulWaveform_maxgamB1(self)
    def mingamB1(self): return _pygamma.PulWaveform_mingamB1(self)
    def gamB1const(self): return _pygamma.PulWaveform_gamB1const(self)
    def phaseconst(self): return _pygamma.PulWaveform_phaseconst(self)
    def timeconst(self): return _pygamma.PulWaveform_timeconst(self)
    def steps(self, *args): return _pygamma.PulWaveform_steps(self, *args)
    def fullsteps(self, *args): return _pygamma.PulWaveform_fullsteps(self, *args)
    def WFs(self, *args): return _pygamma.PulWaveform_WFs(self, *args)
    def fullWFs(self, *args): return _pygamma.PulWaveform_fullWFs(self, *args)
    def sumlength(self, *args): return _pygamma.PulWaveform_sumlength(self, *args)
    def scalegB1(self, *args): return _pygamma.PulWaveform_scalegB1(self, *args)
    def getIdeal(self, *args): return _pygamma.PulWaveform_getIdeal(self, *args)
    def IvsT(self, split=0, ends=0, N=1): return _pygamma.PulWaveform_IvsT(self, split, ends, N)
    def PvsT(self, spl=0, ends=0, N=1, p=0): return _pygamma.PulWaveform_PvsT(self, spl, ends, N, p)
    def GP(self, type=0, split=0, ends=0, N=1): return _pygamma.PulWaveform_GP(self, type, split, ends, N)
    def FM(self, type=0, split=0, ends=0, N=1): return _pygamma.PulWaveform_FM(self, type, split, ends, N)
PulWaveform_swigregister = _pygamma.PulWaveform_swigregister
PulWaveform_swigregister(PulWaveform)

class PulComposite(PulWaveform):
    __swig_setmethods__ = {}
    for _s in [PulWaveform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulComposite, name, value)
    __swig_getmethods__ = {}
    for _s in [PulWaveform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PulComposite, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_PulComposite(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_PulComposite
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.PulComposite___assign__(self, *args)
    def GetH(self, *args): return _pygamma.PulComposite_GetH(self, *args)
    def L0(self, *args): return _pygamma.PulComposite_L0(self, *args)
    def GetL0(self, *args): return _pygamma.PulComposite_GetL0(self, *args)
    def Leff(self, *args): return _pygamma.PulComposite_Leff(self, *args)
    def GetLeff(self, *args): return _pygamma.PulComposite_GetLeff(self, *args)
    def GetU(self, *args): return _pygamma.PulComposite_GetU(self, *args)
    def GetUsum(self, *args): return _pygamma.PulComposite_GetUsum(self, *args)
    def GetUmult(self, *args): return _pygamma.PulComposite_GetUmult(self, *args)
    def channel(self): return _pygamma.PulComposite_channel(self)
    def FZ(self): return _pygamma.PulComposite_FZ(self)
    def ROp(self): return _pygamma.PulComposite_ROp(self)
    def Precision(self): return _pygamma.PulComposite_Precision(self)
    def scalegB1(self, *args): return _pygamma.PulComposite_scalegB1(self, *args)
    def setRelax(self, *args): return _pygamma.PulComposite_setRelax(self, *args)
    def FIDheader(self, *args): return _pygamma.PulComposite_FIDheader(self, *args)
    def FIDpoint(self, *args): return _pygamma.PulComposite_FIDpoint(self, *args)
    def FIDvalue(self, *args): return _pygamma.PulComposite_FIDvalue(self, *args)
    def FIDtell(self, *args): return _pygamma.PulComposite_FIDtell(self, *args)
    def FIDsync(self, *args): return _pygamma.PulComposite_FIDsync(self, *args)
    def FIDtest(self, *args): return _pygamma.PulComposite_FIDtest(self, *args)
    def FIDsynchWF(self, *args): return _pygamma.PulComposite_FIDsynchWF(self, *args)
    def FIDsynchST(self, *args): return _pygamma.PulComposite_FIDsynchST(self, *args)
    def FIDsynchFR(self, *args): return _pygamma.PulComposite_FIDsynchFR(self, *args)
    def FID(self, *args): return _pygamma.PulComposite_FID(self, *args)
    def FIDRsynchWF(self, *args): return _pygamma.PulComposite_FIDRsynchWF(self, *args)
    def FIDRsynchST(self, *args): return _pygamma.PulComposite_FIDRsynchST(self, *args)
    def FIDRsynchFR(self, *args): return _pygamma.PulComposite_FIDRsynchFR(self, *args)
    def FIDR(self, *args): return _pygamma.PulComposite_FIDR(self, *args)
PulComposite_swigregister = _pygamma.PulComposite_swigregister
PulComposite_swigregister(PulComposite)

class Pulse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pulse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pulse, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_Pulse(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_Pulse
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.Pulse___assign__(self, *args)
    def channel(self): return _pygamma.Pulse_channel(self)
    def angle(self): return _pygamma.Pulse_angle(self)
    def phase(self): return _pygamma.Pulse_phase(self)
    def offset(self): return _pygamma.Pulse_offset(self)
    def length(self): return _pygamma.Pulse_length(self)
    def strength(self, *args): return _pygamma.Pulse_strength(self, *args)
    def read(self, *args): return _pygamma.Pulse_read(self, *args)
    def ask_read(self, *args): return _pygamma.Pulse_ask_read(self, *args)
Pulse_swigregister = _pygamma.Pulse_swigregister
Pulse_swigregister(Pulse)

class Gpuldat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gpuldat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Gpuldat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["N"] = _pygamma.Gpuldat_N_set
    __swig_getmethods__["N"] = _pygamma.Gpuldat_N_get
    if _newclass:N = _swig_property(_pygamma.Gpuldat_N_get, _pygamma.Gpuldat_N_set)
    __swig_setmethods__["Wrf"] = _pygamma.Gpuldat_Wrf_set
    __swig_getmethods__["Wrf"] = _pygamma.Gpuldat_Wrf_get
    if _newclass:Wrf = _swig_property(_pygamma.Gpuldat_Wrf_get, _pygamma.Gpuldat_Wrf_set)
    __swig_setmethods__["Iso"] = _pygamma.Gpuldat_Iso_set
    __swig_getmethods__["Iso"] = _pygamma.Gpuldat_Iso_get
    if _newclass:Iso = _swig_property(_pygamma.Gpuldat_Iso_get, _pygamma.Gpuldat_Iso_set)
    __swig_setmethods__["gamB1"] = _pygamma.Gpuldat_gamB1_set
    __swig_getmethods__["gamB1"] = _pygamma.Gpuldat_gamB1_get
    if _newclass:gamB1 = _swig_property(_pygamma.Gpuldat_gamB1_get, _pygamma.Gpuldat_gamB1_set)
    __swig_setmethods__["tau"] = _pygamma.Gpuldat_tau_set
    __swig_getmethods__["tau"] = _pygamma.Gpuldat_tau_get
    if _newclass:tau = _swig_property(_pygamma.Gpuldat_tau_get, _pygamma.Gpuldat_tau_set)
    __swig_setmethods__["fact"] = _pygamma.Gpuldat_fact_set
    __swig_getmethods__["fact"] = _pygamma.Gpuldat_fact_get
    if _newclass:fact = _swig_property(_pygamma.Gpuldat_fact_get, _pygamma.Gpuldat_fact_set)
    __swig_setmethods__["phi"] = _pygamma.Gpuldat_phi_set
    __swig_getmethods__["phi"] = _pygamma.Gpuldat_phi_get
    if _newclass:phi = _swig_property(_pygamma.Gpuldat_phi_get, _pygamma.Gpuldat_phi_set)
    def __init__(self): 
        this = _pygamma.new_Gpuldat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_Gpuldat
    __del__ = lambda self : None;
Gpuldat_swigregister = _pygamma.Gpuldat_swigregister
Gpuldat_swigregister(Gpuldat)


def Gpulse_Hs(*args):
  return _pygamma.Gpulse_Hs(*args)
Gpulse_Hs = _pygamma.Gpulse_Hs

def Gpulse_Us(*args):
  return _pygamma.Gpulse_Us(*args)
Gpulse_Us = _pygamma.Gpulse_Us

def Gpulse_U(*args):
  return _pygamma.Gpulse_U(*args)
Gpulse_U = _pygamma.Gpulse_U

def Gpulse_UX(*args):
  return _pygamma.Gpulse_UX(*args)
Gpulse_UX = _pygamma.Gpulse_UX

def Gangle(*args):
  return _pygamma.Gangle(*args)
Gangle = _pygamma.Gangle

def GgamB1(*args):
  return _pygamma.GgamB1(*args)
GgamB1 = _pygamma.GgamB1

def Gtime(*args):
  return _pygamma.Gtime(*args)
Gtime = _pygamma.Gtime

def GNvect(*args):
  return _pygamma.GNvect(*args)
GNvect = _pygamma.GNvect

def Gvect(*args):
  return _pygamma.Gvect(*args)
Gvect = _pygamma.Gvect

def GIntvec(*args):
  return _pygamma.GIntvec(*args)
GIntvec = _pygamma.GIntvec

def Ghistogram(*args):
  return _pygamma.Ghistogram(*args)
Ghistogram = _pygamma.Ghistogram

def ask_Gpulse(*args):
  return _pygamma.ask_Gpulse(*args)
ask_Gpulse = _pygamma.ask_Gpulse

def read_Gpulse(*args):
  return _pygamma.read_Gpulse(*args)
read_Gpulse = _pygamma.read_Gpulse
class SincPulDat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SincPulDat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SincPulDat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["N"] = _pygamma.SincPulDat_N_set
    __swig_getmethods__["N"] = _pygamma.SincPulDat_N_get
    if _newclass:N = _swig_property(_pygamma.SincPulDat_N_get, _pygamma.SincPulDat_N_set)
    __swig_setmethods__["Wrf"] = _pygamma.SincPulDat_Wrf_set
    __swig_getmethods__["Wrf"] = _pygamma.SincPulDat_Wrf_get
    if _newclass:Wrf = _swig_property(_pygamma.SincPulDat_Wrf_get, _pygamma.SincPulDat_Wrf_set)
    __swig_setmethods__["Iso"] = _pygamma.SincPulDat_Iso_set
    __swig_getmethods__["Iso"] = _pygamma.SincPulDat_Iso_get
    if _newclass:Iso = _swig_property(_pygamma.SincPulDat_Iso_get, _pygamma.SincPulDat_Iso_set)
    __swig_setmethods__["gamB1"] = _pygamma.SincPulDat_gamB1_set
    __swig_getmethods__["gamB1"] = _pygamma.SincPulDat_gamB1_get
    if _newclass:gamB1 = _swig_property(_pygamma.SincPulDat_gamB1_get, _pygamma.SincPulDat_gamB1_set)
    __swig_setmethods__["tau"] = _pygamma.SincPulDat_tau_set
    __swig_getmethods__["tau"] = _pygamma.SincPulDat_tau_get
    if _newclass:tau = _swig_property(_pygamma.SincPulDat_tau_get, _pygamma.SincPulDat_tau_set)
    __swig_setmethods__["node"] = _pygamma.SincPulDat_node_set
    __swig_getmethods__["node"] = _pygamma.SincPulDat_node_get
    if _newclass:node = _swig_property(_pygamma.SincPulDat_node_get, _pygamma.SincPulDat_node_set)
    __swig_setmethods__["phi"] = _pygamma.SincPulDat_phi_set
    __swig_getmethods__["phi"] = _pygamma.SincPulDat_phi_get
    if _newclass:phi = _swig_property(_pygamma.SincPulDat_phi_get, _pygamma.SincPulDat_phi_set)
    def __init__(self): 
        this = _pygamma.new_SincPulDat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_SincPulDat
    __del__ = lambda self : None;
SincPulDat_swigregister = _pygamma.SincPulDat_swigregister
SincPulDat_swigregister(SincPulDat)


def SincPulseHs(*args):
  return _pygamma.SincPulseHs(*args)
SincPulseHs = _pygamma.SincPulseHs

def SincPulseUs(*args):
  return _pygamma.SincPulseUs(*args)
SincPulseUs = _pygamma.SincPulseUs

def SincPulseU(*args):
  return _pygamma.SincPulseU(*args)
SincPulseU = _pygamma.SincPulseU

def SincNVect(*args):
  return _pygamma.SincNVect(*args)
SincNVect = _pygamma.SincNVect

def SincVect(*args):
  return _pygamma.SincVect(*args)
SincVect = _pygamma.SincVect

def SincIntVec(*args):
  return _pygamma.SincIntVec(*args)
SincIntVec = _pygamma.SincIntVec

def SincSteps(*args):
  return _pygamma.SincSteps(*args)
SincSteps = _pygamma.SincSteps

def SincStrength(*args):
  return _pygamma.SincStrength(*args)
SincStrength = _pygamma.SincStrength

def SincSelectivity(*args):
  return _pygamma.SincSelectivity(*args)
SincSelectivity = _pygamma.SincSelectivity

def SincPhase(*args):
  return _pygamma.SincPhase(*args)
SincPhase = _pygamma.SincPhase

def ReadSinc(*args):
  return _pygamma.ReadSinc(*args)
ReadSinc = _pygamma.ReadSinc

def SincHistogram(*args):
  return _pygamma.SincHistogram(*args)
SincHistogram = _pygamma.SincHistogram

def SincPts(*args):
  return _pygamma.SincPts(*args)
SincPts = _pygamma.SincPts

def SincNode(*args):
  return _pygamma.SincNode(*args)
SincNode = _pygamma.SincNode

def SincTime(*args):
  return _pygamma.SincTime(*args)
SincTime = _pygamma.SincTime

def SincGamB1(*args):
  return _pygamma.SincGamB1(*args)
SincGamB1 = _pygamma.SincGamB1

def SincAngle(*args):
  return _pygamma.SincAngle(*args)
SincAngle = _pygamma.SincAngle

def SincIso(*args):
  return _pygamma.SincIso(*args)
SincIso = _pygamma.SincIso

def SincWrf(*args):
  return _pygamma.SincWrf(*args)
SincWrf = _pygamma.SincWrf

def SincPhi(*args):
  return _pygamma.SincPhi(*args)
SincPhi = _pygamma.SincPhi

def SincAsk(*args):
  return _pygamma.SincAsk(*args)
SincAsk = _pygamma.SincAsk

def SincZero(*args):
  return _pygamma.SincZero(*args)
SincZero = _pygamma.SincZero

def SincPrep(*args):
  return _pygamma.SincPrep(*args)
SincPrep = _pygamma.SincPrep
class PulCycle(PulComposite):
    __swig_setmethods__ = {}
    for _s in [PulComposite]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulCycle, name, value)
    __swig_getmethods__ = {}
    for _s in [PulComposite]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PulCycle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_PulCycle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_PulCycle
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.PulCycle___assign__(self, *args)
    def GetCU(self, *args): return _pygamma.PulCycle_GetCU(self, *args)
    def GetCUsum(self, *args): return _pygamma.PulCycle_GetCUsum(self, *args)
    def GetCUmult(self, *args): return _pygamma.PulCycle_GetCUmult(self, *args)
    def GetCG(self, *args): return _pygamma.PulCycle_GetCG(self, *args)
    def GetCGsum(self, *args): return _pygamma.PulCycle_GetCGsum(self, *args)
    def GetCGmult(self, *args): return _pygamma.PulCycle_GetCGmult(self, *args)
    def WF_steps(self): return _pygamma.PulCycle_WF_steps(self)
    def name(self): return _pygamma.PulCycle_name(self)
    def WF_name(self): return _pygamma.PulCycle_WF_name(self)
    def values(self): return _pygamma.PulCycle_values(self)
    def WF_values(self): return _pygamma.PulCycle_WF_values(self)
    def length(self): return _pygamma.PulCycle_length(self)
    def WF_length(self): return _pygamma.PulCycle_WF_length(self)
    def value(self, *args): return _pygamma.PulCycle_value(self, *args)
    def phase(self, *args): return _pygamma.PulCycle_phase(self, *args)
    def steps(self, *args): return _pygamma.PulCycle_steps(self, *args)
    def cycles(self, *args): return _pygamma.PulCycle_cycles(self, *args)
    def fullcycles(self, *args): return _pygamma.PulCycle_fullcycles(self, *args)
    def scalegB1(self, *args): return _pygamma.PulCycle_scalegB1(self, *args)
    def IvsT(self, *args): return _pygamma.PulCycle_IvsT(self, *args)
    def PvsT(self, *args): return _pygamma.PulCycle_PvsT(self, *args)
    def GP(self, ty=1, spl=0, ed=0, N=1, p=0): return _pygamma.PulCycle_GP(self, ty, spl, ed, N, p)
    def FM(self, ty=1, spl=0, ed=0, N=1, p=0): return _pygamma.PulCycle_FM(self, ty, spl, ed, N, p)
    def FIDsync(self, *args): return _pygamma.PulCycle_FIDsync(self, *args)
    def FIDtest(self, *args): return _pygamma.PulCycle_FIDtest(self, *args)
    def FIDsynchCYC(self, *args): return _pygamma.PulCycle_FIDsynchCYC(self, *args)
    def FIDWFsynch(self, *args): return _pygamma.PulCycle_FIDWFsynch(self, *args)
    def FIDSTsynch(self, *args): return _pygamma.PulCycle_FIDSTsynch(self, *args)
    def FID(self, *args): return _pygamma.PulCycle_FID(self, *args)
    def FIDRsynchCYC(self, *args): return _pygamma.PulCycle_FIDRsynchCYC(self, *args)
    def FIDRWFsynch(self, *args): return _pygamma.PulCycle_FIDRWFsynch(self, *args)
    def FIDRSTsynch(self, *args): return _pygamma.PulCycle_FIDRSTsynch(self, *args)
    def FIDR(self, *args): return _pygamma.PulCycle_FIDR(self, *args)
PulCycle_swigregister = _pygamma.PulCycle_swigregister
PulCycle_swigregister(PulCycle)

class MLEV(Pulse):
    __swig_setmethods__ = {}
    for _s in [Pulse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MLEV, name, value)
    __swig_getmethods__ = {}
    for _s in [Pulse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MLEV, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_MLEV(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_MLEV
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.MLEV___assign__(self, *args)
    def WF(self): return _pygamma.MLEV_WF(self)
    def WF_C180(self): return _pygamma.MLEV_WF_C180(self)
    def PCmp(self, *args): return _pygamma.MLEV_PCmp(self, *args)
    def PCmp_C180(self, *args): return _pygamma.MLEV_PCmp_C180(self, *args)
    def CycMLEV4(self, *args): return _pygamma.MLEV_CycMLEV4(self, *args)
    def CycMLEV8(self, *args): return _pygamma.MLEV_CycMLEV8(self, *args)
    def CycMLEV16(self, *args): return _pygamma.MLEV_CycMLEV16(self, *args)
    def read(self, *args): return _pygamma.MLEV_read(self, *args)
    def ask_read(self, *args): return _pygamma.MLEV_ask_read(self, *args)
MLEV_swigregister = _pygamma.MLEV_swigregister
MLEV_swigregister(MLEV)


def CYC_MLEV4(phi=0):
  return _pygamma.CYC_MLEV4(phi)
CYC_MLEV4 = _pygamma.CYC_MLEV4

def CYC_MLEV8(phi=0):
  return _pygamma.CYC_MLEV8(phi)
CYC_MLEV8 = _pygamma.CYC_MLEV8

def CYC_MLEV16(phi=0):
  return _pygamma.CYC_MLEV16(phi)
CYC_MLEV16 = _pygamma.CYC_MLEV16
class PulTrain(PulComposite):
    __swig_setmethods__ = {}
    for _s in [PulComposite]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulTrain, name, value)
    __swig_getmethods__ = {}
    for _s in [PulComposite]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PulTrain, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_PulTrain(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_PulTrain
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.PulTrain___assign__(self, *args)
    def GetU(self, *args): return _pygamma.PulTrain_GetU(self, *args)
    def FID(self, *args): return _pygamma.PulTrain_FID(self, *args)
    def FIDR(self, *args): return _pygamma.PulTrain_FIDR(self, *args)
PulTrain_swigregister = _pygamma.PulTrain_swigregister
PulTrain_swigregister(PulTrain)

class PulSupCycle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulSupCycle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PulSupCycle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_PulSupCycle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_PulSupCycle
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.PulSupCycle___assign__(self, *args)
    def steps(self): return _pygamma.PulSupCycle_steps(self)
    def name(self): return _pygamma.PulSupCycle_name(self)
    def values(self): return _pygamma.PulSupCycle_values(self)
    def value(self, *args): return _pygamma.PulSupCycle_value(self, *args)
    def phase(self, *args): return _pygamma.PulSupCycle_phase(self, *args)
PulSupCycle_swigregister = _pygamma.PulSupCycle_swigregister
PulSupCycle_swigregister(PulSupCycle)


def WF_CHIRP95(*args):
  return _pygamma.WF_CHIRP95(*args)
WF_CHIRP95 = _pygamma.WF_CHIRP95

def CP_CHIRP95(*args):
  return _pygamma.CP_CHIRP95(*args)
CP_CHIRP95 = _pygamma.CP_CHIRP95

def CYC_CHIRP95():
  return _pygamma.CYC_CHIRP95()
CYC_CHIRP95 = _pygamma.CYC_CHIRP95
class GARP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GARP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GARP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_GARP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_GARP
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.GARP___assign__(self, *args)
    def channel(self): return _pygamma.GARP_channel(self)
    def strength(self, *args): return _pygamma.GARP_strength(self, *args)
    def phase(self): return _pygamma.GARP_phase(self)
    def offset(self): return _pygamma.GARP_offset(self)
    def WF(self): return _pygamma.GARP_WF(self)
    def WF_GARP(self): return _pygamma.GARP_WF_GARP(self)
    def PCmpGARP(self, *args): return _pygamma.GARP_PCmpGARP(self, *args)
    def PCmp(self, *args): return _pygamma.GARP_PCmp(self, *args)
    def CycGARP1(self, *args): return _pygamma.GARP_CycGARP1(self, *args)
    def read(self, *args): return _pygamma.GARP_read(self, *args)
    def ask_read(self, *args): return _pygamma.GARP_ask_read(self, *args)
GARP_swigregister = _pygamma.GARP_swigregister
GARP_swigregister(GARP)

class WALTZ(Pulse):
    __swig_setmethods__ = {}
    for _s in [Pulse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WALTZ, name, value)
    __swig_getmethods__ = {}
    for _s in [Pulse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WALTZ, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_WALTZ(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_WALTZ
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.WALTZ___assign__(self, *args)
    def WF(self, even=0): return _pygamma.WALTZ_WF(self, even)
    def WF_WALTZR(self, even=0): return _pygamma.WALTZ_WF_WALTZR(self, even)
    def WF_WALTZK(self, even=0): return _pygamma.WALTZ_WF_WALTZK(self, even)
    def WF_WALTZQ(self, even=0): return _pygamma.WALTZ_WF_WALTZQ(self, even)
    def PCmp(self, *args): return _pygamma.WALTZ_PCmp(self, *args)
    def PCmpWALTZR(self, *args): return _pygamma.WALTZ_PCmpWALTZR(self, *args)
    def PCmpWALTZK(self, *args): return _pygamma.WALTZ_PCmpWALTZK(self, *args)
    def PCmpWALTZQ(self, *args): return _pygamma.WALTZ_PCmpWALTZQ(self, *args)
    def CycWALTZ4(self, *args): return _pygamma.WALTZ_CycWALTZ4(self, *args)
    def CycWALTZ8(self, *args): return _pygamma.WALTZ_CycWALTZ8(self, *args)
    def CycWALTZ16(self, *args): return _pygamma.WALTZ_CycWALTZ16(self, *args)
    def read(self, *args): return _pygamma.WALTZ_read(self, *args)
    def ask_read(self, *args): return _pygamma.WALTZ_ask_read(self, *args)
WALTZ_swigregister = _pygamma.WALTZ_swigregister
WALTZ_swigregister(WALTZ)


def CYC_WALTZ4(phi=0):
  return _pygamma.CYC_WALTZ4(phi)
CYC_WALTZ4 = _pygamma.CYC_WALTZ4

def CYC_WALTZ8(phi=0):
  return _pygamma.CYC_WALTZ8(phi)
CYC_WALTZ8 = _pygamma.CYC_WALTZ8
class PulTrainSCyc(PulSupCycle):
    __swig_setmethods__ = {}
    for _s in [PulSupCycle]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulTrainSCyc, name, value)
    __swig_getmethods__ = {}
    for _s in [PulSupCycle]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PulTrainSCyc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_PulTrainSCyc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_PulTrainSCyc
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.PulTrainSCyc___assign__(self, *args)
    def GetU(self, *args): return _pygamma.PulTrainSCyc_GetU(self, *args)
    def GetUsum(self, *args): return _pygamma.PulTrainSCyc_GetUsum(self, *args)
    def GetUmult(self, *args): return _pygamma.PulTrainSCyc_GetUmult(self, *args)
    def SetGs(self, *args): return _pygamma.PulTrainSCyc_SetGs(self, *args)
    def GetG(self, *args): return _pygamma.PulTrainSCyc_GetG(self, *args)
    def length(self): return _pygamma.PulTrainSCyc_length(self)
    def steps(self, *args): return _pygamma.PulTrainSCyc_steps(self, *args)
    def fullSCYCs(self, *args): return _pygamma.PulTrainSCyc_fullSCYCs(self, *args)
    def fullsteps(self, *args): return _pygamma.PulTrainSCyc_fullsteps(self, *args)
PulTrainSCyc_swigregister = _pygamma.PulTrainSCyc_swigregister
PulTrainSCyc_swigregister(PulTrainSCyc)

class DANTE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DANTE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DANTE, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_DANTE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_DANTE
    __del__ = lambda self : None;
    def __assign__(self, *args): return _pygamma.DANTE___assign__(self, *args)
    def steps(self): return _pygamma.DANTE_steps(self)
    def channel(self): return _pygamma.DANTE_channel(self)
    def dlength(self): return _pygamma.DANTE_dlength(self)
    def strength(self): return _pygamma.DANTE_strength(self)
    def plength(self): return _pygamma.DANTE_plength(self)
    def angle(self): return _pygamma.DANTE_angle(self)
    def phase(self): return _pygamma.DANTE_phase(self)
    def offset(self): return _pygamma.DANTE_offset(self)
    def length(self): return _pygamma.DANTE_length(self)
    def WF(self): return _pygamma.DANTE_WF(self)
    def CP(self, *args): return _pygamma.DANTE_CP(self, *args)
    def PT(self, *args): return _pygamma.DANTE_PT(self, *args)
    def read(self, *args): return _pygamma.DANTE_read(self, *args)
    def ask_read(self, *args): return _pygamma.DANTE_ask_read(self, *args)
DANTE_swigregister = _pygamma.DANTE_swigregister
DANTE_swigregister(DANTE)


def WF_DANTE(*args):
  return _pygamma.WF_DANTE(*args)
WF_DANTE = _pygamma.WF_DANTE

def CP_DANTE(*args):
  return _pygamma.CP_DANTE(*args)
CP_DANTE = _pygamma.CP_DANTE

def PT_DANTE(*args):
  return _pygamma.PT_DANTE(*args)
PT_DANTE = _pygamma.PT_DANTE

def UDANTE(*args):
  return _pygamma.UDANTE(*args)
UDANTE = _pygamma.UDANTE

def ask_DANTE(*args):
  return _pygamma.ask_DANTE(*args)
ask_DANTE = _pygamma.ask_DANTE

def set_DANTE(*args):
  return _pygamma.set_DANTE(*args)
set_DANTE = _pygamma.set_DANTE

def pulseshift(*args):
  return _pygamma.pulseshift(*args)
pulseshift = _pygamma.pulseshift

def acquire(*args):
  return _pygamma.acquire(*args)
acquire = _pygamma.acquire

def FID(*args):
  return _pygamma.FID(*args)
FID = _pygamma.FID

def acquire1DT(*args):
  return _pygamma.acquire1DT(*args)
acquire1DT = _pygamma.acquire1DT

def detect(*args):
  return _pygamma.detect(*args)
detect = _pygamma.detect

def Hzgrad(*args):
  return _pygamma.Hzgrad(*args)
Hzgrad = _pygamma.Hzgrad

def Props(*args):
  return _pygamma.Props(*args)
Props = _pygamma.Props

def evolve(*args):
  return _pygamma.evolve(*args)
evolve = _pygamma.evolve

def Ixpulse_Us(*args):
  return _pygamma.Ixpulse_Us(*args)
Ixpulse_Us = _pygamma.Ixpulse_Us

def Iypulse_Us(*args):
  return _pygamma.Iypulse_Us(*args)
Iypulse_Us = _pygamma.Iypulse_Us

def Sxpuls_U(*args):
  return _pygamma.Sxpuls_U(*args)
Sxpuls_U = _pygamma.Sxpuls_U

def Sypuls_U(*args):
  return _pygamma.Sypuls_U(*args)
Sypuls_U = _pygamma.Sypuls_U

def Gxpulse_U(*args):
  return _pygamma.Gxpulse_U(*args)
Gxpulse_U = _pygamma.Gxpulse_U

def Gypulse_U(*args):
  return _pygamma.Gypulse_U(*args)
Gypulse_U = _pygamma.Gypulse_U

def SincPulseXUs(*args):
  return _pygamma.SincPulseXUs(*args)
SincPulseXUs = _pygamma.SincPulseXUs

def SincPulseYUs(*args):
  return _pygamma.SincPulseYUs(*args)
SincPulseYUs = _pygamma.SincPulseYUs
class sys_gradz(spin_system):
    __swig_setmethods__ = {}
    for _s in [spin_system]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sys_gradz, name, value)
    __swig_getmethods__ = {}
    for _s in [spin_system]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sys_gradz, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_sys_gradz(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_sys_gradz
    __del__ = lambda self : None;
    def NSS(self, *args): return _pygamma.sys_gradz_NSS(self, *args)
    def BoGrad(self, *args): return _pygamma.sys_gradz_BoGrad(self, *args)
    def GradVal(self, *args): return _pygamma.sys_gradz_GradVal(self, *args)
    def SysLen(self, *args): return _pygamma.sys_gradz_SysLen(self, *args)
    def SysDist(self, *args): return _pygamma.sys_gradz_SysDist(self, *args)
    def SubSys(self, *args): return _pygamma.sys_gradz_SubSys(self, *args)
    def SubSysShift(self, *args): return _pygamma.sys_gradz_SubSysShift(self, *args)
    def SubSysPPM(self, *args): return _pygamma.sys_gradz_SubSysPPM(self, *args)
    def PSetAdd(self, *args): return _pygamma.sys_gradz_PSetAdd(self, *args)
    def setSubSys(self, *args): return _pygamma.sys_gradz_setSubSys(self, *args)
    def setBoGrad(self, *args): return _pygamma.sys_gradz_setBoGrad(self, *args)
    def setLength(self, *args): return _pygamma.sys_gradz_setLength(self, *args)
    def __assign__(self, *args): return _pygamma.sys_gradz___assign__(self, *args)
    def write(self, *args): return _pygamma.sys_gradz_write(self, *args)
    def read(self, *args): return _pygamma.sys_gradz_read(self, *args)
    def ask_read(self, *args): return _pygamma.sys_gradz_ask_read(self, *args)
sys_gradz_swigregister = _pygamma.sys_gradz_swigregister
sys_gradz_swigregister(sys_gradz)


def RCCrf(*args):
  return _pygamma.RCCrf(*args)
RCCrf = _pygamma.RCCrf

def RCCds(*args):
  return _pygamma.RCCds(*args)
RCCds = _pygamma.RCCds

def RCCrfds(*args):
  return _pygamma.RCCrfds(*args)
RCCrfds = _pygamma.RCCrfds

def R1_CC(*args):
  return _pygamma.R1_CC(*args)
R1_CC = _pygamma.R1_CC

def R1_CC_max(*args):
  return _pygamma.R1_CC_max(*args)
R1_CC_max = _pygamma.R1_CC_max

def T1_CC(*args):
  return _pygamma.T1_CC(*args)
T1_CC = _pygamma.T1_CC

def T1_CC_max(*args):
  return _pygamma.T1_CC_max(*args)
T1_CC_max = _pygamma.T1_CC_max

def R2_CC(*args):
  return _pygamma.R2_CC(*args)
R2_CC = _pygamma.R2_CC

def R2_CC_max(*args):
  return _pygamma.R2_CC_max(*args)
R2_CC_max = _pygamma.R2_CC_max

def T2_CC(*args):
  return _pygamma.T2_CC(*args)
T2_CC = _pygamma.T2_CC

def T2_CC_max(*args):
  return _pygamma.T2_CC_max(*args)
T2_CC_max = _pygamma.T2_CC_max

def LWhh_CC(*args):
  return _pygamma.LWhh_CC(*args)
LWhh_CC = _pygamma.LWhh_CC

def LWhh_CC_max(*args):
  return _pygamma.LWhh_CC_max(*args)
LWhh_CC_max = _pygamma.LWhh_CC_max

def xiCSA(*args):
  return _pygamma.xiCSA(*args)
xiCSA = _pygamma.xiCSA

def CSA(*args):
  return _pygamma.CSA(*args)
CSA = _pygamma.CSA

def RDCX(*args):
  return _pygamma.RDCX(*args)
RDCX = _pygamma.RDCX

def RDC(*args):
  return _pygamma.RDC(*args)
RDC = _pygamma.RDC

def RCD(*args):
  return _pygamma.RCD(*args)
RCD = _pygamma.RCD

def RCDrf(*args):
  return _pygamma.RCDrf(*args)
RCDrf = _pygamma.RCDrf

def RDD_Jgen(*args):
  return _pygamma.RDD_Jgen(*args)
RDD_Jgen = _pygamma.RDD_Jgen

def RDDrf(*args):
  return _pygamma.RDDrf(*args)
RDDrf = _pygamma.RDDrf

def RDDds(*args):
  return _pygamma.RDDds(*args)
RDDds = _pygamma.RDDds

def RDDrfds(*args):
  return _pygamma.RDDrfds(*args)
RDDrfds = _pygamma.RDDrfds

def xiD(*args):
  return _pygamma.xiD(*args)
xiD = _pygamma.xiD

def DCC(*args):
  return _pygamma.DCC(*args)
DCC = _pygamma.DCC

def R1_DD(*args):
  return _pygamma.R1_DD(*args)
R1_DD = _pygamma.R1_DD

def R1_DD_max(*args):
  return _pygamma.R1_DD_max(*args)
R1_DD_max = _pygamma.R1_DD_max

def T1_DD(*args):
  return _pygamma.T1_DD(*args)
T1_DD = _pygamma.T1_DD

def T1_DD_max(*args):
  return _pygamma.T1_DD_max(*args)
T1_DD_max = _pygamma.T1_DD_max

def R2_DD(*args):
  return _pygamma.R2_DD(*args)
R2_DD = _pygamma.R2_DD

def R2_DD_max(*args):
  return _pygamma.R2_DD_max(*args)
R2_DD_max = _pygamma.R2_DD_max

def T2_DD(*args):
  return _pygamma.T2_DD(*args)
T2_DD = _pygamma.T2_DD

def T2_DD_max(*args):
  return _pygamma.T2_DD_max(*args)
T2_DD_max = _pygamma.T2_DD_max

def LWhh_DD(*args):
  return _pygamma.LWhh_DD(*args)
LWhh_DD = _pygamma.LWhh_DD

def LWhh_DD_max(*args):
  return _pygamma.LWhh_DD_max(*args)
LWhh_DD_max = _pygamma.LWhh_DD_max

def NOE(*args):
  return _pygamma.NOE(*args)
NOE = _pygamma.NOE

def R2_DDMQT(*args):
  return _pygamma.R2_DDMQT(*args)
R2_DDMQT = _pygamma.R2_DDMQT

def Rex(*args):
  return _pygamma.Rex(*args)
Rex = _pygamma.Rex

def J_error(*args):
  return _pygamma.J_error(*args)
J_error = _pygamma.J_error

def J_fatality(*args):
  return _pygamma.J_fatality(*args)
J_fatality = _pygamma.J_fatality

def J_gen(*args):
  return _pygamma.J_gen(*args)
J_gen = _pygamma.J_gen

def J_gen_shft(*args):
  return _pygamma.J_gen_shft(*args)
J_gen_shft = _pygamma.J_gen_shft

def tausD(*args):
  return _pygamma.tausD(*args)
tausD = _pygamma.tausD

def chiD(*args):
  return _pygamma.chiD(*args)
chiD = _pygamma.chiD

def taust(*args):
  return _pygamma.taust(*args)
taust = _pygamma.taust

def chit(*args):
  return _pygamma.chit(*args)
chit = _pygamma.chit

def Jcoeffs(*args):
  return _pygamma.Jcoeffs(*args)
Jcoeffs = _pygamma.Jcoeffs

def J_red_shft(*args):
  return _pygamma.J_red_shft(*args)
J_red_shft = _pygamma.J_red_shft

def J_reduced(*args):
  return _pygamma.J_reduced(*args)
J_reduced = _pygamma.J_reduced

def Q_red_shft(*args):
  return _pygamma.Q_red_shft(*args)
Q_red_shft = _pygamma.Q_red_shft

def Q_reduced(*args):
  return _pygamma.Q_reduced(*args)
Q_reduced = _pygamma.Q_reduced

def J_LZ_iso(*args):
  return _pygamma.J_LZ_iso(*args)
J_LZ_iso = _pygamma.J_LZ_iso

def J_LZ_aniso(*args):
  return _pygamma.J_LZ_aniso(*args)
J_LZ_aniso = _pygamma.J_LZ_aniso

def RQCX(*args):
  return _pygamma.RQCX(*args)
RQCX = _pygamma.RQCX

def RCQrf(*args):
  return _pygamma.RCQrf(*args)
RCQrf = _pygamma.RCQrf

def RQQrf(*args):
  return _pygamma.RQQrf(*args)
RQQrf = _pygamma.RQQrf

def RQQds(*args):
  return _pygamma.RQQds(*args)
RQQds = _pygamma.RQQds

def RQQrfds(*args):
  return _pygamma.RQQrfds(*args)
RQQrfds = _pygamma.RQQrfds

def R1_QQ(*args):
  return _pygamma.R1_QQ(*args)
R1_QQ = _pygamma.R1_QQ

def R1_QQ_max(*args):
  return _pygamma.R1_QQ_max(*args)
R1_QQ_max = _pygamma.R1_QQ_max

def T1_QQ(*args):
  return _pygamma.T1_QQ(*args)
T1_QQ = _pygamma.T1_QQ

def T1_QQ_max(*args):
  return _pygamma.T1_QQ_max(*args)
T1_QQ_max = _pygamma.T1_QQ_max

def R2_QQ(*args):
  return _pygamma.R2_QQ(*args)
R2_QQ = _pygamma.R2_QQ

def R2_QQ_max(*args):
  return _pygamma.R2_QQ_max(*args)
R2_QQ_max = _pygamma.R2_QQ_max

def T2_QQ(*args):
  return _pygamma.T2_QQ(*args)
T2_QQ = _pygamma.T2_QQ

def T2_QQ_max(*args):
  return _pygamma.T2_QQ_max(*args)
T2_QQ_max = _pygamma.T2_QQ_max

def LWhh_QQ(*args):
  return _pygamma.LWhh_QQ(*args)
LWhh_QQ = _pygamma.LWhh_QQ

def LWhh_QQ_max(*args):
  return _pygamma.LWhh_QQ_max(*args)
LWhh_QQ_max = _pygamma.LWhh_QQ_max

def xiQ(*args):
  return _pygamma.xiQ(*args)
xiQ = _pygamma.xiQ

def RRRx(*args):
  return _pygamma.RRRx(*args)
RRRx = _pygamma.RRRx

def RRR(*args):
  return _pygamma.RRR(*args)
RRR = _pygamma.RRR

def Rij_rdm(*args):
  return _pygamma.Rij_rdm(*args)
Rij_rdm = _pygamma.Rij_rdm

def Rmumu_rdm(*args):
  return _pygamma.Rmumu_rdm(*args)
Rmumu_rdm = _pygamma.Rmumu_rdm

def R1_RR(*args):
  return _pygamma.R1_RR(*args)
R1_RR = _pygamma.R1_RR

def R1_RR_max(*args):
  return _pygamma.R1_RR_max(*args)
R1_RR_max = _pygamma.R1_RR_max

def T1_RR(*args):
  return _pygamma.T1_RR(*args)
T1_RR = _pygamma.T1_RR

def T1_RR_max(*args):
  return _pygamma.T1_RR_max(*args)
T1_RR_max = _pygamma.T1_RR_max

def R2_RR(*args):
  return _pygamma.R2_RR(*args)
R2_RR = _pygamma.R2_RR

def R2_RR_max(*args):
  return _pygamma.R2_RR_max(*args)
R2_RR_max = _pygamma.R2_RR_max

def T2_RR(*args):
  return _pygamma.T2_RR(*args)
T2_RR = _pygamma.T2_RR

def T2_RR_max(*args):
  return _pygamma.T2_RR_max(*args)
T2_RR_max = _pygamma.T2_RR_max

def LWhh_RR(*args):
  return _pygamma.LWhh_RR(*args)
LWhh_RR = _pygamma.LWhh_RR

def LWhh_RR_max(*args):
  return _pygamma.LWhh_RR_max(*args)
LWhh_RR_max = _pygamma.LWhh_RR_max

def xiRDM(*args):
  return _pygamma.xiRDM(*args)
xiRDM = _pygamma.xiRDM

def RlxNMRerror(*args):
  return _pygamma.RlxNMRerror(*args)
RlxNMRerror = _pygamma.RlxNMRerror

def RlxNMRfatal(*args):
  return _pygamma.RlxNMRfatal(*args)
RlxNMRfatal = _pygamma.RlxNMRfatal

def R_4(*args):
  return _pygamma.R_4(*args)
R_4 = _pygamma.R_4

def R_3(*args):
  return _pygamma.R_3(*args)
R_3 = _pygamma.R_3

def R_2(*args):
  return _pygamma.R_2(*args)
R_2 = _pygamma.R_2

def Rodiag_2(*args):
  return _pygamma.Rodiag_2(*args)
Rodiag_2 = _pygamma.Rodiag_2

def Rdiag_2(*args):
  return _pygamma.Rdiag_2(*args)
Rdiag_2 = _pygamma.Rdiag_2

def R_0(*args):
  return _pygamma.R_0(*args)
R_0 = _pygamma.R_0

def R_4s(*args):
  return _pygamma.R_4s(*args)
R_4s = _pygamma.R_4s

def R_3s(*args):
  return _pygamma.R_3s(*args)
R_3s = _pygamma.R_3s

def R_2s(*args):
  return _pygamma.R_2s(*args)
R_2s = _pygamma.R_2s

def R_AC_0(*args):
  return _pygamma.R_AC_0(*args)
R_AC_0 = _pygamma.R_AC_0

def R_CC_0(*args):
  return _pygamma.R_CC_0(*args)
R_CC_0 = _pygamma.R_CC_0

def R_CC_0_trans(*args):
  return _pygamma.R_CC_0_trans(*args)
R_CC_0_trans = _pygamma.R_CC_0_trans

def R_AC_1(*args):
  return _pygamma.R_AC_1(*args)
R_AC_1 = _pygamma.R_AC_1

def R_CC_1(*args):
  return _pygamma.R_CC_1(*args)
R_CC_1 = _pygamma.R_CC_1

def Rmumu(*args):
  return _pygamma.Rmumu(*args)
Rmumu = _pygamma.Rmumu

def Rmu1mu2(*args):
  return _pygamma.Rmu1mu2(*args)
Rmu1mu2 = _pygamma.Rmu1mu2

def Rijkl(*args):
  return _pygamma.Rijkl(*args)
Rijkl = _pygamma.Rijkl

def Rij(*args):
  return _pygamma.Rij(*args)
Rij = _pygamma.Rij

def Rijk(*args):
  return _pygamma.Rijk(*args)
Rijk = _pygamma.Rijk

def Rkij(*args):
  return _pygamma.Rkij(*args)
Rkij = _pygamma.Rkij

def Rmumuds(*args):
  return _pygamma.Rmumuds(*args)
Rmumuds = _pygamma.Rmumuds

def Rijklds(*args):
  return _pygamma.Rijklds(*args)
Rijklds = _pygamma.Rijklds

def Rijds(*args):
  return _pygamma.Rijds(*args)
Rijds = _pygamma.Rijds

def Rijkds(*args):
  return _pygamma.Rijkds(*args)
Rijkds = _pygamma.Rijkds

def Rkijds(*args):
  return _pygamma.Rkijds(*args)
Rkijds = _pygamma.Rkijds

def LOp_sigma(*args):
  return _pygamma.LOp_sigma(*args)
LOp_sigma = _pygamma.LOp_sigma

def Rrf_4(*args):
  return _pygamma.Rrf_4(*args)
Rrf_4 = _pygamma.Rrf_4

def Rrf_3(*args):
  return _pygamma.Rrf_3(*args)
Rrf_3 = _pygamma.Rrf_3

def Rrf_2(*args):
  return _pygamma.Rrf_2(*args)
Rrf_2 = _pygamma.Rrf_2

def Rrf_0(*args):
  return _pygamma.Rrf_0(*args)
Rrf_0 = _pygamma.Rrf_0

def Rrf_4s(*args):
  return _pygamma.Rrf_4s(*args)
Rrf_4s = _pygamma.Rrf_4s

def Rrf_3s(*args):
  return _pygamma.Rrf_3s(*args)
Rrf_3s = _pygamma.Rrf_3s

def Rrf_2s(*args):
  return _pygamma.Rrf_2s(*args)
Rrf_2s = _pygamma.Rrf_2s

def Rrfmumu(*args):
  return _pygamma.Rrfmumu(*args)
Rrfmumu = _pygamma.Rrfmumu

def Rrfijkl(*args):
  return _pygamma.Rrfijkl(*args)
Rrfijkl = _pygamma.Rrfijkl

def Rrfij(*args):
  return _pygamma.Rrfij(*args)
Rrfij = _pygamma.Rrfij

def Rrfijk(*args):
  return _pygamma.Rrfijk(*args)
Rrfijk = _pygamma.Rrfijk

def Rrfkij(*args):
  return _pygamma.Rrfkij(*args)
Rrfkij = _pygamma.Rrfkij

def Rrfijklds(*args):
  return _pygamma.Rrfijklds(*args)
Rrfijklds = _pygamma.Rrfijklds

def Rrfijds(*args):
  return _pygamma.Rrfijds(*args)
Rrfijds = _pygamma.Rrfijds

def Rrfijkds(*args):
  return _pygamma.Rrfijkds(*args)
Rrfijkds = _pygamma.Rrfijkds

def Rrfkijds(*args):
  return _pygamma.Rrfkijds(*args)
Rrfkijds = _pygamma.Rrfkijds

def sigma_ss(*args):
  return _pygamma.sigma_ss(*args)
sigma_ss = _pygamma.sigma_ss

def sigma_ss_it(*args):
  return _pygamma.sigma_ss_it(*args)
sigma_ss_it = _pygamma.sigma_ss_it

def REXijkl(*args):
  return _pygamma.REXijkl(*args)
REXijkl = _pygamma.REXijkl

def REXijk(*args):
  return _pygamma.REXijk(*args)
REXijk = _pygamma.REXijk

def REXkij(*args):
  return _pygamma.REXkij(*args)
REXkij = _pygamma.REXkij

def REXij(*args):
  return _pygamma.REXij(*args)
REXij = _pygamma.REXij

def REXmumu(*args):
  return _pygamma.REXmumu(*args)
REXmumu = _pygamma.REXmumu

def REXrfijkl(*args):
  return _pygamma.REXrfijkl(*args)
REXrfijkl = _pygamma.REXrfijkl

def REXrfijk(*args):
  return _pygamma.REXrfijk(*args)
REXrfijk = _pygamma.REXrfijk

def REXrfkij(*args):
  return _pygamma.REXrfkij(*args)
REXrfkij = _pygamma.REXrfkij

def REXrfij(*args):
  return _pygamma.REXrfij(*args)
REXrfij = _pygamma.REXrfij

def REXrfmumu(*args):
  return _pygamma.REXrfmumu(*args)
REXrfmumu = _pygamma.REXrfmumu

def REX_4(*args):
  return _pygamma.REX_4(*args)
REX_4 = _pygamma.REX_4

def REX_3(*args):
  return _pygamma.REX_3(*args)
REX_3 = _pygamma.REX_3

def REXrf_4(*args):
  return _pygamma.REXrf_4(*args)
REXrf_4 = _pygamma.REXrf_4

def REXrf_3(*args):
  return _pygamma.REXrf_3(*args)
REXrf_3 = _pygamma.REXrf_3
class WBRExch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WBRExch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WBRExch, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_WBRExch(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygamma.delete_WBRExch
    __del__ = lambda self : None;
    def Level(self, *args): return _pygamma.WBRExch_Level(self, *args)
    def Type(self, *args): return _pygamma.WBRExch_Type(self, *args)
    def Dip(self, i=1): return _pygamma.WBRExch_Dip(self, i)
    def DipDFS(self, i=1): return _pygamma.WBRExch_DipDFS(self, i)
    def DipCSA(self, i=1): return _pygamma.WBRExch_DipCSA(self, i)
    def DipCSADFS(self, i=1): return _pygamma.WBRExch_DipCSADFS(self, i)
    def DipQuad(self, i=1): return _pygamma.WBRExch_DipQuad(self, i)
    def DipQuadDFS(self, i=1): return _pygamma.WBRExch_DipQuadDFS(self, i)
    def CSA(self, i=1): return _pygamma.WBRExch_CSA(self, i)
    def CSADFS(self, i=1): return _pygamma.WBRExch_CSADFS(self, i)
    def CSADip(self, i=1): return _pygamma.WBRExch_CSADip(self, i)
    def CSADipDFS(self, i=1): return _pygamma.WBRExch_CSADipDFS(self, i)
    def CSAQuad(self, i=1): return _pygamma.WBRExch_CSAQuad(self, i)
    def CSAQuadDFS(self, i=1): return _pygamma.WBRExch_CSAQuadDFS(self, i)
    def Quad(self, i=1): return _pygamma.WBRExch_Quad(self, i)
    def QuadDFS(self, i=1): return _pygamma.WBRExch_QuadDFS(self, i)
    def QuadDip(self, i=1): return _pygamma.WBRExch_QuadDip(self, i)
    def QuadDipDFSQuad(self, i=1): return _pygamma.WBRExch_QuadDipDFSQuad(self, i)
    def QuadCSA(self, i=1): return _pygamma.WBRExch_QuadCSA(self, i)
    def QuadCSADFS(self, i=1): return _pygamma.WBRExch_QuadCSADFS(self, i)
    def LWhh(self, *args): return _pygamma.WBRExch_LWhh(self, *args)
    def SetZero(self): return _pygamma.WBRExch_SetZero(self)
    def SetLevel(self, *args): return _pygamma.WBRExch_SetLevel(self, *args)
    def SetType(self, *args): return _pygamma.WBRExch_SetType(self, *args)
    def SetDip(self, *args): return _pygamma.WBRExch_SetDip(self, *args)
    def SetSA(self, *args): return _pygamma.WBRExch_SetSA(self, *args)
    def SetQuad(self, *args): return _pygamma.WBRExch_SetQuad(self, *args)
    def SetDCX(self, *args): return _pygamma.WBRExch_SetDCX(self, *args)
    def SetDQX(self, *args): return _pygamma.WBRExch_SetDQX(self, *args)
    def SetQCX(self, *args): return _pygamma.WBRExch_SetQCX(self, *args)
    def __assign__(self, *args): return _pygamma.WBRExch___assign__(self, *args)
    def prepQuad(self, *args): return _pygamma.WBRExch_prepQuad(self, *args)
    def read(self, *args): return _pygamma.WBRExch_read(self, *args)
    def ask_read(self, *args): return _pygamma.WBRExch_ask_read(self, *args)
    def ask(self, *args): return _pygamma.WBRExch_ask(self, *args)
    def REX(self, *args): return _pygamma.WBRExch_REX(self, *args)
    def REXrf(self, *args): return _pygamma.WBRExch_REXrf(self, *args)
WBRExch_swigregister = _pygamma.WBRExch_swigregister
WBRExch_swigregister(WBRExch)


def RDDel(*args):
  return _pygamma.RDDel(*args)
RDDel = _pygamma.RDDel

def RSSel(*args):
  return _pygamma.RSSel(*args)
RSSel = _pygamma.RSSel

def RDSel(*args):
  return _pygamma.RDSel(*args)
RDSel = _pygamma.RDSel

def RSDel(*args):
  return _pygamma.RSDel(*args)
RSDel = _pygamma.RSDel

def RRRel(*args):
  return _pygamma.RRRel(*args)
RRRel = _pygamma.RRRel

def RQQel(*args):
  return _pygamma.RQQel(*args)
RQQel = _pygamma.RQQel

def RQSel(*args):
  return _pygamma.RQSel(*args)
RQSel = _pygamma.RQSel

def RSQel(*args):
  return _pygamma.RSQel(*args)
RSQel = _pygamma.RSQel

def RQDel(*args):
  return _pygamma.RQDel(*args)
RQDel = _pygamma.RQDel

def RDQel(*args):
  return _pygamma.RDQel(*args)
RDQel = _pygamma.RDQel

def Rijkl_el(*args):
  return _pygamma.Rijkl_el(*args)
Rijkl_el = _pygamma.Rijkl_el

def Rij_el(*args):
  return _pygamma.Rij_el(*args)
Rij_el = _pygamma.Rij_el

def Rijk_el(*args):
  return _pygamma.Rijk_el(*args)
Rijk_el = _pygamma.Rijk_el

def Rkij_el(*args):
  return _pygamma.Rkij_el(*args)
Rkij_el = _pygamma.Rkij_el

def Rel_12(*args):
  return _pygamma.Rel_12(*args)
Rel_12 = _pygamma.Rel_12

def Rel_12_condense(*args):
  return _pygamma.Rel_12_condense(*args)
Rel_12_condense = _pygamma.Rel_12_condense

def Spin_labels(*args):
  return _pygamma.Spin_labels(*args)
Spin_labels = _pygamma.Spin_labels

def W_labels(*args):
  return _pygamma.W_labels(*args)
W_labels = _pygamma.W_labels

def Elem_labels(*args):
  return _pygamma.Elem_labels(*args)
Elem_labels = _pygamma.Elem_labels

def Rel_clean(*args):
  return _pygamma.Rel_clean(*args)
Rel_clean = _pygamma.Rel_clean

def Rel(*args):
  return _pygamma.Rel(*args)
Rel = _pygamma.Rel

def sort(*args):
  return _pygamma.sort(*args)
sort = _pygamma.sort
class ExchProc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExchProc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExchProc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["KRate"] = _pygamma.ExchProc_KRate_set
    __swig_getmethods__["KRate"] = _pygamma.ExchProc_KRate_get
    if _newclass:KRate = _swig_property(_pygamma.ExchProc_KRate_get, _pygamma.ExchProc_KRate_set)
    __swig_setmethods__["LHSComps"] = _pygamma.ExchProc_LHSComps_set
    __swig_getmethods__["LHSComps"] = _pygamma.ExchProc_LHSComps_get
    if _newclass:LHSComps = _swig_property(_pygamma.ExchProc_LHSComps_get, _pygamma.ExchProc_LHSComps_set)
    __swig_setmethods__["RHSComps"] = _pygamma.ExchProc_RHSComps_set
    __swig_getmethods__["RHSComps"] = _pygamma.ExchProc_RHSComps_get
    if _newclass:RHSComps = _swig_property(_pygamma.ExchProc_RHSComps_get, _pygamma.ExchProc_RHSComps_set)
    __swig_setmethods__["SpinMaps"] = _pygamma.ExchProc_SpinMaps_set
    __swig_getmethods__["SpinMaps"] = _pygamma.ExchProc_SpinMaps_get
    if _newclass:SpinMaps = _swig_property(_pygamma.ExchProc_SpinMaps_get, _pygamma.ExchProc_SpinMaps_set)
    def XPerror(self, *args): return _pygamma.ExchProc_XPerror(self, *args)
    def XPfatal(self, *args): return _pygamma.ExchProc_XPfatal(self, *args)
    def getExch(self, *args): return _pygamma.ExchProc_getExch(self, *args)
    def parseExch(self, *args): return _pygamma.ExchProc_parseExch(self, *args)
    def getComps(self, *args): return _pygamma.ExchProc_getComps(self, *args)
    def getRate(self, *args): return _pygamma.ExchProc_getRate(self, *args)
    def getMappings(self, *args): return _pygamma.ExchProc_getMappings(self, *args)
    def getXP(self, *args): return _pygamma.ExchProc_getXP(self, *args)
    def setXP(self, *args): return _pygamma.ExchProc_setXP(self, *args)
    def CheckLHS(self, *args): return _pygamma.ExchProc_CheckLHS(self, *args)
    def CheckRHS(self, *args): return _pygamma.ExchProc_CheckRHS(self, *args)
    def __assign__(self, *args): return _pygamma.ExchProc___assign__(self, *args)
    __swig_destroy__ = _pygamma.delete_ExchProc
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _pygamma.new_ExchProc(*args)
        try: self.this.append(this)
        except: self.this = this
    def intra_default(self, *args): return _pygamma.ExchProc_intra_default(self, *args)
    def Kex(self, *args): return _pygamma.ExchProc_Kex(self, *args)
    def LHSComp(self, *args): return _pygamma.ExchProc_LHSComp(self, *args)
    def RHSComp(self, *args): return _pygamma.ExchProc_RHSComp(self, *args)
    def NCompsLHS(self): return _pygamma.ExchProc_NCompsLHS(self)
    def NCompsRHS(self): return _pygamma.ExchProc_NCompsRHS(self)
    def mixes(self, *args): return _pygamma.ExchProc_mixes(self, *args)
    def CompInLHS(self, *args): return _pygamma.ExchProc_CompInLHS(self, *args)
    def CompInRHS(self, *args): return _pygamma.ExchProc_CompInRHS(self, *args)
    def involves(self, *args): return _pygamma.ExchProc_involves(self, *args)
    def NSpinMaps(self): return _pygamma.ExchProc_NSpinMaps(self)
    def SMap(self, *args): return _pygamma.ExchProc_SMap(self, *args)
    def add_pair(self, *args): return _pygamma.ExchProc_add_pair(self, *args)
    def mapped(self, *args): return _pygamma.ExchProc_mapped(self, *args)
    def mapping(self, *args): return _pygamma.ExchProc_mapping(self, *args)
    def read(self, *args): return _pygamma.ExchProc_read(self, *args)
    __swig_getmethods__["Label"] = lambda x: _pygamma.ExchProc_Label
    if _newclass:Label = staticmethod(_pygamma.ExchProc_Label)
    def LHSStr(self): return _pygamma.ExchProc_LHSStr(self)
    def RHSStr(self): return _pygamma.ExchProc_RHSStr(self)
    def SpinMapStrs(self): return _pygamma.ExchProc_SpinMapStrs(self)
    def lsprint(self, *args): return _pygamma.ExchProc_lsprint(self, *args)
ExchProc_swigregister = _pygamma.ExchProc_swigregister
ExchProc_swigregister(ExchProc)

def ExchProc_Label(*args):
  return _pygamma.ExchProc_Label(*args)
ExchProc_Label = _pygamma.ExchProc_Label

class multi_sys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, multi_sys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, multi_sys, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pygamma.new_multi_sys(*args)
        try: self.this.append(this)
        except: self.this = this
    def __assign__(self, *args): return _pygamma.multi_sys___assign__(self, *args)
    __swig_destroy__ = _pygamma.delete_multi_sys
    __del__ = lambda self : None;
    def name(self, *args): return _pygamma.multi_sys_name(self, *args)
    def pop(self, *args): return _pygamma.multi_sys_pop(self, *args)
    def popmin(self): return _pygamma.multi_sys_popmin(self)
    def popmax(self): return _pygamma.multi_sys_popmax(self)
    def NComps(self): return _pygamma.multi_sys_NComps(self)
    def Comp(self, *args): return _pygamma.multi_sys_Comp(self, *args)
    def AddComp(self, *args): return _pygamma.multi_sys_AddComp(self, *args)
    def CheckComp(self, *args): return _pygamma.multi_sys_CheckComp(self, *args)
    def NExProcs(self): return _pygamma.multi_sys_NExProcs(self)
    def ExProc(self, *args): return _pygamma.multi_sys_ExProc(self, *args)
    def Kex(self, *args): return _pygamma.multi_sys_Kex(self, *args)
    def NCompsLHS(self, *args): return _pygamma.multi_sys_NCompsLHS(self, *args)
    def NCompsRHS(self, *args): return _pygamma.multi_sys_NCompsRHS(self, *args)
    def homonuclear(self, *args): return _pygamma.multi_sys_homonuclear(self, *args)
    def heteronuclear(self, *args): return _pygamma.multi_sys_heteronuclear(self, *args)
    def HS(self, *args): return _pygamma.multi_sys_HS(self, *args)
    def LS(self, *args): return _pygamma.multi_sys_LS(self, *args)
    def HSs(self): return _pygamma.multi_sys_HSs(self)
    def LSs(self): return _pygamma.multi_sys_LSs(self)
    def symbol(self, *args): return _pygamma.multi_sys_symbol(self, *args)
    def Omega(self, *args): return _pygamma.multi_sys_Omega(self, *args)
    def write(self, *args): return _pygamma.multi_sys_write(self, *args)
    def read(self, *args): return _pygamma.multi_sys_read(self, *args)
    def ask_read(self, *args): return _pygamma.multi_sys_ask_read(self, *args)
    def SpinMapStrs(self, *args): return _pygamma.multi_sys_SpinMapStrs(self, *args)
    def LHSStrs(self): return _pygamma.multi_sys_LHSStrs(self)
    def RHSStrs(self): return _pygamma.multi_sys_RHSStrs(self)
    def EXPStrs(self): return _pygamma.multi_sys_EXPStrs(self)
multi_sys_swigregister = _pygamma.multi_sys_swigregister
multi_sys_swigregister(multi_sys)


def multize(*args):
  return _pygamma.multize(*args)
multize = _pygamma.multize

def D_basis(*args):
  return _pygamma.D_basis(*args)
D_basis = _pygamma.D_basis

def qStateLS(*args):
  return _pygamma.qStateLS(*args)
qStateLS = _pygamma.qStateLS

def LS_qState_bra(*args):
  return _pygamma.LS_qState_bra(*args)
LS_qState_bra = _pygamma.LS_qState_bra

def LS_qState_ket(*args):
  return _pygamma.LS_qState_ket(*args)
LS_qState_ket = _pygamma.LS_qState_ket

def Fx(*args):
  return _pygamma.Fx(*args)
Fx = _pygamma.Fx

def Fy(*args):
  return _pygamma.Fy(*args)
Fy = _pygamma.Fy

def Fz(*args):
  return _pygamma.Fz(*args)
Fz = _pygamma.Fz

def Fe(*args):
  return _pygamma.Fe(*args)
Fe = _pygamma.Fe

def Fm(*args):
  return _pygamma.Fm(*args)
Fm = _pygamma.Fm

def Fp(*args):
  return _pygamma.Fp(*args)
Fp = _pygamma.Fp

def Rz(*args):
  return _pygamma.Rz(*args)
Rz = _pygamma.Rz

def Ho(*args):
  return _pygamma.Ho(*args)
Ho = _pygamma.Ho

def Hcs(*args):
  return _pygamma.Hcs(*args)
Hcs = _pygamma.Hcs

def HJ(*args):
  return _pygamma.HJ(*args)
HJ = _pygamma.HJ

def Hcs_lab(*args):
  return _pygamma.Hcs_lab(*args)
Hcs_lab = _pygamma.Hcs_lab

def Iypuls(*args):
  return _pygamma.Iypuls(*args)
Iypuls = _pygamma.Iypuls

def Ixpuls_U(*args):
  return _pygamma.Ixpuls_U(*args)
Ixpuls_U = _pygamma.Ixpuls_U

def Iypuls_U(*args):
  return _pygamma.Iypuls_U(*args)
Iypuls_U = _pygamma.Iypuls_U

def Ixypuls_U(*args):
  return _pygamma.Ixypuls_U(*args)
Ixypuls_U = _pygamma.Ixypuls_U

def sigma_eq(*args):
  return _pygamma.sigma_eq(*args)
sigma_eq = _pygamma.sigma_eq

def Hsuper(*args):
  return _pygamma.Hsuper(*args)
Hsuper = _pygamma.Hsuper

def Lo(*args):
  return _pygamma.Lo(*args)
Lo = _pygamma.Lo

def U_LS(*args):
  return _pygamma.U_LS(*args)
U_LS = _pygamma.U_LS

def Uinv_LS(*args):
  return _pygamma.Uinv_LS(*args)
Uinv_LS = _pygamma.Uinv_LS

def Op_Ebase(*args):
  return _pygamma.Op_Ebase(*args)
Op_Ebase = _pygamma.Op_Ebase

def RQQ(*args):
  return _pygamma.RQQ(*args)
RQQ = _pygamma.RQQ

def RCC(*args):
  return _pygamma.RCC(*args)
RCC = _pygamma.RCC

def RDD(*args):
  return _pygamma.RDD(*args)
RDD = _pygamma.RDD

def RCQ(*args):
  return _pygamma.RCQ(*args)
RCQ = _pygamma.RCQ

def RQC(*args):
  return _pygamma.RQC(*args)
RQC = _pygamma.RQC

def Xm(*args):
  return _pygamma.Xm(*args)
Xm = _pygamma.Xm

def Xnm(*args):
  return _pygamma.Xnm(*args)
Xnm = _pygamma.Xnm

def Xnmp(*args):
  return _pygamma.Xnmp(*args)
Xnmp = _pygamma.Xnmp

def Xnmpdblk(*args):
  return _pygamma.Xnmpdblk(*args)
Xnmpdblk = _pygamma.Xnmpdblk

def Xnmpblk(*args):
  return _pygamma.Xnmpblk(*args)
Xnmpblk = _pygamma.Xnmpblk

def XXnm(*args):
  return _pygamma.XXnm(*args)
XXnm = _pygamma.XXnm
class SpinMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpinMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpinMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sub1"] = _pygamma.SpinMap_sub1_set
    __swig_getmethods__["sub1"] = _pygamma.SpinMap_sub1_get
    if _newclass:sub1 = _swig_property(_pygamma.SpinMap_sub1_get, _pygamma.SpinMap_sub1_set)
    __swig_setmethods__["sp1"] = _pygamma.SpinMap_sp1_set
    __swig_getmethods__["sp1"] = _pygamma.SpinMap_sp1_get
    if _newclass:sp1 = _swig_property(_pygamma.SpinMap_sp1_get, _pygamma.SpinMap_sp1_set)
    __swig_setmethods__["sub2"] = _pygamma.SpinMap_sub2_set
    __swig_getmethods__["sub2"] = _pygamma.SpinMap_sub2_get
    if _newclass:sub2 = _swig_property(_pygamma.SpinMap_sub2_get, _pygamma.SpinMap_sub2_set)
    __swig_setmethods__["sp2"] = _pygamma.SpinMap_sp2_set
    __swig_getmethods__["sp2"] = _pygamma.SpinMap_sp2_get
    if _newclass:sp2 = _swig_property(_pygamma.SpinMap_sp2_get, _pygamma.SpinMap_sp2_set)
    def SMfatal(self, *args): return _pygamma.SpinMap_SMfatal(self, *args)
    def SMerror(self, *args): return _pygamma.SpinMap_SMerror(self, *args)
    def getSMStr(self, *args): return _pygamma.SpinMap_getSMStr(self, *args)
    def getSM(self, *args): return _pygamma.SpinMap_getSM(self, *args)
    def setSM(self, *args): return _pygamma.SpinMap_setSM(self, *args)
    def Check(self, *args): return _pygamma.SpinMap_Check(self, *args)
    def __init__(self, *args): 
        this = _pygamma.new_SpinMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def __assign__(self, *args): return _pygamma.SpinMap___assign__(self, *args)
    __swig_destroy__ = _pygamma.delete_SpinMap
    __del__ = lambda self : None;
    def Sub1(self): return _pygamma.SpinMap_Sub1(self)
    def Sub2(self): return _pygamma.SpinMap_Sub2(self)
    def Spin1(self): return _pygamma.SpinMap_Spin1(self)
    def Spin2(self): return _pygamma.SpinMap_Spin2(self)
    def read(self, *args): return _pygamma.SpinMap_read(self, *args)
    def lsprint(self): return _pygamma.SpinMap_lsprint(self)
SpinMap_swigregister = _pygamma.SpinMap_swigregister
SpinMap_swigregister(SpinMap)

# This file is compatible with both classic and new-style classes.


